<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-27T10:34:33.298Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello</title>
    <link href="http://example.com/2021/06/27/hello/"/>
    <id>http://example.com/2021/06/27/hello/</id>
    <published>2021-06-27T10:34:33.000Z</published>
    <updated>2021-06-27T10:34:33.298Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式Cheat sheet</title>
    <link href="http://example.com/2021/03/26/zheng-ze-biao-da-shi-cheat-sheet/"/>
    <id>http://example.com/2021/03/26/zheng-ze-biao-da-shi-cheat-sheet/</id>
    <published>2021-03-26T14:10:00.000Z</published>
    <updated>2021-06-27T10:39:42.046Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lanyun1103.top/wp-content/uploads/2021/03/re1-300x225.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;http://lanyun1103.top/wp-content/uploads/2021/03/re1-300x225.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>中文字号、英文字号、毫米、像素对照图（一图流）</title>
    <link href="http://example.com/2021/03/26/zhong-wen-zi-hao-ying-wen-zi-hao-hao-mi-xiang-su-dui-zhao-tu-yi-tu-liu/"/>
    <id>http://example.com/2021/03/26/zhong-wen-zi-hao-ying-wen-zi-hao-hao-mi-xiang-su-dui-zhao-tu-yi-tu-liu/</id>
    <published>2021-03-26T14:08:32.000Z</published>
    <updated>2021-06-27T10:39:42.042Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lanyun1103.top/wp-content/uploads/2021/03/9426KQ0D6C0@QD63462-300x300.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;http://lanyun1103.top/wp-content/uploads/2021/03/9426KQ0D6C0@QD63462-300x300.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="LaTeX" scheme="http://example.com/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>Java Collection接口下类总结</title>
    <link href="http://example.com/2021/03/06/java-collection-jie-kou-xia-lei-zong-jie/"/>
    <id>http://example.com/2021/03/06/java-collection-jie-kou-xia-lei-zong-jie/</id>
    <published>2021-03-06T12:28:02.000Z</published>
    <updated>2021-06-27T10:39:42.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Collection接口下类总结"><a href="#Java-Collection接口下类总结" class="headerlink" title="Java Collection接口下类总结"></a>Java Collection接口下类总结</h1><h2 id="一、集合接口下的结构"><a href="#一、集合接口下的结构" class="headerlink" title="一、集合接口下的结构"></a>一、集合接口下的结构</h2><p>引用CSDN<a href="https://blog.csdn.net/javaee_gao/article/details/96372530">博客</a>的图片。蓝色——继承，绿色——实现。</p><p><img src="https://img-blog.csdnimg.cn/20190717224652123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phdmFlZV9nYW8=,size_16,color_FFFFFF,t_70"></p><p>因为对源码实在很感兴趣，所以就看了看java包中的源码，希望对结构有根深的理解。</p><h2 id="二、实现类"><a href="#二、实现类" class="headerlink" title="二、实现类"></a>二、实现类</h2><h3 id="1-Collection接口"><a href="#1-Collection接口" class="headerlink" title="1. Collection接口"></a>1. Collection接口</h3><h4 id="1-1-List"><a href="#1-1-List" class="headerlink" title="1.1 List"></a>1.1 List</h4><h5 id="1-1-1-LinkedList-※"><a href="#1-1-1-LinkedList-※" class="headerlink" title="1.1.1 LinkedList ※"></a>1.1.1 LinkedList ※</h5><p>这个类实现了List接口，继承了，创建<strong>链表</strong>数据结构。（没有同步方法，如果多线程同时访问需要自己实现同步）</p><h5 id="1-1-2-ArrayList-※"><a href="#1-1-2-ArrayList-※" class="headerlink" title="1.1.2 ArrayList ※"></a>1.1.2 ArrayList ※</h5><p>这个类实现了List接口，实现了<strong>可变大小</strong>的数组，随机访问和遍历元素时，提供更好的性能。</p><h4 id="1-2-Set"><a href="#1-2-Set" class="headerlink" title="1.2 Set"></a>1.2 Set</h4><h5 id="1-2-1-HashSet-※"><a href="#1-2-1-HashSet-※" class="headerlink" title="1.2.1 HashSet ※"></a>1.2.1 HashSet ※</h5><p>该类实现了Set接口，<strong>不允许出现重复元素</strong>，不保证集合中元素的顺序，允许包含值为null的元素，但最多只能一个。</p><h5 id="1-2-2-LinkedHashSet"><a href="#1-2-2-LinkedHashSet" class="headerlink" title="1.2.2 LinkedHashSet"></a>1.2.2 LinkedHashSet</h5><p>具有可预知迭代顺序的 <code>Set</code> 接口的哈希表和链接列表实现。</p><h5 id="1-2-3-TreeSet"><a href="#1-2-3-TreeSet" class="headerlink" title="1.2.3 TreeSet"></a>1.2.3 TreeSet</h5><p>该类实现了Set接口，可以实现排序等功能。</p><h4 id="1-3-Map"><a href="#1-3-Map" class="headerlink" title="1.3 Map"></a>1.3 Map</h4><h5 id="1-3-1-HashMap-※"><a href="#1-3-1-HashMap-※" class="headerlink" title="1.3.1 HashMap ※"></a>1.3.1 HashMap ※</h5><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。</p><p>该类实现了Map接口，继承自AbstractMap类。根据键的HashCode值存储数据，<strong>具有很快的访问速度</strong>，最多允许一条记录的键为null，不支持线程同步。</p><p>使用get(key)通过key获得value，使用put(key,value)加入新的值键对。</p><h5 id="1-3-2-TreeMap"><a href="#1-3-2-TreeMap" class="headerlink" title="1.3.2 TreeMap"></a>1.3.2 TreeMap</h5><p>只继承AbstractMap，并且使用一颗树来储存数据。</p><h5 id="1-3-3-WeakHashMap"><a href="#1-3-3-WeakHashMap" class="headerlink" title="1.3.3 WeakHashMap"></a>1.3.3 WeakHashMap</h5><p>只继承AbstractMap，使用弱密钥的哈希表。</p><h5 id="1-3-4-LinkedHashMap"><a href="#1-3-4-LinkedHashMap" class="headerlink" title="1.3.4 LinkedHashMap"></a>1.3.4 LinkedHashMap</h5><p>继承于HashMap，使用元素的自然顺序对元素进行排序.</p><h5 id="1-3-5-IdentityHashMap"><a href="#1-3-5-IdentityHashMap" class="headerlink" title="1.3.5 IdentityHashMap"></a>1.3.5 IdentityHashMap</h5><p>继承AbstractMap类，比较文档时使用引用相等。</p><h2 id="三、-java-util包中定义的部分集合类"><a href="#三、-java-util包中定义的部分集合类" class="headerlink" title="三、 java.util包中定义的部分集合类"></a>三、 java.util包中定义的部分集合类</h2><h3 id="1-Vector"><a href="#1-Vector" class="headerlink" title="1. Vector"></a>1. Vector</h3><p>这个类和C++中的vector比较类似，同时这个类与ArrayList也很类似，但是这个类<strong>是同步</strong>的。</p><h3 id="2-Stack"><a href="#2-Stack" class="headerlink" title="2. Stack"></a>2. Stack</h3><p>栈是Vector的一个子类，它实现了一个标准的后进先出的栈。</p><p>经典的方法，push加入，pop弹出</p><h3 id="3-Dictionary"><a href="#3-Dictionary" class="headerlink" title="3. Dictionary"></a>3. Dictionary</h3><p>Dictionary 类是一个抽象类，用来存储键/值对，作用和Map类相似。</p><h3 id="4-Hashtable"><a href="#4-Hashtable" class="headerlink" title="4. Hashtable"></a>4. Hashtable</h3><p>Hashtable 是 Dictionary(字典) 类的子类，位于 java.util 包中。</p><h3 id="5-Properties"><a href="#5-Properties" class="headerlink" title="5. Properties"></a>5. Properties</h3><p>Properties 继承于 Hashtable，表示一个持久的属性集，属性列表中每个键及其对应值都是一个字符串。</p><h3 id="6-BitSet"><a href="#6-BitSet" class="headerlink" title="6. BitSet"></a>6. BitSet</h3><p>一个Bitset类创建一种特殊类型的数组来保存位值。BitSet中数组大小会随需要增加。</p><h2 id="四、-使用迭代器对数据结构进行遍历："><a href="#四、-使用迭代器对数据结构进行遍历：" class="headerlink" title="四、 使用迭代器对数据结构进行遍历："></a>四、 使用迭代器对数据结构进行遍历：</h2><p>一个对象如果实现了<code>Iterator</code>接口或者<code>ListIterator</code>，可以使用迭代器进行输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testtest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//使用foreach迭代</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i:</span><br><span class="line">             list) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//迭代器迭代</span></span><br><span class="line">        <span class="comment">//Collection接口继承了Iterator类，也就是说任何一个实现Collection接口的类都可以使用这个函数来得到可迭代的Interator对象</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实在是懒得自己写，copy一下菜鸟教程的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">      map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;value3&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//第一种：普遍使用，二次取值</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.keySet遍历key和value：&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;key= &quot;</span>+ key + <span class="string">&quot; and value= &quot;</span> + map.get(key));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//第二种</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.entrySet使用iterator遍历key和value：&quot;</span>);</span><br><span class="line">      Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line">      <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">       Map.Entry&lt;String, String&gt; entry = it.next();</span><br><span class="line">       System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//第三种：推荐，尤其是容量大时</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.entrySet遍历key和value&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//第四种</span></span><br><span class="line">      System.out.println(<span class="string">&quot;通过Map.values()遍历所有的value，但不能遍历key&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (String v : map.values()) &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;value= &quot;</span> + v);</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h4 id="解释一下entrySet是什么，以及为什么使用："><a href="#解释一下entrySet是什么，以及为什么使用：" class="headerlink" title="解释一下entrySet是什么，以及为什么使用："></a>解释一下entrySet是什么，以及为什么使用：</h4><p>这个方法返回一个映射关系的Set集合，为什么使用呢，因为对于一般的映射关系，不能通过<code>foreach</code>进行迭代。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sites HashMap: &#123;<span class="number">1</span>=Google, <span class="number">2</span>=Runoob, <span class="number">3</span>=Taobao&#125;<span class="comment">//hashmap的直接映射关系</span></span><br><span class="line">Set View: [<span class="number">1</span>=Google, <span class="number">2</span>=Runoob, <span class="number">3</span>=Taobao]<span class="comment">//entrySet返回的Set关系</span></span><br></pre></td></tr></table></figure><h2 id="五、-比较器是什么"><a href="#五、-比较器是什么" class="headerlink" title="五、 比较器是什么"></a>五、 比较器是什么</h2><p>Java Comparator类中包含了一个compare方法。这个方法的用处是用来设置一个数据结构应该以怎么样的方式来对内容进行排序/分组。</p><p>一个典型的例子，一个ArrayList中储存了Person类的对象，这时候没有设置compare，java不知道这个类中哪个东西是排序的标准。（也可以引申到储存二维数据）</p><p>例：person1：age=11，id=12；一个person2：age=14，id=14。</p><p>如果想要告诉java，这个东西应该按照id升序排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(<span class="keyword">int</span> age, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Dog&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();     </span><br><span class="line">    list.add(<span class="keyword">new</span> Dog(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Dog(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">    list.sort(<span class="keyword">new</span> Comparator&lt;Dog&gt;() &#123;<span class="comment">//Collections.sort(list, new Comparator&lt;Dog&gt;())也是可以的</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dog o1, Dog o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o1.id - o2.id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-Collection接口下类总结&quot;&gt;&lt;a href=&quot;#Java-Collection接口下类总结&quot; class=&quot;headerlink&quot; title=&quot;Java Collection接口下类总结&quot;&gt;&lt;/a&gt;Java Collection接口下类总结&lt;/</summary>
      
    
    
    
    <category term="Java_SE" scheme="http://example.com/categories/Java-SE/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>美赛小总结</title>
    <link href="http://example.com/2021/02/14/mei-sai-xiao-zong-jie/"/>
    <id>http://example.com/2021/02/14/mei-sai-xiao-zong-jie/</id>
    <published>2021-02-14T14:16:34.000Z</published>
    <updated>2021-06-27T10:39:42.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="美赛小总结"><a href="#美赛小总结" class="headerlink" title="美赛小总结"></a>美赛小总结</h2><p>有段时间没更新内容了，忙着准备美赛，这个月九号就结束了，到现在没开始写下一个博客，总结一下过程中的问题，和我们的解决</p><h3 id="1-协同"><a href="#1-协同" class="headerlink" title="1. 协同"></a>1. 协同</h3><p>其实在比赛之前我们想了很多，后来发现不需要进行协同，但是这里我们还是推荐几个可以协同的途径</p><ol><li> sharelatex&amp;overleaf 这两个吧服务器在国外，比较卡，只能免费两人同</li><li> wps 协同doc文件，后来再转pdf</li><li> git 这个需要有一点计算机基础使用，懂的都会</li></ol><h3 id="2-论文"><a href="#2-论文" class="headerlink" title="2. 论文"></a>2. 论文</h3><p>关于这部分我在知乎写了一些，<a href="https://www.zhihu.com/question/436884223/answer/1723586415">岚纭</a></p><h3 id="3-技能点"><a href="#3-技能点" class="headerlink" title="3. 技能点"></a>3. 技能点</h3><p>关于建模的学生需要怎么学习，应该不用我说什么 但是网上说到关于负责编程的同学应该学什么的内容很少，我在这简单说几个仅供参考</p><ol><li> matlab</li></ol><p>对于建模来说，matlab的使用是一个很实际的问题，他不像R一样，遇到一个问题查一查可能一会就看出来怎么实现，例如三维元胞自动机如何实现，网上可能会有一个例子，但是怎么改成自己的模型需要对元胞自动机和matlab同时具有较深的理解。</p><p>美赛是一个这样的竞赛，这四天内你很难去造轮子，大部分时间你都在用别人的轮子。</p><p>所以竞赛结束后，我想拥有更多的时间去创造一些不存在的轮子，供后人使用，这也算是互联网生生不息的原因。</p><ol start="2"><li> 英语</li></ol><p>英语真的很重要，负责编程的同学不可能一点文献都不看，可能也会花费很多时间把文献翻译到中文，或者到最后把自己的编程思路翻译成英文。提前多看看正宗的英语语法，和美国本地人习惯用语。</p><ol start="3"><li> Python大数据的处理</li></ol><p>大数据的课程有很多，但是如果遇到2021年D题就需要编程和算法兼通，多看多学。</p><p>算了不写了，就这样吧，反正也没人看。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;美赛小总结&quot;&gt;&lt;a href=&quot;#美赛小总结&quot; class=&quot;headerlink&quot; title=&quot;美赛小总结&quot;&gt;&lt;/a&gt;美赛小总结&lt;/h2&gt;&lt;p&gt;有段时间没更新内容了，忙着准备美赛，这个月九号就结束了，到现在没开始写下一个博客，总结一下过程中的问题，和我们的解决</summary>
      
    
    
    
    <category term="数学建模" scheme="http://example.com/categories/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
    
    <category term="Matlab" scheme="http://example.com/tags/Matlab/"/>
    
    <category term="建模" scheme="http://example.com/tags/%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>关于查阅文献的伎俩</title>
    <link href="http://example.com/2021/01/30/guan-yu-cha-yue-wen-xian-de-ji-lia/"/>
    <id>http://example.com/2021/01/30/guan-yu-cha-yue-wen-xian-de-ji-lia/</id>
    <published>2021-01-30T11:10:13.000Z</published>
    <updated>2021-06-27T10:39:42.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于查阅文献的伎俩"><a href="#关于查阅文献的伎俩" class="headerlink" title="关于查阅文献的伎俩"></a>关于查阅文献的伎俩</h1><blockquote><p>针对安徽工业大学学生</p></blockquote><h2 id="一、文献途径"><a href="#一、文献途径" class="headerlink" title="一、文献途径"></a>一、文献途径</h2><p>关于查阅文献，浙大的学长曾经单独说过一次，如果没有正确的准备、正确的姿势，肯定效率是非常低下的。</p><p>我先说，文献的途径，以下内容无前后</p><ul><li>搜索引擎<ul><li>  百度</li><li>  google scholar</li></ul></li><li>  网站，包括各种领域的顶会网站。</li></ul><h3 id="1-搜索引擎的使用"><a href="#1-搜索引擎的使用" class="headerlink" title="1. 搜索引擎的使用"></a>1. 搜索引擎的使用</h3><h4 id="基本技巧："><a href="#基本技巧：" class="headerlink" title="基本技巧："></a>基本技巧：</h4><p>其实大部分可以从网上搜到，我只说一下比较常用的技巧</p><ol><li>使用双引号 给要查询的关键词加上双引号（半角，以下要加的其它符号同此），可以实现精确的查询，这种方法要求查询结果要精确匹配，不包括演变形式。 例如在搜索引擎的文字框中输入“电传”，它就会返回网页中有“电传”这个关键字的网址，而不会返回诸如“电话传真”之类网页。</li><li>使用加号（+） 在关键词的前面使用加号，也就等于告诉搜索引擎该单词必须出现在搜索结果中的网页上，例如，在搜索引擎中输入“+电脑+电话+传真”就表示要查找的内容必须要同时包含“电脑、电话、传真”这三个关键词。</li><li><strong>使用元词检索</strong><ul><li>intitle:清华大学，可以查到网页标题中带有清华大学的网页。</li><li>site:搜索某个域名下，例如site:zhihu.com</li><li>link:用于检索链接到某个选定网站的页面，URL:用于检索地址中带有某个关键词的网页。</li><li>filetype:用于指定搜索结果是什么文件</li></ul></li></ol><h4 id="额外技巧："><a href="#额外技巧：" class="headerlink" title="额外技巧："></a>额外技巧：</h4><p>怎么科学上网查阅文献呢，我在这里放一个文件<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.14.3/Clash.for.Windows.Setup.0.14.3.exe">Clash</a>，如果你想学习如何科学上网的话再联系我吧</p><h2 id="二、网站"><a href="#二、网站" class="headerlink" title="二、网站"></a>二、网站</h2><ul><li>  <a href="https://ahut.metaersp.com/">安徽工业大学电子资源全集</a>:sfz csnyr8</li><li>  <a href="https://ds.carsi.edu.cn/">全国大学生电子资源</a></li><li>  <a href="https://arxiv.org/">arxiv（论文预印本）</a></li><li>  <a href="https://fsso.cnki.net/">知网</a></li><li>  <a href="sci-hub.se">scihub</a></li><li>  <a href="https://paperswithcode.com/">paperwithcode</a></li></ul><h3 id="搜书网站"><a href="#搜书网站" class="headerlink" title="搜书网站"></a><strong>搜书网站</strong></h3><p><a href="https://www.jiumodiary.com/">https://www.jiumodiary.com/</a></p><p><a href="https://www.pan58.com/">https://www.pan58.com/</a></p><p><a href="http://www.toplinks.cc/">http://www.toplinks.cc/</a></p><p><a href="http://www.pdfzj.com/">http://www.pdfzj.com/</a></p><p><a href="https://www.pdf5.net/">https://www.pdf5.net/</a></p><h3 id="中文文献"><a href="#中文文献" class="headerlink" title="*中文文献*"></a><strong><em>*中文文献*</em></strong></h3><p>百度学术</p><p><a href="http://www.ncpssd.org/index.aspx">http://www.ncpssd.org/index.aspx</a></p><p><a href="http://www.nlc.cn/">http://www.nlc.cn/</a></p><h3 id="翻译"><a href="#翻译" class="headerlink" title="*翻译*"></a><strong><em>*翻译*</em></strong></h3><p><a href="http://dict.cnki.net/dict_result.aspx">http://dict.cnki.net/dict_result.aspx</a></p><h3 id="外文文献数据库"><a href="#外文文献数据库" class="headerlink" title="*外文文献数据库*"></a><strong><em>*外文文献数据库*</em></strong></h3><p><a href="https://www.webofknowledge.com/">https://www.webofknowledge.com</a></p><p><a href="http://www.scopus.com/">www.scopus.com</a></p><p><a href="https://www.ncbi.nlm.nih.gov/pubmed/">https://www.ncbi.nlm.nih.gov/pubmed/</a></p><p><a href="https://sci-hub.tw/">https://sci-hub.tw/</a></p><p><a href="https://www.researchgate.net/">https://www.researchgate.net/</a></p><p><a href="https://www.icpsr.umich.edu/web/pages/">https://www.icpsr.umich.edu/web/pages/</a></p><p>pubmed建议配合scholarscope使用</p><h3 id="生物学数据库"><a href="#生物学数据库" class="headerlink" title="*生物学数据库*"></a><strong><em>*生物学数据库*</em></strong></h3><p><a href="https://www.ebi.ac.uk/ena">https://www.ebi.ac.uk/ena</a></p><p><a href="https://www.ddbj.nig.ac.jp/index-e.html">https://www.ddbj.nig.ac.jp/index-e.html</a></p><p><a href="https://www.ncbi.nlm.nih.gov/genbank/">https://www.ncbi.nlm.nih.gov/genbank/</a></p><p><a href="https://www.uniprot.org/">https://www.uniprot.org/</a></p><p><a href="https://www.rcsb.org/">https://www.rcsb.org/</a></p><h3 id="国内外统计数据："><a href="#国内外统计数据：" class="headerlink" title="国内外统计数据："></a>国内外统计数据：</h3><p>1、香港中文大学的数学中英对照：<a href="http://www.cmi.hku.hk/Ref/Glossary/Mat/i.htm">http://www.cmi.hku.hk/Ref/Glossary/Mat/i.htm</a>　　 2、美国MCM的主页：<a href="http://www.comap.com/">http://www.comap.com</a>　　 3、美国普查局： <a href="http://2010.census.gov/2010census/language/chinese-simplified.php">http://2010.census.gov/2010census/language/chinese-simplified.php</a>　　 4、美国交通统计局：<a href="http://www.bts.gov/">http://www.bts.gov</a>　　 5、美国劳工统计局：<a href="http://stats.bls.gov/">http://stats.bls.gov</a>　　 6、美国国家农业统计署：<a href="http://www.usda.gov/wps/portal/usda/usdahome">http://www.usda.gov/wps/portal/usda/usdahome</a>　　 7、DOAJ: <a href="http://www.doaj.org/">http://www.doaj.org</a>　　 8、Open J-Gate: <a href="http://www.openj-gate.com/Search/QuickSearch.aspx">http://www.openj-gate.com/Search/QuickSearch.aspx</a>　　 9、Oaister: <a href="http://www.oclc.org/oaister">http://www.oclc.org/oaister</a>　　 10、arXiv: <a href="http://cn.arxiv.org/">http://cn.arxiv.org</a> 11、美国人口统计局：<a href="http://www.census.gov/">http://www.census.gov/</a>　　 12、联合国数据中心：<a href="http://www.un.org/zh/databases">http://www.un.org/zh/databases</a>　　 13、联合国农粮组织统计数据库：<a href="http://faostat3.fao.org/home/E">http://faostat3.fao.org/home/E</a>　　 14、经济调研数据：<a href="http://ideas.repec.org/">http://ideas.repec.org</a></p><h2 id="三、浏览器插件"><a href="#三、浏览器插件" class="headerlink" title="三、浏览器插件"></a>三、浏览器插件</h2><p>放一个<a href="http://lanyun1103.top/wp-content/uploads/2021/01/Sci-Hub-0.2.zip">scihub的插件</a>在这里</p><h2 id="四、如何管理文献"><a href="#四、如何管理文献" class="headerlink" title="四、如何管理文献"></a>四、如何管理文献</h2><p>建议使用zotero或者endnote，不清楚endnote能不能导出bibtex，反正zotero可以。</p><p>放一个<a href="http://lanyun1103.top/wp-content/uploads/2021/01/zoteroconnector.zip">zotero的插件</a>在这里</p><p>zotero如何使用不再赘述，放一个<a href="https://zhuanlan.zhihu.com/p/98428625">教程</a>在这里</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于查阅文献的伎俩&quot;&gt;&lt;a href=&quot;#关于查阅文献的伎俩&quot; class=&quot;headerlink&quot; title=&quot;关于查阅文献的伎俩&quot;&gt;&lt;/a&gt;关于查阅文献的伎俩&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;针对安徽工业大学学生&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="踩坑" scheme="http://example.com/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>阿里云Task2基本数据类型</title>
    <link href="http://example.com/2021/01/29/a-li-yun-task2-ji-ben-shu-ju-lei-xing/"/>
    <id>http://example.com/2021/01/29/a-li-yun-task2-ji-ben-shu-ju-lei-xing/</id>
    <published>2021-01-29T05:18:37.000Z</published>
    <updated>2021-06-27T10:39:42.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里云Task2基本数据类型"><a href="#阿里云Task2基本数据类型" class="headerlink" title="阿里云Task2基本数据类型"></a>阿里云Task2基本数据类型</h1><p>还是只说一些比较难记的操作：</p><h2 id="一、-列表："><a href="#一、-列表：" class="headerlink" title="一、 列表："></a>一、 列表：</h2><h3 id="1-列表操作"><a href="#1-列表操作" class="headerlink" title="1. 列表操作"></a>1. 列表操作</h3><p><code>list.append(obj)</code> 在列表末尾添加新的对象，只接受一个参数，参数可以是任何数据类型，被追加的元素在 list 中保持着原结构类型</p><p><code>list.extend(seq)</code> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</p><p><code>list.remove(obj)</code> 移除列表中某个值的第一个匹配项</p><p><code>list.pop([index=-1])</code> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。<em>需要注意的是python可以移除某一个特定index的元素</em></p><h3 id="2-获取列表值"><a href="#2-获取列表值" class="headerlink" title="2. 获取列表值"></a>2. 获取列表值</h3><p>直接索引：</p><ul><li>  通过元素的索引值，从列表获取单个元素，注意，列表索引值是从0开始的。</li><li>  通过将索引指定为-1，可让Python返回最后一个列表元素，索引 -2 返回倒数第二个列表元素，以此类推。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, [<span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]]</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>], <span class="built_in">type</span>(x[<span class="number">0</span>]))  </span><br><span class="line"><span class="comment"># Monday &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(x[-<span class="number">1</span>], <span class="built_in">type</span>(x[-<span class="number">1</span>]))  </span><br><span class="line"><span class="comment"># [&#x27;Thursday&#x27;, &#x27;Friday&#x27;] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(x[-<span class="number">2</span>], <span class="built_in">type</span>(x[-<span class="number">2</span>]))  </span><br><span class="line"><span class="comment"># Wednesday &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>切片：</p><p>通用写法是 <code>start : stop : step</code></p><p>情况 1 - “start :”</p><ul><li>  以 <code>step</code> 为 1 (默认) 从编号 <code>start</code> 往列表尾部切片。</li></ul><p>情况 2 - “: stop”</p><ul><li>  以 <code>step</code> 为 1 (默认) 从列表头部往编号 <code>stop</code> 切片。</li></ul><p>情况 3 - “start : stop”</p><ul><li>  以 <code>step</code> 为 1 (默认) 从编号 <code>start</code> 往编号 <code>stop</code> 切片。</li></ul><p>情况 4 - “start : stop : step”</p><ul><li>  以具体的 <code>step</code> 从编号 <code>start</code> 往编号 <code>stop</code> 切片。注意最后把 <code>step</code> 设为 -1，相当于将列表反向排列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">week = [<span class="string">&#x27;Monday&#x27;</span>, <span class="string">&#x27;Tuesday&#x27;</span>, <span class="string">&#x27;Wednesday&#x27;</span>, <span class="string">&#x27;Thursday&#x27;</span>, <span class="string">&#x27;Friday&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(week[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>])  <span class="comment"># [&#x27;Tuesday&#x27;, &#x27;Thursday&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(week[:<span class="number">4</span>:<span class="number">2</span>])  <span class="comment"># [&#x27;Monday&#x27;, &#x27;Wednesday&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(week[<span class="number">1</span>::<span class="number">2</span>])  <span class="comment"># [&#x27;Tuesday&#x27;, &#x27;Thursday&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(week[::-<span class="number">1</span>])  </span><br><span class="line"><span class="comment"># [&#x27;Friday&#x27;, &#x27;Thursday&#x27;, &#x27;Wednesday&#x27;, &#x27;Tuesday&#x27;, &#x27;Monday&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="3-列表操作符"><a href="#3-列表操作符" class="headerlink" title="3. 列表操作符"></a>3. 列表操作符</h3><ul><li>  等号操作符：<code>==</code></li><li>  连接操作符 <code>+</code></li><li>  重复操作符 <code>*</code></li><li>  成员关系操作符 <code>in</code>、<code>not in</code></li></ul><p>等号 ==，只有成员、成员位置都相同时才返回True。</p><p>列表拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。</p><h3 id="4-列表统计方法"><a href="#4-列表统计方法" class="headerlink" title="4. 列表统计方法"></a>4. 列表统计方法</h3><p><code>list.count(obj)</code> 统计某个元素在列表中出现的次数</p><p><code>list.reverse()</code> 反向列表中元素</p><p><code>list.index(x[, start[, end]])</code> 从列表中找出某个值第一个匹配项的索引位置</p><p><code>list.sort(key=None, reverse=False)</code> 对原列表进行排序。</p><ul><li>  <code>key</code> – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li>  <code>reverse</code> – 排序规则，<code>reverse = True</code> 降序， <code>reverse = False</code> 升序（默认）。</li><li>  该方法没有返回值，但是会对列表的对象进行排序。</li></ul><h2 id="二、-元组"><a href="#二、-元组" class="headerlink" title="二、 元组"></a>二、 元组</h2><ul><li>  创建元组可以用小括号 ()，也可以什么都不用，为了可读性，建议还是用 ()。</li><li>  元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = (<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line">x = <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line">x = []</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line">x = ()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line">x = (<span class="number">1</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(x))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>元组有<strong>不可更改</strong> (immutable) 的性质，因此不能直接给元组的元素赋值，但是只要元组中的元素可更改 (mutable)，那么我们可以直接更改其元素，注意这跟赋值其元素不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(t1)  <span class="comment"># (1, 2, 3, [4, 5, 6])</span></span><br><span class="line"></span><br><span class="line">t1[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(t1)  <span class="comment"># (1, 2, 3, [9, 5, 6])</span></span><br></pre></td></tr></table></figure><h3 id="1-内置方法"><a href="#1-内置方法" class="headerlink" title="1. 内置方法"></a>1. 内置方法</h3><p>元组大小和内容都不可更改，因此只有 <code>count</code> 和 <code>index</code> 两种方法。</p><h3 id="2-解压元组"><a href="#2-解压元组" class="headerlink" title="2. 解压元组"></a>2. 解压元组</h3><p>【例子】解压（unpack）一维元组（有几个元素左边括号定义几个变量）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">10.31</span>, <span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">(a, b, c) = t</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line"><span class="comment"># 1 10.31 python</span></span><br><span class="line"><span class="number">1</span> <span class="number">10.31</span> python</span><br></pre></td></tr></table></figure><p>【例子】解压二维元组（按照元组里的元组结构来定义变量）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">10.31</span>, (<span class="string">&#x27;OK&#x27;</span>, <span class="string">&#x27;python&#x27;</span>))</span><br><span class="line">(a, b, (c, d)) = t</span><br><span class="line"><span class="built_in">print</span>(a, b, c, d)</span><br><span class="line"><span class="comment"># 1 10.31 OK python</span></span><br><span class="line"><span class="number">1</span> <span class="number">10.31</span> OK python</span><br></pre></td></tr></table></figure><p>【例子】如果你只想要元组其中几个元素，用通配符「*」，英文叫 wildcard，在计算机语言中代表一个或多个元素。下例就是把多个元素丢给了 <code>rest</code> 变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">a, b, *rest, c = t</span><br><span class="line"><span class="built_in">print</span>(a, b, c)  <span class="comment"># 1 2 5</span></span><br><span class="line"><span class="built_in">print</span>(rest)  <span class="comment"># [3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="三、字符串"><a href="#三、字符串" class="headerlink" title="三、字符串"></a>三、字符串</h2><h3 id="1-字符串的切片与拼接"><a href="#1-字符串的切片与拼接" class="headerlink" title="1. 字符串的切片与拼接"></a>1. 字符串的切片与拼接</h3><ul><li>  类似于元组具有不可修改性</li><li>  从 0 开始 (和 Java 一样)</li><li>  切片通常写成 <code>start:end</code> 这种形式，包括「<code>start</code> 索引」对应的元素，不包括「<code>end</code>索引」对应的元素。</li><li>  索引值可正可负，正索引从 0 开始，从左往右；负索引从 -1 开始，从右往左。使用负数索引时，会从最后一个元素开始计数。最后一个元素的位置编号是 -1</li></ul><h3 id="2-Python-的常用转义字符"><a href="#2-Python-的常用转义字符" class="headerlink" title="2. Python 的常用转义字符"></a>2. Python 的常用转义字符</h3><p>转义字符</p><p>描述</p><p><code>\\</code></p><p>反斜杠符号</p><p><code>\&#39;</code></p><p>单引号</p><p><code>\&quot;</code></p><p>双引号</p><p><code>\n</code></p><p>换行</p><p><code>\t</code></p><p>横向制表符(TAB)</p><p><code>\r</code></p><p>回车</p><h3 id="3-字符串的常用内置方法"><a href="#3-字符串的常用内置方法" class="headerlink" title="3. 字符串的常用内置方法"></a>3. 字符串的常用内置方法</h3><ul><li><code>capitalize()</code> 将字符串的第一个字符转换为大写。</li><li><code>lower()</code> 转换字符串中所有大写字符为小写。</li><li><code>upper()</code> 转换字符串中的小写字母为大写。</li><li><code>swapcase()</code> 将字符串中大写转换为小写，小写转换为大写。</li><li><code>count(str, beg= 0,end=len(string))</code> 返回<code>str</code>在 string 里面出现的次数，如果<code>beg</code>或者<code>end</code>指定则返回指定范围内<code>str</code>出现的次数。</li><li><code>endswith(suffix, beg=0, end=len(string))</code> 检查字符串是否以指定子字符串 <code>suffix</code> 结束，如果是，返回 True，否则返回 False。如果 <code>beg</code> 和 <code>end</code> 指定值，则在指定范围内检查。</li><li><code>startswith(substr, beg=0,end=len(string))</code> 检查字符串是否以指定子字符串 <code>substr</code> 开头，如果是，返回 True，否则返回 False。如果 <code>beg</code> 和 <code>end</code> 指定值，则在指定范围内检查。</li><li><code>find(str, beg=0, end=len(string))</code> 检测 <code>str</code> 是否包含在字符串中，如果指定范围 <code>beg</code> 和 <code>end</code>，则检查是否包含在指定范围内，如果包含，返回开始的索引值，否则返回 -1。</li><li><code>rfind(str, beg=0,end=len(string))</code> 类似于 <code>find()</code> 函数，不过是从右边开始查找</li><li><code>isnumeric()</code> 如果字符串中只包含数字字符，则返回 True，否则返回 False。</li><li><code>ljust(width[, fillchar])</code>返回一个原字符串左对齐，并使用<code>fillchar</code>（默认空格）填充至长度<code>width</code>的新字符串。</li><li><code>rjust(width[, fillchar])</code>返回一个原字符串右对齐，并使用<code>fillchar</code>（默认空格）填充至长度<code>width</code>的新字符串。</li><li><code>lstrip([chars])</code> 截掉字符串左边的空格或指定字符。</li><li><code>rstrip([chars])</code> 删除字符串末尾的空格或指定字符。</li><li><code>strip([chars])</code> 在字符串上执行<code>lstrip()</code>和<code>rstrip()</code>。</li><li><code>partition(sub)</code> 找到子字符串sub，把字符串分为一个三元组<code>(pre_sub,sub,fol_sub)</code>，如果字符串中不包含sub则返回<code>(&#39;原字符串&#39;,&#39;&#39;,&#39;&#39;)</code>。</li><li><code>rpartition(sub)</code>类似于<code>partition()</code>方法，不过是从右边开始查找。</li><li><code>replace(old, new [, max])</code> 把 将字符串中的<code>old</code>替换成<code>new</code>，如果<code>max</code>指定，则替换不超过<code>max</code>次。</li><li><code>split(str=&quot;&quot;, num)</code> 不带参数默认是以空格为分隔符切片字符串，如果<code>num</code>参数有设置，则仅分隔<code>num</code>个子字符串，返回切片后的子字符串拼接的列表。</li><li><code>splitlines([keepends])</code> 按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数<code>keepends</code>为 False，不包含换行符，如果为 True，则保留换行符。</li><li><code>maketrans(intab, outtab)</code> 创建字符映射的转换表，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</li><li><code>translate(table, deletechars=&quot;&quot;)</code> 根据参数<code>table</code>给出的表，转换字符串的字符，要过滤掉的字符放到<code>deletechars</code>参数中。</li></ul><h3 id="4-字符串格式化"><a href="#4-字符串格式化" class="headerlink" title="4. 字符串格式化"></a>4. 字符串格式化</h3><ul><li>  <code>format</code> 格式化函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str8 = <span class="string">&quot;&#123;0&#125; Love &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;Lsgogroup&#x27;</span>)  <span class="comment"># 位置参数</span></span><br><span class="line"><span class="built_in">print</span>(str8)  <span class="comment"># I Love Lsgogroup</span></span><br><span class="line"></span><br><span class="line">str8 = <span class="string">&quot;&#123;a&#125; Love &#123;b&#125;&quot;</span>.<span class="built_in">format</span>(a=<span class="string">&#x27;I&#x27;</span>, b=<span class="string">&#x27;Lsgogroup&#x27;</span>)  <span class="comment"># 关键字参数</span></span><br><span class="line"><span class="built_in">print</span>(str8)  <span class="comment"># I Love Lsgogroup</span></span><br><span class="line"></span><br><span class="line">str8 = <span class="string">&quot;&#123;0&#125; Love &#123;b&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&#x27;I&#x27;</span>, b=<span class="string">&#x27;Lsgogroup&#x27;</span>)  <span class="comment"># 位置参数要在关键字参数之前</span></span><br><span class="line"><span class="built_in">print</span>(str8)  <span class="comment"># I Love Lsgogroup</span></span><br><span class="line"></span><br><span class="line">str8 = <span class="string">&#x27;&#123;0:.2f&#125;&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="number">27.658</span>, <span class="string">&#x27;GB&#x27;</span>)  <span class="comment"># 保留小数点后两位</span></span><br><span class="line"><span class="built_in">print</span>(str8)  <span class="comment"># 27.66GB</span></span><br></pre></td></tr></table></figure><ul><li>  Python 字符串格式化符号</li></ul><p>符 号</p><p>描述</p><p>%c</p><p>格式化字符及其ASCII码</p><p>%s</p><p>格式化字符串，用str()方法处理对象</p><p>%r</p><p>格式化字符串，用rper()方法处理对象</p><p>%d</p><p>格式化整数</p><p>%o</p><p>格式化无符号八进制数</p><p>%x</p><p>格式化无符号十六进制数</p><p>%X</p><p>格式化无符号十六进制数（大写）</p><p>%f</p><p>格式化浮点数字，可指定小数点后的精度</p><p>%e</p><p>用科学计数法格式化浮点数</p><p>%E</p><p>作用同%e，用科学计数法格式化浮点数</p><p>%g</p><p>根据值的大小决定使用%f或%e</p><p>%G</p><p>作用同%g，根据值的大小决定使用%f或%E</p><ul><li>  格式化操作符辅助指令</li></ul><p>符号</p><p>功能</p><p><code>m.n</code></p><p>m 是显示的最小总宽度,n 是小数点后的位数（如果可用的话）</p><p><code>-</code></p><p>用作左对齐</p><p><code>+</code></p><p>在正数前面显示加号( + )</p><p><code>#</code></p><p>在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</p><p><code>0</code></p><p>显示的数字前面填充’0’而不是默认的空格</p><h2 id="四、字典"><a href="#四、字典" class="headerlink" title="四、字典"></a>四、字典</h2><h3 id="可变类型与不可变类型"><a href="#可变类型与不可变类型" class="headerlink" title="可变类型与不可变类型"></a>可变类型与不可变类型</h3><ul><li>  序列是以连续的整数为索引，与此不同的是，字典以”关键字”为索引，关键字可以是任意不可变类型，通常用字符串或数值。</li><li>  字典是 Python 唯一的一个 <strong>映射类型</strong>，字符串、元组、列表属于序列类型。</li></ul><p>那么如何快速判断一个数据类型 <code>X</code> 是不是可变类型的呢？两种方法：</p><ul><li>  麻烦方法：用 <code>id(X)</code> 函数，对 X 进行某种操作，比较操作前后的 <code>id</code>，如果不一样，则 <code>X</code> 不可变，如果一样，则 <code>X</code> 可变。</li><li>  便捷方法：用 <code>hash(X)</code>，只要不报错，证明 <code>X</code> <strong>可被哈希，即不可变</strong>，反过来不<strong>可被哈希，即可变</strong>。</li></ul><h3 id="2-内置方法"><a href="#2-内置方法" class="headerlink" title="2. 内置方法"></a>2. 内置方法</h3><ul><li><code>dict.fromkeys(seq[, value])</code> 用于创建一个新字典，以序列 <code>seq</code> 中元素做字典的键，<code>value</code> 为字典所有键对应的初始值。</li><li><code>dict.keys()</code>返回一个可迭代对象，可以使用 <code>list()</code> 来转换为列表，列表为字典中的所有键。</li><li><code>dict.values()</code>返回一个迭代器，可以使用 <code>list()</code> 来转换为列表，列表为字典中的所有值。</li><li><code>dict.items()</code>以列表返回可遍历的 (键, 值) 元组数组。</li><li><code>dict.get(key, default=None)</code> 返回指定键的值，如果值不在字典中返回默认值。</li><li><code>dict.setdefault(key, default=None)</code>和<code>get()</code>方法 类似, 如果键不存在于字典中，将会添加键并将值设为默认值。</li><li><code>key in dict</code> <code>in</code> 操作符用于判断键是否存在于字典中，如果键在字典 dict 里返回<code>true</code>，否则返回<code>false</code>。而<code>not in</code>操作符刚好相反，如果键在字典 dict 里返回<code>false</code>，否则返回<code>true</code>。</li><li><code>dict.pop(key[,default])</code>删除字典给定键 <code>key</code> 所对应的值，返回值为被删除的值。<code>key</code> 值必须给出。若<code>key</code>不存在，则返回 <code>default</code> 值。</li><li><code>del dict[key]</code> 删除字典给定键 <code>key</code> 所对应的值</li><li><code>dict.popitem()</code>随机返回并删除字典中的一对键和值，如果字典已经为空，却调用了此方法，就报出KeyError异常</li><li><code>dict.clear()</code>用于删除字典内所有元素。</li><li><code>dict.copy()</code>返回一个字典的浅复制。</li></ul><p>【例子】直接赋值和 copy 的区别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">dic1 = &#123;<span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;lsgogroup&#x27;</span>, <span class="string">&#x27;num&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引用对象</span></span><br><span class="line">dic2 = dic1  </span><br><span class="line"><span class="comment"># 浅拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</span></span><br><span class="line">dic3 = dic1.copy()  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dic1))  <span class="comment"># 148635574728</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dic2))  <span class="comment"># 148635574728</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(dic3))  <span class="comment"># 148635574344</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 data 数据</span></span><br><span class="line">dic1[<span class="string">&#x27;user&#x27;</span>] = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">dic1[<span class="string">&#x27;num&#x27;</span>].remove(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(dic1)  <span class="comment"># &#123;&#x27;user&#x27;: &#x27;root&#x27;, &#x27;num&#x27;: [2, 3]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dic2)  <span class="comment"># &#123;&#x27;user&#x27;: &#x27;root&#x27;, &#x27;num&#x27;: [2, 3]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dic3)  <span class="comment"># &#123;&#x27;user&#x27;: &#x27;runoob&#x27;, &#x27;num&#x27;: [2, 3]&#125;</span></span><br></pre></td></tr></table></figure><ul><li>  <code>dict.update(dict2)</code>把字典参数 <code>dict2</code> 的 <code>key:value</code>对 更新到字典 <code>dict</code> 里。</li></ul><h2 id="五、集合"><a href="#五、集合" class="headerlink" title="五、集合"></a>五、集合</h2><p>Python 中<code>set</code>与<code>dict</code>类似，也是一组<code>key</code>的集合，但不存储<code>value</code>。由于<code>key</code>不能重复，所以，在<code>set</code>中，没有重复的<code>key</code>。</p><p>注意，<code>key</code>为不可变类型，即可哈希的值。</p><h3 id="1-创建方法："><a href="#1-创建方法：" class="headerlink" title="1. 创建方法："></a>1. 创建方法：</h3><ul><li>  先创建对象再加入元素。</li><li>  在创建空集合的时候只能使用<code>s = set()</code></li></ul><h3 id="2-集合的特点"><a href="#2-集合的特点" class="headerlink" title="2. 集合的特点"></a>2. 集合的特点</h3><ul><li>集合的两个特点：无序 (unordered) 和唯一 (unique)。</li><li>可以通过<code>in</code>或<code>not in</code>判断一个元素是否在集合中已经存在</li></ul><h3 id="3-内置方法"><a href="#3-内置方法" class="headerlink" title="3. 内置方法"></a>3. 内置方法</h3><ul><li><code>set.add(elmnt)</code>用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作。</li><li><code>set.update(set)</code>用于修改当前集合，可以添加新的元素或集合到当前集合中，如果添加的元素在集合中已存在，则该元素只会出现一次，重复的会忽略。</li><li><code>set.remove(item)</code> 用于移除集合中的指定元素。如果元素不存在，则会发生错误。</li><li><code>set.discard(value)</code> 用于移除指定的集合元素。<code>remove()</code> 方法在移除一个不存在的元素时会发生错误，而 <code>discard()</code> 方法不会。</li><li><code>set.pop()</code> 用于随机移除一个元素。</li><li><code>set.intersection(set1, set2)</code> 返回两个集合的交集。</li><li><code>set1 &amp; set2</code> 返回两个集合的交集。</li><li><code>set.intersection_update(set1, set2)</code> 交集，在原始的集合上移除不重叠的元素。</li><li><code>set.union(set1, set2)</code> 返回两个集合的并集。</li><li><code>set1 set2</code> 返回两个集合的并集。</li><li><code>set.difference(set)</code> 返回集合的差集。</li><li><code>set1 - set2</code> 返回集合的差集。</li><li><code>set.difference_update(set)</code> 集合的差集，直接在原来的集合中移除元素，没有返回值。</li><li><code>set.symmetric_difference(set)</code>返回集合的异或。</li><li><code>set1 ^ set2</code> 返回集合的异或。</li><li><code>set.symmetric_difference_update(set)</code>移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</li><li><code>set.issubset(set)</code>判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。</li><li><code>set1 &lt;= set2</code> 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。</li><li><code>set.issuperset(set)</code>用于判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。</li><li><code>set1 &gt;= set2</code> 判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。</li><li><code>set.isdisjoint(set)</code> 用于判断两个集合是不是不相交，如果是返回 True，否则返回 False。</li></ul><h3 id="4-不可变集合"><a href="#4-不可变集合" class="headerlink" title="4. 不可变集合"></a>4. 不可变集合</h3><ul><li>  <code>frozenset([iterable])</code> 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</li></ul><h2 id="六、序列"><a href="#六、序列" class="headerlink" title="六、序列"></a>六、序列</h2><p>在 Python 中，序列类型包括<strong>字符串、列表、元组、集合和字典</strong>，这些序列支持一些通用的操作，但比较特殊的是，<strong>集合和字典不支持</strong>索引、切片、相加和相乘操作。</p><h3 id="序列可用的方法"><a href="#序列可用的方法" class="headerlink" title="序列可用的方法"></a>序列可用的方法</h3><p><code>list(sub)</code> 把一个可迭代对象转换为列表</p><p><code>tuple(sub)</code> 把一个可迭代对象转换为元组</p><p><code>str(obj)</code> 把obj对象转换为字符串</p><p><code>len(s)</code> 返回对象（字符、列表、元组等）长度或元素个数</p><p><code>max(sub)</code>返回序列或者参数集合中的最大值</p><p><code>min(sub)</code>返回序列或参数集合中的最小值</p><p><code>sum(iterable[, start=0])</code> 返回序列<code>iterable</code>与可选参数<code>start</code>的总和</p><p><code>sorted(iterable, key=None, reverse=False)</code> 对所有可迭代的对象进行排序操作。</p><ul><li>  <code>iterable</code> – 可迭代对象。</li><li>  <code>key</code> – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li>  <code>reverse</code> – 排序规则，<code>reverse = True</code> 降序 ， <code>reverse = False</code> 升序（默认）。</li><li>  返回重新排序的列表。</li></ul><p><code>reversed(seq)</code> 函数返回一个反转的迭代器。</p><ul><li>  <code>seq</code> – 要转换的序列，可以是 tuple, string, list 或 range。</li></ul><p><code>enumerate(sequence, [start=0])</code></p><p><code>zip(iter1 [,iter2 [...]])</code></p><ul><li>  用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。</li><li>  我们可以使用 <code>list()</code> 转换来输出列表。</li><li>  如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 <code>*</code> 号操作符，可以将元组解压为列表。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;阿里云Task2基本数据类型&quot;&gt;&lt;a href=&quot;#阿里云Task2基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;阿里云Task2基本数据类型&quot;&gt;&lt;/a&gt;阿里云Task2基本数据类型&lt;/h1&gt;&lt;p&gt;还是只说一些比较难记的操作：&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    <category term="uncategorized" scheme="http://example.com/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>阿里云打卡Task1中对非新人比较难记住的点</title>
    <link href="http://example.com/2021/01/29/a-li-yun-da-qia-task1-zhong-dui-fei-xin-ren-bi-jiao-nan-ji-zhu-de-dian/"/>
    <id>http://example.com/2021/01/29/a-li-yun-da-qia-task1-zhong-dui-fei-xin-ren-bi-jiao-nan-ji-zhu-de-dian/</id>
    <published>2021-01-29T04:13:17.000Z</published>
    <updated>2021-06-27T10:39:42.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里云打卡"><a href="#阿里云打卡" class="headerlink" title="阿里云打卡"></a>阿里云打卡</h1><h2 id="Task1中对于非初学者可能比较难以记住的点："><a href="#Task1中对于非初学者可能比较难以记住的点：" class="headerlink" title="Task1中对于非初学者可能比较难以记住的点："></a>Task1中对于非初学者可能比较难以记住的点：</h2><h3 id="1-位运算符："><a href="#1-位运算符：" class="headerlink" title="1. 位运算符："></a>1. 位运算符：</h3><p>操作符</p><p>名称</p><p>示例</p><p><code>~</code></p><p>按位取反</p><p><code>~4</code></p><p><code>&amp;</code></p><p>按位与</p><p><code>4 &amp; 5</code></p><p>按位或</p><p><code>4 5</code></p><p><code>^</code></p><p>按位异或</p><p><code>4 ^ 5</code></p><p><code>&lt;&lt;</code></p><p>左移</p><p><code>4 &lt;&lt; 2</code></p><p><code>&gt;&gt;</code></p><p>右移</p><p><code>4 &gt;&gt; 2</code></p><h3 id="2-三元运算符："><a href="#2-三元运算符：" class="headerlink" title="2. 三元运算符："></a>2. 三元运算符：</h3><p>一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x, y = <span class="number">4</span>, <span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> x &lt; y:</span><br><span class="line">    small = x</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    small = y</span><br><span class="line"><span class="built_in">print</span>(small)  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><p>这是最基本的处理方式，python的三元运算符和java的差不多，以下为两个对比</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x, y = <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">small = x <span class="keyword">if</span> x &lt; y <span class="keyword">else</span> y</span><br><span class="line"><span class="built_in">print</span>(small)</span><br></pre></td></tr></table></figure><p>JAVA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">4</span>, y = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> small = x &lt; y ? x : y;</span><br><span class="line">System.out.println(small)</span><br></pre></td></tr></table></figure><h3 id="3-其他运算符"><a href="#3-其他运算符" class="headerlink" title="3. 其他运算符"></a>3. 其他运算符</h3><p>操作符</p><p>名称</p><p>示例</p><p><code>in</code></p><p>存在</p><p><code>&#39;A&#39; in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code></p><p><code>not in</code></p><p>不存在</p><p><code>&#39;h&#39; not in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code></p><p><code>is</code></p><p>是</p><p><code>&quot;hello&quot; is &quot;hello&quot;</code></p><p><code>not is</code></p><p>不是</p><p><code>&quot;hello&quot; is not &quot;hello&quot;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&quot;hello&quot;</span>]</span><br><span class="line">b = [<span class="string">&quot;hello&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b, a == b)  <span class="comment"># False True</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> <span class="keyword">not</span> b, a != b)  <span class="comment"># True False</span></span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>  is, is not 对比的是两个变量的内存地址</li><li>  ==, != 对比的是两个变量的值</li><li>  比较的两个变量，指向的都是地址不可变的类型（str等），那么is，is not 和 ==，！= 是完全等价的。</li><li>  对比的两个变量，指向的是地址可变的类型（list，dict，tuple等），则两者是有区别的。</li></ul><h3 id="4-运算符的优先级"><a href="#4-运算符的优先级" class="headerlink" title="4. 运算符的优先级"></a>4. 运算符的优先级</h3><p>运算符</p><p>描述</p><p>**</p><p>指数（最高优先级）</p><p>~+-</p><p>按位翻转，一元加号和减号</p><p>* / % //</p><p>乘，除，取模和取整除）</p><p>+ -</p><p>加法减法</p><p>&gt;&gt; &lt;&lt;</p><p>右移，左移运算符</p><p>&amp;</p><p>位‘AND’</p><p>^</p><p>位运算符</p><p>&lt;=&lt;&gt;&gt;=</p><p>比较运算符</p><p>&lt;&gt;==!=</p><p>等于运算符</p><p>=%=/=//=-=+=*=**=</p><p>赋值运算符</p><p>is is not</p><p>身份运算符</p><p>in not in</p><p>成员运算符</p><p>not and or</p><p>逻辑运算符</p><h3 id="5-保留小数点后几位"><a href="#5-保留小数点后几位" class="headerlink" title="5. 保留小数点后几位"></a>5. 保留小数点后几位</h3><p>如果想要保留小数点后n位，这个时候double可能没有这种功能，就可以使用Decimal包下的Decimal对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Decimal</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line">a = decimal.getcontext()</span><br><span class="line">b = Decimal(<span class="number">1</span>) / Decimal(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.3333333333333333333333333333</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置保留几位小数</span></span><br><span class="line">decimal.getcontext().prec = <span class="number">4</span></span><br><span class="line">c = Decimal(<span class="number">1</span>) / Decimal(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.3333</span></span><br></pre></td></tr></table></figure><h3 id="6-布尔运算的小细节："><a href="#6-布尔运算的小细节：" class="headerlink" title="6. 布尔运算的小细节："></a>6. 布尔运算的小细节：</h3><p>布尔 (boolean) 型变量只能取两个值，<code>True</code> 和 <code>False</code>。当把布尔型变量用在数字运算中，用 <code>1</code> 和 <code>0</code> 代表 <code>True</code> 和 <code>False</code>。</p><p><code>bool</code> 作用在基本类型变量：<code>X</code> 只要不是整型 <code>0</code>、浮点型 <code>0.0</code>，<code>bool(X)</code> 就是 <code>True</code>，其余就是 <code>False</code>。</p><p><code>bool</code> 作用在容器类型变量：<code>X</code> 只要不是空的变量，<code>bool(X)</code> 就是 <code>True</code>，其余就是 <code>False</code>。</p><p>_是否为空的标准_：</p><ul><li>  对于数值变量，<code>0</code>, <code>0.0</code> 都可认为是空的。</li><li>  对于容器变量，里面没元素就是空的</li></ul><h3 id="7-print-函数的参数讲解"><a href="#7-print-函数的参数讲解" class="headerlink" title="7. print()函数的参数讲解"></a>7. print()函数的参数讲解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(*objects, sep=<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li>  关键字参数<code>sep</code>是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；</li><li>  关键字参数<code>end</code>是输出结束时的字符，默认是换行符<code>\n</code>；</li><li>  关键字参数<code>file</code>是定义流输出的文件，可以是标准的系统输出<code>sys.stdout</code>，也可以重定义为别的文件；</li><li>  关键字参数<code>flush</code>是立即把内容输出到流文件，不作缓存。</li></ul><h3 id="8-位运算"><a href="#8-位运算" class="headerlink" title="8. 位运算"></a>8. <strong>位运算</strong></h3><p>二进制有三种不同的表示形式：原码、反码和补码，计算机内部使用补码来表示。</p><p><strong>原码</strong>：就是其二进制表示（注意，有一位符号位）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> -&gt; <span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> -&gt; -<span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>反码</strong>：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> -&gt; <span class="number">3</span></span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">11</span> <span class="number">00</span> -&gt; -<span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>补码</strong>：正数的补码就是原码，负数的补码是反码+1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> -&gt; <span class="number">3</span></span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">11</span> 01 -&gt; -<span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>符号位</strong>：最高位为符号位，0表示正数，1表示负数。在位运算中符号位也参与运算。</p><ul><li>  按位非操作 <code>~</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ <span class="number">1</span> = <span class="number">0</span></span><br><span class="line">~ <span class="number">0</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>把<code>num</code>的补码中的 0 和 1 全部取反（0 变为 1，1 变为 0）有符号整数的符号位在 <code>~</code> 运算中同样会取反。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> 01 01 -&gt; <span class="number">5</span></span><br><span class="line">~</span><br><span class="line">---</span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">10</span> <span class="number">10</span> -&gt; -<span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">10</span> <span class="number">11</span> -&gt; -<span class="number">5</span></span><br><span class="line">~</span><br><span class="line">---</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> 01 <span class="number">00</span> -&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure><ul><li>  按位与操作 &amp;</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &amp; <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span> &amp; <span class="number">0</span> = <span class="number">0</span></span><br><span class="line"><span class="number">0</span> &amp; <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="number">0</span> &amp; <span class="number">0</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>只有两个对应位都为 1 时才为 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> 01 01 -&gt; <span class="number">5</span></span><br><span class="line">&amp;</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> 01 <span class="number">10</span> -&gt; <span class="number">6</span></span><br><span class="line">---</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> 01 <span class="number">00</span> -&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure><ul><li>  按位或操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>只要两个对应位中有一个 1 时就为 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> 01 01 -&gt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> 01 <span class="number">10</span> -&gt; <span class="number">6</span></span><br><span class="line">---</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> 01 <span class="number">11</span> -&gt; <span class="number">7</span></span><br></pre></td></tr></table></figure><ul><li>  按位异或操作 ^</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> ^ <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="number">1</span> ^ <span class="number">0</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> ^ <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">0</span> ^ <span class="number">0</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>只有两个对应位不同时才为 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> 01 01 -&gt; <span class="number">5</span></span><br><span class="line">^</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> 01 <span class="number">10</span> -&gt; <span class="number">6</span></span><br><span class="line">---</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> -&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure><p>异或操作的性质：满足交换律和结合律</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A: <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> <span class="number">00</span></span><br><span class="line">B: <span class="number">00</span> <span class="number">00</span> 01 <span class="number">11</span></span><br><span class="line"></span><br><span class="line">A^B: <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line">B^A: <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">11</span></span><br><span class="line"></span><br><span class="line">A^A: <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">A^<span class="number">0</span>: <span class="number">00</span> <span class="number">00</span> <span class="number">11</span> <span class="number">00</span></span><br><span class="line"></span><br><span class="line">A^B^A: = A^A^B = B = <span class="number">00</span> <span class="number">00</span> 01 <span class="number">11</span></span><br></pre></td></tr></table></figure><ul><li>  按位左移操作 &lt;&lt;</li></ul><p><code>num &lt;&lt; i</code> 将<code>num</code>的二进制表示向左移动<code>i</code>位所得的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">11</span> -&gt; <span class="number">11</span></span><br><span class="line"><span class="number">11</span> &lt;&lt; <span class="number">3</span></span><br><span class="line">---</span><br><span class="line">01 01 <span class="number">10</span> <span class="number">00</span> -&gt; <span class="number">88</span> </span><br></pre></td></tr></table></figure><ul><li>  按位右移操作 &gt;&gt;</li></ul><p><code>num &gt;&gt; i</code> 将<code>num</code>的二进制表示向右移动<code>i</code>位所得的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">10</span> <span class="number">11</span> -&gt; <span class="number">11</span></span><br><span class="line"><span class="number">11</span> &gt;&gt; <span class="number">2</span></span><br><span class="line">---</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> -&gt; <span class="number">2</span> </span><br></pre></td></tr></table></figure><h4 id="利用位运算进行快捷数字操作："><a href="#利用位运算进行快捷数字操作：" class="headerlink" title="利用位运算进行快捷数字操作："></a>利用位运算进行快捷数字操作：</h4><p>通过 <code>&lt;&lt;</code>，<code>&gt;&gt;</code> 快速计算2的倍数问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n &lt;&lt; <span class="number">1</span> -&gt; 计算 n*<span class="number">2</span></span><br><span class="line">n &gt;&gt; <span class="number">1</span> -&gt; 计算 n/<span class="number">2</span>，负奇数的运算不可用</span><br><span class="line">n &lt;&lt; m -&gt; 计算 n*(<span class="number">2</span>^m)，即乘以 <span class="number">2</span> 的 m 次方</span><br><span class="line">n &gt;&gt; m -&gt; 计算 n/(<span class="number">2</span>^m)，即除以 <span class="number">2</span> 的 m 次方</span><br><span class="line"><span class="number">1</span> &lt;&lt; n -&gt; <span class="number">2</span>^n</span><br></pre></td></tr></table></figure><p>通过 <code>^</code> 快速交换两个整数。 通过 <code>^</code> 快速交换两个整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a ^= b</span><br><span class="line">b ^= a</span><br><span class="line">a ^= b</span><br></pre></td></tr></table></figure><p>通过 <code>a &amp; (-a)</code> 快速获取<code>a</code>的最后为 1 位置的整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> 01 01 -&gt; <span class="number">5</span></span><br><span class="line">&amp;</span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">10</span> <span class="number">11</span> -&gt; -<span class="number">5</span></span><br><span class="line">---</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 01 -&gt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">11</span> <span class="number">10</span> -&gt; <span class="number">14</span></span><br><span class="line">&amp;</span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">00</span> <span class="number">10</span> -&gt; -<span class="number">14</span></span><br><span class="line">---</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">10</span> -&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="利用位运算实现整数集合："><a href="#利用位运算实现整数集合：" class="headerlink" title="利用位运算实现整数集合："></a>利用位运算实现整数集合：</h4><p>一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。</p><p>比如集合 <code>&#123;1, 3, 4, 8&#125;</code>，可以表示成 <code>01 00 01 10 10</code> 而对应的位运算也就可以看作是对集合进行的操作。</p><blockquote><p>一开始我是没看懂的，其实也就是从左往右看，最左边的0-&gt;代表0不在集合，从左往右数第二个1-&gt;代表1在集合，以此可以得到结果</p></blockquote><p>元素与集合的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a  (<span class="number">1</span>&lt;&lt;i)  -&gt; 把 i 插入到集合中</span><br><span class="line">a &amp; ~(<span class="number">1</span>&lt;&lt;i) -&gt; 把 i 从集合中删除</span><br><span class="line">a &amp; (<span class="number">1</span>&lt;&lt;i)  -&gt; 判断 i 是否属于该集合（零不属于，非零属于）</span><br></pre></td></tr></table></figure><p>集合之间的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a 补   -&gt; ~a</span><br><span class="line">a 交 b -&gt; a &amp; b</span><br><span class="line">a 并 b -&gt; a  b</span><br><span class="line">a 差 b -&gt; a &amp; (~b)</span><br></pre></td></tr></table></figure><p>注意：整数在内存中是以补码的形式存在的，输出自然也是按照补码输出。</p><p>注意：</p><ul><li>  Python中<code>bin</code>一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号，巨坑。</li><li>  Python中的整型是补码形式存储的。</li><li>  Python中整型是不限制长度的不会超范围溢出。</li></ul><h3 id="9-特殊的for-else循环"><a href="#9-特殊的for-else循环" class="headerlink" title="9. 特殊的for-else循环"></a>9. 特殊的for-else循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 迭代变量 <span class="keyword">in</span> 可迭代对象:</span><br><span class="line">    代码块</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    代码块</span><br></pre></td></tr></table></figure><p>当<code>for</code>循环正常执行完的情况下，执行<code>else</code>输出，如果<code>for</code>循环中执行了跳出循环的语句，比如 <code>break</code>，将不执行<code>else</code>代码块的内容，与<code>while - else</code>语句一样。</p><h3 id="10-enumerate-函数"><a href="#10-enumerate-函数" class="headerlink" title="10. enumerate()函数"></a>10. enumerate()函数</h3><p>枚举函数的作用： 用来返回一个枚举对象，包含了一个数据集合中的数据，<strong>并且给这个元素一个索引值</strong>。</p><h3 id="11-推导式"><a href="#11-推导式" class="headerlink" title="11. 推导式"></a>11. 推导式</h3><p><strong>列表推导式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ expr <span class="keyword">for</span> value <span class="keyword">in</span> collection [<span class="keyword">if</span> condition] ]</span><br></pre></td></tr></table></figure><h3 id="12-异常处理"><a href="#12-异常处理" class="headerlink" title="12. 异常处理"></a>12. 异常处理</h3><h4 id="1-Python-标准异常总结："><a href="#1-Python-标准异常总结：" class="headerlink" title="1). Python 标准异常总结："></a>1). Python 标准异常总结：</h4><ul><li>  BaseException：所有异常的 <strong>基类</strong></li><li>  Exception：常规异常的 <strong>基类</strong></li><li>  StandardError：所有的内建标准异常的基类</li><li>  ArithmeticError：所有数值计算异常的基类</li><li>  FloatingPointError：浮点计算异常</li><li>  OverflowError：数值运算超出最大限制</li><li>  ZeroDivisionError：除数为零</li><li>  AssertionError：断言语句（assert）失败</li><li>  AttributeError：尝试访问未知的对象属性</li><li>  EOFError：没有内建输入，到达EOF标记</li><li>  EnvironmentError：操作系统异常的基类</li><li>  IOError：输入/输出操作失败</li><li>  OSError：操作系统产生的异常（例如打开一个不存在的文件）</li><li>  WindowsError：系统调用失败</li><li>  ImportError：导入模块失败的时候</li><li>  KeyboardInterrupt：用户中断执行</li><li>  LookupError：无效数据查询的基类</li><li>  IndexError：索引超出序列的范围</li><li>  KeyError：字典中查找一个不存在的关键字</li><li>  MemoryError：内存溢出（可通过删除对象释放内存）</li><li>  NameError：尝试访问一个不存在的变量</li><li>  UnboundLocalError：访问未初始化的本地变量</li><li>  ReferenceError：弱引用试图访问已经垃圾回收了的对象</li><li>  RuntimeError：一般的运行时异常</li><li>  NotImplementedError：尚未实现的方法</li><li>  SyntaxError：语法错误导致的异常</li><li>  IndentationError：缩进错误导致的异常</li><li>  TabError：Tab和空格混用</li><li>  SystemError：一般的解释器系统异常</li><li>  TypeError：不同类型间的无效操作</li><li>  ValueError：传入无效的参数</li><li>  UnicodeError：Unicode相关的异常</li><li>  UnicodeDecodeError：Unicode解码时的异常</li><li>  UnicodeEncodeError：Unicode编码错误导致的异常</li><li>  UnicodeTranslateError：Unicode转换错误导致的异常</li></ul><p><img src="https://img-blog.csdnimg.cn/20200710131404548.png"></p><h4 id="2-Python标准警告总结"><a href="#2-Python标准警告总结" class="headerlink" title="2). Python标准警告总结"></a>2). Python标准警告总结</h4><ul><li>  Warning：警告的基类</li><li>  DeprecationWarning：关于被弃用的特征的警告</li><li>  FutureWarning：关于构造将来语义会有改变的警告</li><li>  UserWarning：用户代码生成的警告</li><li>  PendingDeprecationWarning：关于特性将会被废弃的警告</li><li>  RuntimeWarning：可疑的运行时行为(runtime behavior)的警告</li><li>  SyntaxWarning：可疑语法的警告</li><li>  ImportWarning：用于在导入模块过程中触发的警告</li><li>  UnicodeWarning：与Unicode相关的警告</li><li>  BytesWarning：与字节或字节码相关的警告</li><li>  ResourceWarning：与资源使用相关的警告</li></ul><h4 id="3-处理语句"><a href="#3-处理语句" class="headerlink" title="3). 处理语句"></a>3). 处理语句</h4><ul><li>  try - except 语句</li><li>  try - except - finally</li><li>  try - except - else</li><li>  raise语句</li></ul><p>每个语句举几个例子：</p><h5 id="try-except"><a href="#try-except" class="headerlink" title="try-except:"></a>try-except:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    检测范围</span><br><span class="line"><span class="keyword">except</span> Exception[<span class="keyword">as</span> reason]:</span><br><span class="line">    出现异常后的处理代码</span><br><span class="line"><span class="comment">###################</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;打开文件出错\n原因是：&#x27;</span> + <span class="built_in">str</span>(error))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件出错</span></span><br><span class="line"><span class="comment"># 原因是：[Errno 2] No such file or directory: &#x27;test.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s = <span class="number">1</span> + <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="built_in">int</span>(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">except</span> (OSError, TypeError, ValueError) <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出错了！\n原因是：&#x27;</span> + <span class="built_in">str</span>(error))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出错了！</span></span><br><span class="line"><span class="comment"># 原因是：unsupported operand type(s) for +: &#x27;int&#x27; and &#x27;str&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="try-except-finally"><a href="#try-except-finally" class="headerlink" title="try-except-finally:"></a>try-except-finally:</h5><p>监测范围范围 except Exception[as reason]: 出现异常后的处理代码 finally: 无论如何都会被执行的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = x / y</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;result is&quot;</span>, result)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;division by zero!&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;executing finally clause&quot;</span>)</span><br><span class="line"></span><br><span class="line">divide(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># result is 2.0</span></span><br><span class="line"><span class="comment"># executing finally clause</span></span><br><span class="line">divide(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># division by zero!</span></span><br><span class="line"><span class="comment"># executing finally clause</span></span><br><span class="line">divide(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="comment"># executing finally clause</span></span><br><span class="line"><span class="comment"># TypeError: unsupported operand type(s) for /: &#x27;str&#x27; and &#x27;str&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="try-except-else"><a href="#try-except-else" class="headerlink" title="try-except-else:"></a>try-except-else:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    检测范围</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    出现异常后的处理代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    如果没有异常执行这块代码</span><br><span class="line"><span class="comment">###################</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    fh = <span class="built_in">open</span>(<span class="string">&quot;testfile.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    fh.write(<span class="string">&quot;这是一个测试文件，用于测试异常!!&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error: 没有找到文件或读取文件失败&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;内容写入文件成功&quot;</span>)</span><br><span class="line">    fh.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容写入文件成功</span></span><br></pre></td></tr></table></figure><h5 id="raise"><a href="#raise" class="headerlink" title="raise:"></a>raise:</h5><p>Python 使用<code>raise</code>语句抛出一个指定的异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> NameError(<span class="string">&#x27;HiThere&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;An exception flew by!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># An exception flew by!</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;阿里云打卡&quot;&gt;&lt;a href=&quot;#阿里云打卡&quot; class=&quot;headerlink&quot; title=&quot;阿里云打卡&quot;&gt;&lt;/a&gt;阿里云打卡&lt;/h1&gt;&lt;h2 id=&quot;Task1中对于非初学者可能比较难以记住的点：&quot;&gt;&lt;a href=&quot;#Task1中对于非初学者可能比较难以</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>一个Manim的bug-UserWarning: g0-87 not recognized</title>
    <link href="http://example.com/2021/01/22/yi-ge-manim-de-bug-userwarning-g0-87-not-recognized/"/>
    <id>http://example.com/2021/01/22/yi-ge-manim-de-bug-userwarning-g0-87-not-recognized/</id>
    <published>2021-01-22T07:13:32.000Z</published>
    <updated>2021-06-27T10:39:42.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个Manim的bug"><a href="#一个Manim的bug" class="headerlink" title="一个Manim的bug"></a>一个Manim的bug</h1><h3 id="一、报错代码："><a href="#一、报错代码：" class="headerlink" title="一、报错代码："></a>一、报错代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params">Scene</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">construct</span>(<span class="params">self</span>):</span></span><br><span class="line">        my_first_text = TextMobject(<span class="string">&quot;Writing with manim is fun&quot;</span>)</span><br><span class="line">        second_line = TextMobject(<span class="string">&quot;and easy to do!&quot;</span>)</span><br><span class="line">        second_line.next_to(my_first_text, DOWN)</span><br><span class="line">        third_line = TextMobject(<span class="string">&quot;for me and you!&quot;</span>)</span><br><span class="line">        third_line.next_to(my_first_text, DOWN)</span><br><span class="line"></span><br><span class="line">        self.add(my_first_text, second_line)</span><br><span class="line">        self.wait(<span class="number">2</span>)</span><br><span class="line">        self.play(Transform(second_line, third_line))</span><br><span class="line">        self.wait(<span class="number">2</span>)</span><br><span class="line">        second_line.shift(<span class="number">3</span> * DOWN)</span><br><span class="line">        self.play(ApplyMethod(my_first_text.shift, <span class="number">3</span> * UP))</span><br><span class="line">        <span class="comment">###Try uncommenting the following###</span></span><br><span class="line">        <span class="comment"># self.play(ApplyMethod(second_line.move_to, LEFT_SIDE-2*LEFT))</span></span><br><span class="line">        <span class="comment"># self.play(ApplyMethod(my_first_text.next_to,second_line))</span></span><br></pre></td></tr></table></figure><p>这是一段非常正常的代码，但是运行时报错：</p><blockquote><p>c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-87 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-114 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-105 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-116 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-110 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-103 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-119 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-104 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-109 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-97 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-115 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-102 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-117 not recognized warnings.warn(“%s not recognized” % ref) Traceback (most recent call last): File “c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\extract_scene.py”, line 155, in main scene = SceneClass(**scene_kwargs) File “c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\scene\scene.py”, line 75, in <strong>init</strong> self.construct() File “C:\Users\14215\PycharmProjects\manimPRO\main.py”, line 11, in construct my_first_text = TextMobject(“Writing with manim is fun”) File “c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\tex_mobject.py”, line 150, in <strong>init</strong> self.break_up_by_substrings() File “c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\tex_mobject.py”, line 190, in break_up_by_substrings sub_tex_mob.move_to(self.submobjects[last_submob_index], RIGHT) IndexError: list index out of range</p></blockquote><p><img src="http://pict.lanyun1103.top/typora/20210122150832.png" alt="image-20210122150831965"></p><h3 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h3><p>非常恶心，于是我去Manim github下的Issue中找到了同样的问题，翻了几十楼翻到了最终的解决方案：</p><ol><li> 找到manim\manimlib\tex_template.tex文件</li><li> 注释掉<code>\usepackage[T1]&#123;fontenc&#125;</code></li></ol><p><img src="http://pict.lanyun1103.top/typora/20210122151017.png" alt="image-20210122151017059"></p><p>问题就解决了，学会点赞。</p><p>这是一个常见的包依赖的问题，在Windows系统上出现的几率高，国外人对于这方面还是喜欢花时间啊，还好给我翻到了，不然这两天什么都学不了了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一个Manim的bug&quot;&gt;&lt;a href=&quot;#一个Manim的bug&quot; class=&quot;headerlink&quot; title=&quot;一个Manim的bug&quot;&gt;&lt;/a&gt;一个Manim的bug&lt;/h1&gt;&lt;h3 id=&quot;一、报错代码：&quot;&gt;&lt;a href=&quot;#一、报错代码：&quot; c</summary>
      
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>首个教你怎么在Pycharm上安装Manim的教程</title>
    <link href="http://example.com/2021/01/21/shou-ge-jiao-ni-zen-me-zai-pycharm-shang-an-zhuang-manim-de-jiao-cheng/"/>
    <id>http://example.com/2021/01/21/shou-ge-jiao-ni-zen-me-zai-pycharm-shang-an-zhuang-manim-de-jiao-cheng/</id>
    <published>2021-01-21T13:34:42.000Z</published>
    <updated>2021-06-27T10:39:42.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="首个教你怎么在Pycharm下安装Manim的教程"><a href="#首个教你怎么在Pycharm下安装Manim的教程" class="headerlink" title="首个教你怎么在Pycharm下安装Manim的教程"></a>首个教你怎么在Pycharm下安装Manim的教程</h1><h2 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1. 安装环境"></a>1. 安装环境</h2><ul><li>  Pycharm</li><li>  Git</li><li>  <a href="https://github.com/3b1b/manim">Manim</a></li></ul><p>前两个都是程序员标配了。只需要去github download zip或者本地git clone一下Manim就可以。</p><h2 id="2-创建工程"><a href="#2-创建工程" class="headerlink" title="2. 创建工程"></a>2. 创建工程</h2><p><img src="http://pict.lanyun1103.top/typora/20210121211054.png" alt="image-20210121211054838"></p><p><img src="http://pict.lanyun1103.top/typora/20210121211114.png" alt="image-20210121211114065"></p><p>把下载完成的manim放在工程主路径里，之后在pycharm的命令行中会用到。我这里的工程名字是<code>manimPRO</code>，按照自己取的名字在电脑上里面找到这个文件夹放进去就行。</p><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><p>最先的一步是什么，我猜大部分人不会使用git clone下载到工程目录，这会导致你的工程还未进行git初始化，所以先在上图中进行<code>git init</code>，当然也可以在pycharm的命令行里面进行初始化。</p><p><img src="http://pict.lanyun1103.top/typora/20210121211410.png" alt="image-20210121211410609"></p><p>这样就可以在pycharm的命令行中使用pip安装manim需要的环境。</p><hr><p>接下来来到pycharm中，打开命令行。</p><p><img src="http://pict.lanyun1103.top/typora/20210121211527.png" alt="image-20210121211527657"></p><p><code>cd manim</code>，进入到manim的目录。</p><p><img src="http://pict.lanyun1103.top/typora/20210121211641.png" alt="image-20210121211641540"></p><p>再输入<code>pip install -e . -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</code></p><p><img src="http://pict.lanyun1103.top/typora/20210121211734.png" alt="image-20210121211734607"></p><p>等待下载完成即可。</p><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4. 运行"></a>4. 运行</h2><p>这里给一个官方的代码，按照这个代码原封不动的运行，可以得到一个只有一个点的视频。</p><p>说明你已经安装成功了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> manimlib.imports <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">RESOLUTION = <span class="string">&quot;&quot;</span></span><br><span class="line">FLAGS = <span class="string">f&quot;-ps <span class="subst">&#123;RESOLUTION&#125;</span>&quot;</span></span><br><span class="line">SCENE = <span class="string">&quot;Test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params">Scene</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">construct</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.add(Dot())</span><br><span class="line">        Circle = Circle()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    script_name = <span class="string">f&quot;<span class="subst">&#123;Path(__file__).resolve()&#125;</span>&quot;</span></span><br><span class="line">    os.system(<span class="string">f&quot;manim <span class="subst">&#123;script_name&#125;</span> <span class="subst">&#123;SCENE&#125;</span> <span class="subst">&#123;FLAGS&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="5-报错的原因"><a href="#5-报错的原因" class="headerlink" title="5. 报错的原因"></a>5. 报错的原因</h2><ol><li> 没进行git初始化</li></ol><blockquote><p>Exception: Versioning for this project requires either an sdist tarball, or access to an upstream git repository. It’s also possible that there is a mismatch between the package nam e in setup.cfg and the argument given to pbr.version.VersionInfo. Project name manimlib was given, but was not able to be found. error in setup command: Error parsing C:\Users\14215\PycharmProjects\manimPRO\manim-master\setup.cfg: Exception: Versioning for this project requires either an sdist tarball, or acc ess to an upstream git repository. It’s also possible that there is a mismatch between the package name in setup.cfg and the argument given to pbr.version.VersionInfo. Project name mani mlib was given, but was not able to be found. ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.</p></blockquote><ol start="2"><li> 没添加信任镜像源</li></ol><blockquote><p>WARNING: The repository located at mirrors.aliyun.com is not a trusted or secure host and is being ignored. If this repository is available via HTTPS we recommend you use HTTPS instead, otherwise you may silence this warning and allow it anyway with ‘–trusted-host mirrors.aliyun.com’. ERROR: Could not find a version that satisfies the requirement argparse (from manimlib) ERROR: No matching distribution found for argparse</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;首个教你怎么在Pycharm下安装Manim的教程&quot;&gt;&lt;a href=&quot;#首个教你怎么在Pycharm下安装Manim的教程&quot; class=&quot;headerlink&quot; title=&quot;首个教你怎么在Pycharm下安装Manim的教程&quot;&gt;&lt;/a&gt;首个教你怎么在Pych</summary>
      
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="踩坑" scheme="http://example.com/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>数值分析公式总结（部分习题）</title>
    <link href="http://example.com/2021/01/07/shu-zhi-fen-xi-gong-shi-zong-jie-bu-fen-xi-ti/"/>
    <id>http://example.com/2021/01/07/shu-zhi-fen-xi-gong-shi-zong-jie-bu-fen-xi-ti/</id>
    <published>2021-01-07T02:21:32.000Z</published>
    <updated>2021-06-27T10:39:42.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数值分析公式"><a href="#数值分析公式" class="headerlink" title="数值分析公式"></a>数值分析公式</h1><p>一、插值多项式</p><h3 id="1-课前知识"><a href="#1-课前知识" class="headerlink" title="1. 课前知识"></a>1. 课前知识</h3><p>拉格朗日一次插值：</p><p>$$p_{1}(x)=l_0(x) y_{1}+l_{1}(x) y_{1}$$</p><p>$$l_{0}(x)=\frac{x-x_{1}}{x_{0}-x_{1}}$$</p><p>$$l_{1}(x)=\frac{x-x_{0}}{x_{1}-x_{0}}$$</p><p>$$\text{误差：}R_{1}(x)=\frac{f’’(\zeta)}{2}\left(x-x_{0}\right)\left(x-x_{1}\right)$$</p><p>拉格朗日插值更一般的情况： $$l_{k}(x)=\frac{\left(x-x_{0}\right)\left(x-x_{1}\right) \cdots\left(x-x_{k-1}\right)\left(x-x_{k+1}\right) \cdots\left(x-x_{n}\right)}{\left(x_{k}-x_{0}\right)\left(x_{k}-x_{1}\right) \cdots\left(x_{k}-x_{k-1}\right)\left(x_{k}-x_{k+1}\right) \cdots\left(x_{k}-x_{n}\right)}$$ $$\operatorname{Ln}(x)=\sum_{k=0}^{n} l_{k}(x) \cdot y_{k}$$ $$R_{n}(x)=f(x)-\operatorname{Ln}(x)=\frac{f^{(n+1)}(\xi)}{(n+1) !} w_{n+1}(x)$$</p><p>牛顿差值：</p><p>诶尔米特插值： $$H_{3}(x)=\alpha_{0}(x) y_{0}+\alpha_{1}(x) y_{1}+\beta_{0}(x) m_{0}+\beta_{1}(x) m_{1}$$ $$m_0与m_1为y_0、y_1的导数$$ $$\alpha_{0}(x)=[1+2 \cdot l_{1} (x)] \cdot l_{0}^{2}(x)$$ $$\alpha_{1}(x)=[1+2 \cdot l_{0} (x)] \cdot l_{1}^{2}(x)$$ $$\beta_{0}(x)=\left(x-x_{0}\right) \cdot l_{0}^{2}(x)$$ $$\beta_{1}(x)=\left(x-x_{1}\right) \cdot l_{0}^{2}(x)$$ $$l_{0}(x)=\frac{x-x_{1}}{x_{0}-x_{1}} \quad l_{1}(x)=\frac{x-x_{0}}{x_{1}-x_{0}}$$</p><p>梯形法： $$T_{1}=\frac{h}{2}\left[f\left(x_{k}\right)+f\left(x_{k+1}\right)\right] \quad T_{2 n}=\frac{1}{2} T_{n}+\frac{h_{n}}{2} \cdot \sum_{k=0}^{n-1} f\left(x_{k+\frac{1}{2}}\right) \quad h_{n}=\frac{b-a}{n}$$</p><p>三点高斯公式： $$f^{\prime}\left(x_{0}\right)=\frac{1}{2 h}\left[3 \cdot f\left(x_{0}\right)+4 \cdot f\left(x_{1}\right)-f\left(x_{2}\right)\right]+\frac{h}{3} f^{\prime \prime \prime}(\zeta)$$ $$f^{\prime}\left(x_{1}\right)=\frac{1}{2 h}\left[-f\left(x_{0}\right)+f\left(x_{2}\right)\right]-\frac{h}{6} \cdot f^{\prime \prime \prime}(\zeta)$$ $$f^{\prime}\left(x_{2}\right)=\frac{1}{2 h}\left[f\left(x_{0}\right)-4 f\left(x_{1}\right)+3 f\left(x_{2}\right)\right]+\frac{h^{2}}{3} f’’’(\zeta)$$</p><p>四阶龙格库塔公式： $$\begin{aligned} y_{n+1} &amp;=y_{n}+\frac{h}{6}\left(k_{1}+2 k_{2}+2 k_{3}+k_{4}\right) \ \newline k_{1} &amp;=f\left(x_{n}, y_{n}\right) \ \newline k_{2} &amp;=f\left(x_{n}+\frac{h}{2}, y_{n}+\frac{h}{2} k_{1}\right) \ \newline k_{3} &amp;=f\left(x_{n}+\frac{h}{2}, y_{n}+\frac{h}{2} k_{2}\right) \ \newline k_{4} &amp;=f\left(x_{n}+h, y_{n}+h k_{2}\right) \end{aligned}$$</p><p>牛顿迭代： $$x_{k+1}=x_{1}-\frac{F\left(x_{k}\right)}{F^{\prime}\left(x_{k}\right)}$$</p><h3 id="2-题目"><a href="#2-题目" class="headerlink" title="2. 题目"></a>2. 题目</h3><p><img src="http://pict.lanyun1103.top/typora/20210104154315.png" alt="image-20210104154314897"></p><p><img src="http://pict.lanyun1103.top/typora/20210104154232.png" alt="image-20210104154231853"></p><p><img src="http://pict.lanyun1103.top/typora/20210104154204.png" alt="image-20210104154204113"></p><p><img src="http://pict.lanyun1103.top/typora/20210104154132.png" alt="image-20210104154131819"></p><p><img src="http://pict.lanyun1103.top/typora/20210104154634.png" alt="image-20210104154634287"></p><p><img src="http://pict.lanyun1103.top/typora/20210104160219.png" alt="image-20210104160218685"></p><p><img src="http://pict.lanyun1103.top/typora/20210105100353.png" alt="image-20210105100353307"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数值分析公式&quot;&gt;&lt;a href=&quot;#数值分析公式&quot; class=&quot;headerlink&quot; title=&quot;数值分析公式&quot;&gt;&lt;/a&gt;数值分析公式&lt;/h1&gt;&lt;p&gt;一、插值多项式&lt;/p&gt;
&lt;h3 id=&quot;1-课前知识&quot;&gt;&lt;a href=&quot;#1-课前知识&quot; class=&quot;h</summary>
      
    
    
    
    <category term="数学" scheme="http://example.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>Untitled Post - 20</title>
    <link href="http://example.com/2021/01/06/289/"/>
    <id>http://example.com/2021/01/06/289/</id>
    <published>2021-01-06T12:46:41.000Z</published>
    <updated>2021-06-27T10:39:41.772Z</updated>
    
    
    
    
    <category term="uncategorized" scheme="http://example.com/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>Manim教程——基础绘制、展现、变换（一）</title>
    <link href="http://example.com/2021/01/06/288/"/>
    <id>http://example.com/2021/01/06/288/</id>
    <published>2021-01-06T12:45:01.000Z</published>
    <updated>2021-06-27T10:39:42.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Manim教程（一）"><a href="#Manim教程（一）" class="headerlink" title="Manim教程（一）"></a>Manim教程（一）</h1><p><img src="http://pict.lanyun1103.top/typora/20210106205012.png" alt="image-20210106205012723"></p><h2 id="零、使用manim运行脚本文件"><a href="#零、使用manim运行脚本文件" class="headerlink" title="零、使用manim运行脚本文件"></a>零、使用manim运行脚本文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m manim example.py Shapes -pl</span><br></pre></td></tr></table></figure><ul><li>  Shapes 为example.py文件中的一个类</li><li>  pl代表preview与low_quelity</li></ul><h3 id="所需要的环境："><a href="#所需要的环境：" class="headerlink" title="所需要的环境："></a>所需要的环境：</h3><ul><li>  MikTex</li><li>  mainm</li><li>  ffmpeg</li></ul><p>如何安装网上有很多教程，报错也有很多解决方案</p><hr><h2 id="一、分析结构"><a href="#一、分析结构" class="headerlink" title="一、分析结构"></a>一、分析结构</h2><p>先从<code>zimmermant</code>的github库中下载<a href="https://github.com/zimmermant/manim_tutorial/blob/master/manim_tutorial_P37.py">manim_tutorial_P37.py</a></p><blockquote><p><a href="https://github.com/zimmermant/manim_tutorial">https://github.com/zimmermant/manim_tutorial</a></p></blockquote><p>将文件放在manim的根目录下，我们从这一个文件开始，一步一步分析如何使用python制作精美的视频。</p><p><code>还是不知道怎么运行？</code></p><p>在anaconda的命令行中cd到manim的根目录，输入<code>python -m manim manim_tutorial_P37.py Shapes -pl</code></p><hr><p>我们从文件的一个类开始看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> manimlib.imports <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pyclbr</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shapes</span>(<span class="params">Scene</span>):</span></span><br><span class="line">    <span class="comment"># A few simple shapes</span></span><br><span class="line">    <span class="comment"># Python 2.7 version runs in Python 3.7 without changes</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">construct</span>(<span class="params">self</span>):</span></span><br><span class="line">        circle = Circle()</span><br><span class="line">        square = Square()</span><br><span class="line">        line=Line(np.array([<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>]),np.array([<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>]))</span><br><span class="line">        triangle=Polygon(np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]),np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]),np.array([<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">        self.play(ShowCreation(circle))</span><br><span class="line">        self.play(FadeOut(circle))</span><br><span class="line">        self.play(GrowFromCenter(square))</span><br><span class="line">        self.play(Transform(square,triangle))</span><br><span class="line">        self.add(line)</span><br></pre></td></tr></table></figure><ul><li>  Shapes是文件中的一个类，继承了Scene类，里面的construct方法重写父类中函数的内容，<strong>我们的动画也就是在函数内进行制作</strong>。</li><li>  函数中内容很明显分为两部分，1. 定义 2. 加入场景（类似于java的图形界面）。</li></ul><h2 id="二、基本绘制"><a href="#二、基本绘制" class="headerlink" title="二、基本绘制"></a>二、基本绘制</h2><h3 id="1-基本图形"><a href="#1-基本图形" class="headerlink" title="1. 基本图形"></a>1. 基本图形</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">circle = Circle()</span><br><span class="line">square = Square()</span><br><span class="line"></span><br><span class="line">self.add() <span class="comment">#添加</span></span><br><span class="line">self.play() <span class="comment">#进行play中的操作</span></span><br><span class="line">self.wait() <span class="comment">#等待几秒钟</span></span><br><span class="line">self.play(ShowCreation(circle)) <span class="comment">#将一个图形逐渐显示出来</span></span><br><span class="line">self.play(FadeOut(circle))  <span class="comment">#淡出</span></span><br><span class="line">self.play(GrowFromCenter(square))   <span class="comment">#从中心扩张的形式生成图形</span></span><br><span class="line">self.play(Transform(square,triangle))   <span class="comment">#两个参数，一个图形向另一个图形变形  </span></span><br></pre></td></tr></table></figure><h3 id="2-基本文字"><a href="#2-基本文字" class="headerlink" title="2. 基本文字"></a>2. 基本文字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">my_first_text=TextMobject(<span class="string">&quot;Writing with manim is fun&quot;</span>)</span><br><span class="line">second_line=TextMobject(<span class="string">&quot;and easy to do!&quot;</span>)</span><br><span class="line">second_line.next_to(my_first_text,DOWN) <span class="comment">#</span></span><br><span class="line">third_line=TextMobject(<span class="string">&quot;for me and you!&quot;</span>)</span><br><span class="line">third_line.next_to(my_first_text,DOWN)</span><br><span class="line"></span><br><span class="line">second_line.shift(<span class="number">3</span>*DOWN)   <span class="comment">#文字瞬间向下3个单位</span></span><br><span class="line">self.play(ApplyMethod(my_first_text.shift,<span class="number">3</span>*UP))    <span class="comment">#以补帧的方式进行动画移动。</span></span><br><span class="line">self.play(ApplyMethod(author.scale,<span class="number">1.5</span>))    <span class="comment">#scale(),放大</span></span><br><span class="line">author.match_color(quote2)  <span class="comment">#通过匹配颜色变成另一个图形的颜色</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，文字和图形可以进行的操作基本相同。</p></blockquote><ul><li>  图像默认生成在中央，next_to() 让文字在另一个图形的正下方</li></ul><p>AddingMoreText类中：</p><blockquote><p>为了简便，我将没必要说明的代码删除，只说明一些需要解释的方法，可以自己对比已经下载的代码进行调试</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddingMoreText</span>(<span class="params">Scene</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">construct</span>(<span class="params">self</span>):</span></span><br><span class="line">        quote = TextMobject(<span class="string">&quot;Imagination is more important than knowledge&quot;</span>)</span><br><span class="line">        quote.set_color(RED)    <span class="comment">#用来定义文字的颜色</span></span><br><span class="line">        quote.to_edge(UP)   <span class="comment">#输入参数有 UP、DOWN、LEFT、RIGHT，可以将图形或文字与画面的上、下、左、右边界的中心对齐。</span></span><br><span class="line">        quote2 = TextMobject(<span class="string">&quot;A person who never made a mistake never tried anything new&quot;</span>)</span><br><span class="line">        author = TextMobject(<span class="string">&quot;-Albert Einstein&quot;</span>)</span><br><span class="line">        author.next_to(quote.get_corner(DOWN+RIGHT),DOWN)   <span class="comment">#get_corner() 得到图形包裹矩阵的顶点，参数有UP+LEFT、UP+RIGHT、DOWN+LEFT、DOWN+RIGHT</span></span><br><span class="line">        self.play(Transform(quote,quote2),ApplyMethod(author.move_to,quote2.get_corner(DOWN+RIGHT)+DOWN+<span class="number">2</span>*LEFT))</span><br></pre></td></tr></table></figure><h3 id="3-旋转和高亮"><a href="#3-旋转和高亮" class="headerlink" title="3. 旋转和高亮"></a>3. 旋转和高亮</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RotateAndHighlight</span>(<span class="params">Scene</span>):</span></span><br><span class="line">    <span class="comment">#Rotation of text and highlighting with surrounding geometries</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">construct</span>(<span class="params">self</span>):</span></span><br><span class="line">        square=Square(side_length=<span class="number">5</span>,fill_color=YELLOW, fill_opacity=<span class="number">1</span>)  <span class="comment">#长度，填充颜色，透明度</span></span><br><span class="line">        label=TextMobject(<span class="string">&quot;Text at an angle&quot;</span>)</span><br><span class="line">        label.bg=BackgroundRectangle(label,fill_opacity=<span class="number">1</span>)  <span class="comment">#根据label的背景，定义一个矩形。</span></span><br><span class="line">        label_group=VGroup(label.bg,label)  <span class="comment">#组合</span></span><br><span class="line">        label_group.rotate(TAU/<span class="number">8</span>)   <span class="comment">#旋转一圈的八分之一，也就是45°</span></span><br><span class="line">        label2=TextMobject(<span class="string">&quot;Boxed text&quot;</span>,color=BLACK)</span><br><span class="line">        label2.bg=SurroundingRectangle(label2,color=BLUE,fill_color=RED, fill_opacity=<span class="number">.5</span>)   <span class="comment">#根据label2的边框定义一个及矩形。</span></span><br><span class="line">        label2_group=VGroup(label2,label2.bg)</span><br><span class="line">        label2_group.next_to(label_group,DOWN)</span><br><span class="line">        label3=TextMobject(<span class="string">&quot;Rainbow&quot;</span>)</span><br><span class="line">        label3.scale(<span class="number">2</span>)</span><br><span class="line">        label3.set_color_by_gradient(RED, ORANGE, YELLOW, GREEN, BLUE, PURPLE)  <span class="comment">#把文字按照字母顺序设置为不同的颜色</span></span><br><span class="line">        label3.to_edge(DOWN)    <span class="comment">#与底部对齐</span></span><br><span class="line"></span><br><span class="line">        self.add(square)</span><br><span class="line">        self.play(FadeIn(label_group))</span><br><span class="line">        self.play(FadeIn(label2_group))</span><br><span class="line">        self.play(FadeIn(label3))</span><br></pre></td></tr></table></figure><h3 id="4-基本公式"><a href="#4-基本公式" class="headerlink" title="4. 基本公式"></a>4. 基本公式</h3><h4 id="1-创建简单公式并且write："><a href="#1-创建简单公式并且write：" class="headerlink" title="1) 创建简单公式并且write："></a>1) 创建简单公式并且write：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicEquations</span>(<span class="params">Scene</span>):</span></span><br><span class="line">    <span class="comment">#A short script showing how to use Latex commands</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">construct</span>(<span class="params">self</span>):</span></span><br><span class="line">        eq1=TextMobject(<span class="string">&quot;$\\vec&#123;X&#125;_0 \\cdot \\vec&#123;Y&#125;_1 = 3$&quot;</span>) <span class="comment">#很简单的语法，通过TextMobect中使用$$包含公式就可以输出公式</span></span><br><span class="line">        eq1.shift(<span class="number">2</span>*UP)</span><br><span class="line">        eq2=TexMobject(<span class="string">r&quot;\vec&#123;F&#125;_&#123;net&#125; = \sum_i \vec&#123;F&#125;_i&quot;</span>)   <span class="comment">#在TexMobject中可以直接输入公式，在前面加r可以不需要使用双斜杠</span></span><br><span class="line">        eq2.shift(<span class="number">2</span>*DOWN)</span><br><span class="line"></span><br><span class="line">        self.play(Write(eq1))</span><br><span class="line">        self.play(Write(eq2))</span><br></pre></td></tr></table></figure><h4 id="2-添加颜色："><a href="#2-添加颜色：" class="headerlink" title="2) 添加颜色："></a>2) 添加颜色：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColoringEquations</span>(<span class="params">Scene</span>):</span></span><br><span class="line">    <span class="comment">#Grouping and coloring parts of equations</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">construct</span>(<span class="params">self</span>):</span></span><br><span class="line">        line1=TexMobject(<span class="string">r&quot;\text&#123;The vector &#125; \vec&#123;F&#125;_&#123;net&#125; \text&#123; is the net &#125;&quot;</span>,<span class="string">r&quot;\text&#123;force &#125;&quot;</span>,<span class="string">r&quot;\text&#123;on object of mass &#125;&quot;</span>)</span><br><span class="line">        line1.set_color_by_tex(<span class="string">&quot;force&quot;</span>, BLUE) <span class="comment">#直接设置text&#123;force的颜色为BLUE&#125;，一段一段的上色</span></span><br><span class="line">        line2=TexMobject(<span class="string">&quot;m&quot;</span>, <span class="string">&quot;\\text&#123; and acceleration &#125;&quot;</span>, <span class="string">&quot;\\vec&#123;a&#125;&quot;</span>, <span class="string">&quot;.  &quot;</span>)</span><br><span class="line">        line2.set_color_by_tex_to_color_map(&#123;</span><br><span class="line">            <span class="string">&quot;m&quot;</span>: YELLOW,</span><br><span class="line">            <span class="string">&quot;&#123;a&#125;&quot;</span>: RED</span><br><span class="line">        &#125;)  <span class="comment">#使用字典的方式，同时给好几段上色，但是我觉得都非常麻烦</span></span><br><span class="line">        sentence=VGroup(line1,line2)</span><br><span class="line">        sentence.arrange_submobjects(DOWN, buff=MED_LARGE_BUFF) <span class="comment">#在play之前，重新定义了sentence组合里面，每个成分的排列方式。意思是，向下排列，排列的间距为半个单位长度，如果没有定义排列方式，两行文字会重叠在一行。</span></span><br><span class="line">        self.play(Write(sentence))</span><br></pre></td></tr></table></figure><p>另一种方法，采用知乎<a href="https://www.zhihu.com/people/lijianhui.net">李狗嗨</a>提到的一种方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColoringEquations</span>(<span class="params">Scene</span>):</span></span><br><span class="line">    <span class="comment">#Grouping and coloring parts of equations</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">construct</span>(<span class="params">self</span>):</span></span><br><span class="line">        line1=TexMobject(<span class="string">r&quot;\text&#123;The vector &#125; \vec&#123;F&#125;_&#123;net&#125; \text&#123; is the net &#125;&quot;</span>,<span class="string">r&quot;\text&#123;force &#125;&quot;</span>,<span class="string">r&quot;\text&#123;on object of mass &#125;&quot;</span>)</span><br><span class="line">        line1[<span class="number">1</span>].set_color(BLUE)    <span class="comment">#通过制定line1这个列表来进行染色，效果仍然是force被染色了。</span></span><br><span class="line">        line2=TexMobject(<span class="string">&quot;m&quot;</span>, <span class="string">&quot;\\text&#123; and acceleration &#125;&quot;</span>, <span class="string">&quot;\\vec&#123;a&#125;&quot;</span>, <span class="string">&quot;.  &quot;</span>)</span><br><span class="line">        line2[<span class="number">0</span>].set_color(YELLOW)</span><br><span class="line">        line2[<span class="number">2</span>].set_color(RED)</span><br><span class="line"></span><br><span class="line">        sentence=VGroup(line1,line2)</span><br><span class="line">        sentence.arrange_submobjects(DOWN, buff=MED_LARGE_BUFF)</span><br><span class="line">        self.play(Write(sentence))</span><br></pre></td></tr></table></figure><p>那么到现在，怎么进行基础的绘制的命令就结束了。</p><p>下一次介绍怎么使用manim制作动画。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Manim教程（一）&quot;&gt;&lt;a href=&quot;#Manim教程（一）&quot; class=&quot;headerlink&quot; title=&quot;Manim教程（一）&quot;&gt;&lt;/a&gt;Manim教程（一）&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://pict.lanyun1103.top/t</summary>
      
    
    
    
    <category term="%e6%97%a5%e5%b8%b8%e5%ad%a6%e4%b9%a0" scheme="http://example.com/categories/e6-97-a5-e5-b8-b8-e5-ad-a6-e4-b9-a0/"/>
    
    <category term="一些技术" scheme="http://example.com/categories/e6-97-a5-e5-b8-b8-e5-ad-a6-e4-b9-a0/%E4%B8%80%E4%BA%9B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ggplot2使用教程（未完）</title>
    <link href="http://example.com/2020/12/24/ggplot2-shi-yong-jiao-cheng/"/>
    <id>http://example.com/2020/12/24/ggplot2-shi-yong-jiao-cheng/</id>
    <published>2020-12-24T06:14:34.000Z</published>
    <updated>2021-06-27T10:39:42.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ggplot2使用教程"><a href="#ggplot2使用教程" class="headerlink" title="ggplot2使用教程"></a>ggplot2使用教程</h1><h2 id="一、基本作图函数qplot"><a href="#一、基本作图函数qplot" class="headerlink" title="一、基本作图函数qplot"></a>一、基本作图函数qplot</h2><h3 id="1-例子"><a href="#1-例子" class="headerlink" title="1. 例子"></a>1. 例子</h3><p>表示快速作图，下面是qplot的参数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qplot(x,y,...,data,facets=<span class="literal">NULL</span>,margins=<span class="literal">FALSE</span>,geom=<span class="string">&quot;auto&quot;</span>,xlim=<span class="built_in">c</span>(<span class="literal">NA</span>,<span class="literal">NA</span>),ylim=<span class="built_in">c</span>(<span class="literal">NA</span>,<span class="literal">NA</span>),<span class="built_in">log</span>=<span class="string">&quot;&quot;</span>,main=<span class="literal">NULL</span>,xlab=<span class="literal">NULL</span>,ylab=<span class="literal">NULL</span>,asp=<span class="literal">NA</span>,stat=<span class="literal">NULL</span>,position=<span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure><blockquote><p>说明：x,y是绘制在x轴y轴的数据，data指定数据集，官方推荐使用数据框作为绘图数据集，因为数据框可以储存不同类型的值，ggplot2可以直接使用每一列数据来自动映射到图形属性（无论是什么类型的数据）。facets：分页参数，采用”行变量~列变量“。</p></blockquote><p>同样数据下，使用plot绘图：</p><p><img src="http://pict.lanyun1103.top/typora/20201224094219.png" alt="image-20201224094218947"></p><p>使用qplot绘图：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fcyl = as.factor(mpg$cyl)</span><br><span class="line">qplot(displ, hwy, data = mpg, shape=fcyl, color = fcyl)</span><br></pre></td></tr></table></figure><p><img src="http://pict.lanyun1103.top/typora/20201224094228.png" alt="image-20201224094228539"></p><p>为什么plot需要使用pch制定图形的形状而<code>qplot</code>不需要，因为<code>qplot</code>的自动映射机制，根据数据到几何图像的自动映射让他能自动将不同的数据使用不同的图形表示。同理，使用<code>`color=fcyl`</code>也是自动映射自动生成合适的颜色。</p><p>如何选择自己想要的颜色，可以在之后了解theme，使用<code>help(theme)</code>查看帮助</p><h3 id="2-其他图形："><a href="#2-其他图形：" class="headerlink" title="2. 其他图形："></a>2. 其他图形：</h3><p>除了散点图，还可以绘制其他图形，例如</p><ol><li> 点连线</li><li> 直方图</li><li> 密度曲线</li><li> 箱线图</li><li> 柱状图</li><li> 平滑线</li></ol><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qplot(x, y, data = mpq, geom = <span class="built_in">c</span>(<span class="string">&quot;point&quot;</span>,<span class="string">&quot;smooth&quot;</span>), method = <span class="string">&quot;loess&quot;</span>, se=<span class="built_in">F</span>)</span><br></pre></td></tr></table></figure><blockquote><p>method表示使用局部平滑。</p></blockquote><h3 id="3-保存"><a href="#3-保存" class="headerlink" title="3. 保存"></a>3. 保存</h3><p>使用ggplot2扩展包生成的图片可以使用<code>ggsave</code>进行保存为pdf。</p><hr><h2 id="二、ggplot2绘图"><a href="#二、ggplot2绘图" class="headerlink" title="二、ggplot2绘图"></a>二、ggplot2绘图</h2><p>ggplot2是基于图层（layer）的绘图工具。</p><p>可以认为图形语法一般包括：</p><ol><li> 数据</li><li> 映射</li><li> 集合对象</li><li> 统计变换</li><li> 标度</li><li> 坐标系</li><li> 分面</li></ol><h3 id="1）数据"><a href="#1）数据" class="headerlink" title="1）数据"></a>1）数据</h3><p>对于ggplot2来说必须使用数据框</p><h3 id="2）映射"><a href="#2）映射" class="headerlink" title="2）映射"></a>2）映射</h3><p>将数据相应数据对应到图形属性的一种关联过程</p><h3 id="3）几何对象"><a href="#3）几何对象" class="headerlink" title="3）几何对象"></a>3）几何对象</h3><p>呈现在集合图形中的多边形元素。</p><p><code>mapping=aes()</code>就是从数据到图形属性的映射函数，通常可以简化成<code>aes()</code>，<code>aes(x=var1,var2)</code>，<code>aes</code>函数中还包含其他的属性，例如大小、颜色、形状。</p><p><code>ggplot()</code>函数的功能是初始化ggplot对象，表明图形所用的数据是什么。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ggplot(mpg, aes(displ, hwy, colour = factor(cyl)))</span><br></pre></td></tr></table></figure><p><img src="http://pict.lanyun1103.top/typora/20201224105816.png" alt="image-20201224105815944"></p><p>命令会创建一个空的图形</p><p>如果需要绘制图形，<strong>使用<code>layer()</code>添加几何对象</strong>，代码如下</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ggplot(mpg, aes(displ, hwy, colour = factor(cyl)))+</span><br><span class="line">  layer(geom = <span class="string">&quot;point&quot;</span>, stat = <span class="string">&quot;identity&quot;</span>, position = <span class="string">&quot;identity&quot;</span>, params = <span class="built_in">list</span>(na.rm=<span class="literal">FALSE</span>))</span><br></pre></td></tr></table></figure><p>这里使用了+完成对图形的绘制，layer函数的帮助信息如下</p><blockquote><p>layer(geom=NULL,stat=NULL,data=NULL,mapping=NULL,position=NULL,params=list(),inherit.aes=TRUE,check.aes=TRUE,check.param=TRUE,show.legend=NA,key_glyph=NULL,layer_class=Layer)</p></blockquote><p>比较多，但是一个图层函数必须包含</p><ol><li> data：包含数据的数据集，如果在上面的ggplot中指定过，那么不需要在进行指定，但是也可以在layer中再次指定另一个数据集。</li><li> mapping：即aes</li><li> geom：几何对象</li><li> stat：统计变换，我们可以在图层函数中添加我们想要的数据的统计变换。</li><li> position：位置调整，主要是为了调整图形重合的现象。</li></ol><p>也就是：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layer(data, mapping, geom, stat, position)</span><br></pre></td></tr></table></figure><p>以上的例子绘制的是散点图，设置的为<code>geom=&quot;point&quot;</code>，其他有<code>geom=&quot;line&quot;</code>，但是可以使用其他的代替，例如<code>geom_point()</code>，效果是一样的。<strong>可以使用<code>???geom_.</code>来获得其他函数的清单</strong>。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ggplot(mpg, aes(displ, hwy, colour = factor(cyl)))+</span><br><span class="line">  geom_point()</span><br></pre></td></tr></table></figure><h3 id="4）统计变换"><a href="#4）统计变换" class="headerlink" title="4）统计变换"></a>4）统计变换</h3><p>因为有时候我们不仅要绘制原始的图形，还需要对原始数据进行“统计”上的修改。并且把修改后的数据一起表现出来。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ggplot(mpg, aes(displ, hwy, colour = factor(cyl)))+</span><br><span class="line">  geom_point()+stat_smooth(method = <span class="string">&quot;loess&quot;</span>, se = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure><p><img src="http://pict.lanyun1103.top/typora/20201224111340.png" alt="image-20201224111340039"></p><h3 id="5）标度"><a href="#5）标度" class="headerlink" title="5）标度"></a>5）标度</h3><h3 id="6）坐标系"><a href="#6）坐标系" class="headerlink" title="6）坐标系"></a>6）坐标系</h3><h3 id="7）分面"><a href="#7）分面" class="headerlink" title="7）分面"></a>7）分面</h3><p>即通过<code>+</code>联系起来的ggplot各个页面</p><h2 id="三、绘图实践"><a href="#三、绘图实践" class="headerlink" title="三、绘图实践"></a>三、绘图实践</h2><h3 id="1-散点图"><a href="#1-散点图" class="headerlink" title="1. 散点图"></a>1. 散点图</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ggplot(mpg, aes(displ, hwy, colour = factor(cyl),shape=factor(cyl)))+</span><br><span class="line">  geom_point()+</span><br><span class="line">  scale_shape_manual(values=<span class="number">1</span>:<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">scale_color_manual()    <span class="comment">#自定义颜色</span></span><br><span class="line">scale_fill_manual()     <span class="comment">#自定义填充颜色</span></span><br><span class="line">scale_size_manual()     <span class="comment">#自定义大小</span></span><br></pre></td></tr></table></figure><h3 id="2-折线图"><a href="#2-折线图" class="headerlink" title="2. 折线图"></a>2. 折线图</h3><h4 id="1）普通折线图"><a href="#1）普通折线图" class="headerlink" title="1）普通折线图"></a>1）普通折线图</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ggplot(longley, aes(factor(Year), Unemployed, group =<span class="number">1</span>))+geom_line()</span><br></pre></td></tr></table></figure><p><img src="http://pict.lanyun1103.top/typora/20201224133947.png" alt="image-20201224133947822"></p><blockquote><p>注意：group=1，告诉ggplot()将数据点作为一个分组来处理。</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">geom_line()     <span class="comment">#连线</span></span><br><span class="line">geom_point()    <span class="comment">#标记图片的点</span></span><br><span class="line"><span class="comment">#以下代码可以着重标记图片中某些点</span></span><br><span class="line">a = subset(longley, Unemployed&gt;=median(Unemployed))</span><br><span class="line">p + geom_point(data = a, shape = <span class="number">21</span>, size = <span class="number">4</span>,fill = <span class="string">&quot;black&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="2）面积图"><a href="#2）面积图" class="headerlink" title="2）面积图"></a>2）面积图</h4><p><code>geom_area</code>用来绘制面积图</p><h4 id="3）绘制多个折线图"><a href="#3）绘制多个折线图" class="headerlink" title="3）绘制多个折线图"></a>3）绘制多个折线图</h4><p>使用reshape2中的<code>melt()</code>处理宽数据，将数据框以长格式排成一列。</p><h3 id="3-其他的"><a href="#3-其他的" class="headerlink" title="3. 其他的"></a>3. 其他的</h3><p>基本同理啦</p><h3 id="4-设置主题"><a href="#4-设置主题" class="headerlink" title="4.设置主题"></a>4.设置主题</h3><p>使用<code>help(theme)</code>，可以查看所有theme的参数，更细微的内容在这里不说了。</p><h3 id="5-其他图形"><a href="#5-其他图形" class="headerlink" title="5. 其他图形"></a>5. 其他图形</h3><p><code>geom_tile()</code>绘制相关系数热图</p><p><code>geom_ribbon()</code>绘制带状图</p><p><code>stat_function()</code>绘制任意函数的曲线图</p><p><code>geom_area</code>，绘制不同的阴影颜色</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ggplot2使用教程&quot;&gt;&lt;a href=&quot;#ggplot2使用教程&quot; class=&quot;headerlink&quot; title=&quot;ggplot2使用教程&quot;&gt;&lt;/a&gt;ggplot2使用教程&lt;/h1&gt;&lt;h2 id=&quot;一、基本作图函数qplot&quot;&gt;&lt;a href=&quot;#一、基本</summary>
      
    
    
    
    <category term="日常学习" scheme="http://example.com/categories/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="R" scheme="http://example.com/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX如何使用Bibtex引用参考文献</title>
    <link href="http://example.com/2020/12/23/latex-ru-he-shi-yong-bibtex-yin-yong-can-kao-wen-xian/"/>
    <id>http://example.com/2020/12/23/latex-ru-he-shi-yong-bibtex-yin-yong-can-kao-wen-xian/</id>
    <published>2020-12-23T13:53:39.000Z</published>
    <updated>2021-06-27T10:39:42.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LaTeX如何使用Bibtex引用参考文献"><a href="#LaTeX如何使用Bibtex引用参考文献" class="headerlink" title="LaTeX如何使用Bibtex引用参考文献"></a>LaTeX如何使用Bibtex引用参考文献</h1><h2 id="零、什么是Bibtex"><a href="#零、什么是Bibtex" class="headerlink" title="零、什么是Bibtex"></a>零、什么是Bibtex</h2><p>Bibtex是一个.bib的文件，是一种参考文献的格式，里面包含了多个参考文献的信息，bib文件可以使用记事本或者其他程序打开，文件内信息格式如下，</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@article&#123;name,</span><br><span class="line">    title = &#123;&#125;,</span><br><span class="line">    issn = &#123;&#125;,</span><br><span class="line">    url = &#123;&#125;,</span><br><span class="line">    abstract = &#123;&#125;,</span><br><span class="line">    language = &#123;中文;&#125;,</span><br><span class="line">    number = &#123;&#125;,</span><br><span class="line">    urldate = &#123;&#125;,</span><br><span class="line">    journal = &#123;&#125;,</span><br><span class="line">    author = &#123;&#125;,</span><br><span class="line">    year = &#123;&#125;,</span><br><span class="line">    keywords = &#123;&#125;,</span><br><span class="line">    pages = &#123;1&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>name是文献的唯一标识号，之后在文章中使用<code>\cite&#123;name&#125;</code>引用文献。</p><h2 id="一、获得文献的BibTex"><a href="#一、获得文献的BibTex" class="headerlink" title="一、获得文献的BibTex"></a>一、获得文献的BibTex</h2><p>这里我使用<code>Zotero</code>配合chrome插件获得知网文献的bibtex，打开知网文献页面后点击右上角的插件，保存在本地的文库内。</p><p><img src="http://pict.lanyun1103.top/typora/20201223205859.png" alt="image-20201223205852689"></p><p>桌面的Zotero中选择导出条目</p><p><img src="http://pict.lanyun1103.top/typora/20201223211527.png" alt="image-20201223211527501"></p><p>导出为BibTeX</p><p><img src="http://pict.lanyun1103.top/typora/20201223211551.png" alt="image-20201223211551189"></p><p>导出的文件就是.bib结尾的BibTeX文件了。</p><h2 id="二、在Tex文件中使用BibTex"><a href="#二、在Tex文件中使用BibTex" class="headerlink" title="二、在Tex文件中使用BibTex"></a>二、在Tex文件中使用BibTex</h2><p>使用<code>\bibliographystyle&#123;plain&#125;</code>，指定文章使用的文献id格式，有很多种，这里用的是plain，其他的可以在网上搜到，不做过多赘述。</p><p>使用<code>\bibliography&#123;filename&#125;</code>，filename就是你刚刚导出的bib文件名，不带后缀。</p><blockquote><p>注意：bib文件需要和tex文件在同一目录</p></blockquote><p>在正文中，使用<code>\cite&#123;articlename&#125;</code>，这里的<code>articlename</code>就是前文说到的<code>name</code>。使用这种唯一标识的方法，可以在文章中多次引用同一篇文献。</p><p>我这里在使用过程中，发现TexStudio在自动补全中也有bib文件中文献的<code>name</code>。</p><p><img src="http://pict.lanyun1103.top/typora/20201223213043.png" alt="image-20201223213043177"></p><p>在TexStudio摁F5，最终的效果如下。·</p><p><img src="http://pict.lanyun1103.top/typora/20201223214058.png" alt="image-20201223214058621"></p><p>导出的文件中可以看到一个bbl文件，这里面储存了参考文献的latex型语句，也就是说使用bibtex进行参考文献管理，节省了你自己写latex型语句参考文献的重复步骤。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LaTeX如何使用Bibtex引用参考文献&quot;&gt;&lt;a href=&quot;#LaTeX如何使用Bibtex引用参考文献&quot; class=&quot;headerlink&quot; title=&quot;LaTeX如何使用Bibtex引用参考文献&quot;&gt;&lt;/a&gt;LaTeX如何使用Bibtex引用参考文献&lt;/</summary>
      
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="LaTeX" scheme="http://example.com/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX科技排版</title>
    <link href="http://example.com/2020/12/23/latex-ke-ji-pai-ban/"/>
    <id>http://example.com/2020/12/23/latex-ke-ji-pai-ban/</id>
    <published>2020-12-23T12:31:14.000Z</published>
    <updated>2021-06-27T10:39:42.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LaTeX科技排版"><a href="#LaTeX科技排版" class="headerlink" title="LaTeX科技排版"></a>LaTeX科技排版</h1><p>基础的现就不说了，直接说使用latex如何进行排版</p><h2 id="一、排版语句"><a href="#一、排版语句" class="headerlink" title="一、排版语句"></a>一、排版语句</h2><h3 id="1-居中"><a href="#1-居中" class="headerlink" title="1. 居中"></a>1. 居中</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;center&#125;</span><br><span class="line">    hello, this is a paragraph</span><br><span class="line">\end&#123;center&#125;</span><br></pre></td></tr></table></figure><p>创建一个居中行</p><p><img src="http://pict.lanyun1103.top/typora/20201223090346.png" alt="image-20201223090339447"></p><h2 id="二、数学公式："><a href="#二、数学公式：" class="headerlink" title="二、数学公式："></a>二、数学公式：</h2><h3 id="1-输入公式"><a href="#1-输入公式" class="headerlink" title="1. 输入公式"></a>1. 输入公式</h3><h4 id="1-行内"><a href="#1-行内" class="headerlink" title="1) 行内"></a>1) 行内</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;math&#125;  \LaTeX \end&#123;math&#125; %第一种</span><br><span class="line">\(  \LaTeX   \)%第二种</span><br><span class="line">$   \LaTeX   $ %第三种</span><br></pre></td></tr></table></figure><h4 id="2-行外（独立数学公式"><a href="#2-行外（独立数学公式" class="headerlink" title="2) 行外（独立数学公式"></a>2) 行外（独立数学公式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;displaymath&#125; 数学公式 \end&#123;displaymath&#125; </span><br><span class="line"> </span><br><span class="line">\[  数学公式   \] </span><br><span class="line"> </span><br><span class="line">$$   数学公式   $$ </span><br></pre></td></tr></table></figure><h4 id="3-独立成行"><a href="#3-独立成行" class="headerlink" title="3) 独立成行"></a>3) 独立成行</h4><p>独立成行的数学公式，且自动编号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;equation&#125; </span><br><span class="line"> 0.3x+y/2=4z </span><br><span class="line"> \end&#123;equation&#125;</span><br></pre></td></tr></table></figure><h4 id="4-复杂的数学公式"><a href="#4-复杂的数学公式" class="headerlink" title="4) 复杂的数学公式"></a>4) 复杂的数学公式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;array&#125;&#123;对齐方式选择&#125;  %对齐方式的单位是每一列</span><br><span class="line">              内容</span><br><span class="line">            \end&#123;array&#125;</span><br><span class="line">%对齐方式包括：左对齐  （l），右对齐  （r），居中  （c）</span><br><span class="line"></span><br><span class="line">%例子：绘制一个矩阵</span><br><span class="line">$$</span><br><span class="line">\left (</span><br><span class="line">    \begin&#123;array&#125;&#123;c&#125; </span><br><span class="line">     </span><br><span class="line">    \left \begin&#123;array&#125;&#123;cc&#125; </span><br><span class="line">     </span><br><span class="line">    a+b&amp;b+c\\c+d&amp;d+a </span><br><span class="line">     </span><br><span class="line">    \end&#123;array&#125; </span><br><span class="line">     </span><br><span class="line">    \right \\ </span><br><span class="line">     </span><br><span class="line">    y\\z </span><br><span class="line">     </span><br><span class="line">    \end&#123;array&#125;</span><br><span class="line">\right </span><br><span class="line">) </span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><img src="http://pict.lanyun1103.top/typora/20201223092505.png" alt="image-20201223092505485"></p><h2 id="三、命令集"><a href="#三、命令集" class="headerlink" title="三、命令集"></a>三、命令集</h2><h3 id="1-文献形式"><a href="#1-文献形式" class="headerlink" title="1. 文献形式"></a>1. 文献形式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> \documentclass[options]&#123;article&#125; </span><br></pre></td></tr></table></figure><p>{}内：article, book, report,letter.</p><p>Options：可用于选择文献的字号、版式和数学公式的编号及对齐方式</p><ol><li> 字号：11pt，10pt；</li><li> 版式：默认版式是单列单面，双面输出选twoside;</li><li> 数学公式的编号及对齐方式：默认版式位数学公式居中，编号在右 leqno:编号在左，公式左对齐</li></ol><p>使用中文latex内容的话，\documentstyle{article}改为\documentstyle{carticle}</p><h3 id="2-文献头命令"><a href="#2-文献头命令" class="headerlink" title="2. 文献头命令"></a>2. 文献头命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(1)标题命令    </span><br><span class="line">\title&#123;标题&#125;</span><br><span class="line"></span><br><span class="line">(2)作者命令</span><br><span class="line">\author&#123;作者名\\地址&#125;，即使不需要作者名，此命令不能省</span><br><span class="line"></span><br><span class="line">(3)日期命令</span><br><span class="line">\date&#123;年月日&#125;，一般写为\date&#123;&#125;</span><br><span class="line"></span><br><span class="line">(4)头命令</span><br><span class="line">\maketitle</span><br><span class="line">该命令产生文献头，即将以上三个命令按latex格式排印出来，不使用这个命令，以上三个都无法显示出来</span><br><span class="line"></span><br><span class="line">(5)注释命令</span><br><span class="line">\thanks</span><br><span class="line">  此命令用于小字号产生注释，排在标题页的底部。</span><br></pre></td></tr></table></figure><h3 id="3-节命令"><a href="#3-节命令" class="headerlink" title="3. 节命令"></a>3. 节命令</h3><p><code>\section</code></p><h3 id="4-简单的规则"><a href="#4-简单的规则" class="headerlink" title="4. 简单的规则"></a>4. 简单的规则</h3><ol><li>空格：Latex中空格不起作用。</li><li>换行：用控制命令“\”,或“ \newline”.</li><li>分段：用控制命令“\par” 或空出一行。</li><li>换页：用控制命令“\newpage”或“\clearpage”</li></ol><h3 id="5-西文字符转换"><a href="#5-西文字符转换" class="headerlink" title="5. 西文字符转换"></a>5. 西文字符转换</h3><p>\rm 罗马字体 \it 意大利字体</p><p>\bf 黑体 \sl 倾斜体</p><p>\sf 等线体 \sc 小体大写字母</p><p>\tt 打字机字体 \mit 数学斜体</p><h3 id="6-字号转换"><a href="#6-字号转换" class="headerlink" title="6. 字号转换"></a>6. 字号转换</h3><p>点数(pt) 相应中文字号 控制命令</p><p>25 一号 \Huge</p><p>20 二号 \huge</p><p>17 三号 \LARGE</p><p>14 四号 \Large</p><p>12 小四号 \large</p><p>10 五号 \normalsize</p><p>9 小五号 \small</p><p>8 六号 \footnotesize</p><p>7 小六号 \scriptsize</p><p>5 七号 \tiny</p><h3 id="7-中文排版字体和字号"><a href="#7-中文排版字体和字号" class="headerlink" title="7.中文排版字体和字号"></a>7.中文排版字体和字号</h3><p><img src="http://pict.lanyun1103.top/typora/20201223093403.png" alt="image-20201223093403496"></p><p><img src="http://pict.lanyun1103.top/typora/20201223093406.png" alt="image-20201223093405985"></p><h3 id="8-页面控制命令"><a href="#8-页面控制命令" class="headerlink" title="8. 页面控制命令"></a>8. 页面控制命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\textwidth=14.5cm </span><br><span class="line"> </span><br><span class="line">\textheight=21.5cm </span><br></pre></td></tr></table></figure><h3 id="9-数学模式命令"><a href="#9-数学模式命令" class="headerlink" title="9. 数学模式命令"></a>9. 数学模式命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;array&#125;&#123;l&#125; </span><br><span class="line"> </span><br><span class="line">\mathrm&#123;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#125;\\%罗马字体 </span><br><span class="line"> </span><br><span class="line">\athtt&#123;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#125;\\%打字机字体 </span><br><span class="line"> </span><br><span class="line">\mathbf&#123;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#125;\\%黑体 </span><br><span class="line"> </span><br><span class="line">\mathsf&#123;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#125;\\%等线体 </span><br><span class="line"> </span><br><span class="line">\mathit&#123;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#125;\\%意大利字体 </span><br><span class="line"> </span><br><span class="line">\end&#123;array&#125; </span><br><span class="line">$$</span><br></pre></td></tr></table></figure><ol><li>上标下标以及其他东西</li></ol><p>文中数学公式用\$作为定界符，对于独立公式用\$\$作为定界符。</p><p>上标用“^”，下标用“_”。</p><ol start="2"><li><p>求和与积分命令\sum; \int</p></li><li><p>数学公式中省略号和极限 :</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\cdots  \ldots \vdots  \ddots $ </span><br></pre></td></tr></table></figure><p>效果如下</p><p>$$\cdots \ldots \vdots \ddots $$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\lim_&#123;n \rightarrow \infty&#125;\sin x_&#123;n&#125;=0$$ </span><br></pre></td></tr></table></figure><p>$$\lim_{n \rightarrow \infty}\sin x_{n}=0$$</p><ol start="4"><li>分式命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\frac&#123;分子&#125;&#123;分母&#125;</span><br><span class="line"></span><br><span class="line">\frac&#123;x&#125;&#123;y&#125;</span><br><span class="line">\frac&#123;1&#125;&#123;2&#125;%简单，不演示</span><br></pre></td></tr></table></figure><ol start="5"><li>根式命令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\sqrt[n]&#123;内容&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>增加间距</li></ol><ol><li> 字间距命令 <code>\!</code> <code>\,</code> <code>\:</code> <code>\;</code> <code>\over</code> 依次增大间距，\,最常用，也可用于文字状态。另外还有\ 1</li><li> 水平空距命令 <code>\hspace&#123;空间距值&#125; \hskip</code> 空间距值 <code>\hspace&#123;1in&#125; \hskip 1in</code> 必须用在行内，前后都是文字</li><li> 垂直空距命令 <code>\vspace&#123;空间距值&#125;</code> \vskip 空间距值 <code>\vspace&#123;1in&#125;</code> <code>\vskip 1in</code></li></ol><ol start="7"><li>上划线、下划线内容</li></ol><p>上划线命令 <code>\overline&#123;内容&#125;</code></p><p>$$\overline{1+x+y}$$</p><p>下划线命令 <code>\underline&#123;内容&#125;</code></p><p>$$\underline{1+x+y}$$</p><p>$$\overline{\underline{x+y}+z}$$</p><ol start="8"><li>上括号、下括号命令</li></ol><p>上花括号命令 <code>$$\overbrace&#123;x+y+z+w&#125;$$</code></p><p>$$\overbrace{x+y+z+w}$$</p><p>下花括号命令 <code>$$a+\underbrace&#123;b+\cdots +y&#125;_&#123;24&#125;+z$$</code></p><p>$$a+\underbrace{b+\cdots +y}_{24}+z$$</p><ol start="9"><li>上下限</li></ol><p><code>\limits</code></p><ol start="10"><li>公式编号命令 <code>\eqno ()</code> <code>\leqno ()</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">%戴帽命令 </span><br><span class="line">$$\hat&#123;o&#125; \tilde&#123;o&#125;$$ </span><br><span class="line"> </span><br><span class="line">$$\widehat&#123;A+B&#125; \widetilde&#123;a+b&#125;$$ </span><br><span class="line"></span><br><span class="line">%左定界符命令</span><br><span class="line">\left</span><br><span class="line">%此命令产生大小随高度变化的定界符，比如：&#123;&#125;</span><br><span class="line">\left\&#123;</span><br><span class="line">%右定界符命令</span><br><span class="line">\right</span><br><span class="line">\right\&#125;</span><br></pre></td></tr></table></figure><h2 id="四、插入图片"><a href="#四、插入图片" class="headerlink" title="四、插入图片"></a>四、插入图片</h2><p><strong>Tex支持最好的是.eps格式的图片</strong>，将转换好的.eps文件(如p1.eps)与你的TEX文件放置在同一文件夹。</p><p>首先假如graphics宏包：<code>\usepackage[dvips]&#123;graphicx&#125;</code></p><p>插入图片语句：<code>\includegraphics[angle=90,width=0.65\textwidth]&#123;p1.eps&#125;</code></p><blockquote><p>angle=90表示原图顺时针旋转90度，width=0.65\textwidth表示图形的宽度为文本宽度的0.65</p></blockquote><p>如果希望图形有名有姓并且可以实现交叉引用，可以使用Latex的图形环境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;figure&#125;[htbp]</span><br><span class="line">\centering %图形居中</span><br><span class="line">\includegraphics[angle=90,width=0.65\textwidth]&#123;p1.eps&#125;</span><br><span class="line">\caption&#123;图片1&#125;</span><br><span class="line">\label&#123;tupian1&#125;</span><br><span class="line">\end&#123;figure&#125;</span><br></pre></td></tr></table></figure><p>这样，经编译后，你的dvi文件中会出现一个名为“图片1”的图片，如果你之后需要引用它，只要<code>\ref&#123;tupian1&#125;</code>命令即可．</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LaTeX科技排版&quot;&gt;&lt;a href=&quot;#LaTeX科技排版&quot; class=&quot;headerlink&quot; title=&quot;LaTeX科技排版&quot;&gt;&lt;/a&gt;LaTeX科技排版&lt;/h1&gt;&lt;p&gt;基础的现就不说了，直接说使用latex如何进行排版&lt;/p&gt;
&lt;h2 id=&quot;一、排版</summary>
      
    
    
    
    <category term="每日学习总结" scheme="http://example.com/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="LaTeX" scheme="http://example.com/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>R语言常用命令以及小技巧</title>
    <link href="http://example.com/2020/12/17/r-yu-yan-chang-yong-ming-ling-yi-ji-xiao-ji-qiao/"/>
    <id>http://example.com/2020/12/17/r-yu-yan-chang-yong-ming-ling-yi-ji-xiao-ji-qiao/</id>
    <published>2020-12-17T04:06:29.000Z</published>
    <updated>2021-06-27T10:39:42.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h4 id="生成数组"><a href="#生成数组" class="headerlink" title="生成数组"></a>生成数组</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = rbinom(<span class="number">20</span>, <span class="number">1</span>, <span class="number">0.25</span>) <span class="comment">#生成伯努利分布的数组</span></span><br><span class="line">&gt; [<span class="number">1</span>] <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span>:<span class="number">10</span>    <span class="comment">#生成步长为1的数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rep</span>()       <span class="comment">#重复生成某个元素</span></span><br><span class="line">x = <span class="built_in">rep</span>(<span class="number">1</span>, <span class="number">10</span>)  <span class="comment">#生成10个1</span></span><br></pre></td></tr></table></figure><h4 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apply(X, MARGIN, FUN, ...)  <span class="comment">#函数意义：对X数组进行FUN函数得到数据。</span></span><br><span class="line"><span class="comment">#X为数组，MARGIN可以为1,2，1：按照行进行FUN，2：按照列进行FUN。</span></span><br><span class="line">scale()     <span class="comment">#对数据进行展开，将二维的数据-&gt;一维数据</span></span><br></pre></td></tr></table></figure><h4 id="绘图命令"><a href="#绘图命令" class="headerlink" title="绘图命令"></a>绘图命令</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">par()       <span class="comment">#设置绘图参数，常用的有mfrow，mfcol（设置n*n），pin（设置图像大小）</span></span><br><span class="line"></span><br><span class="line">plot()      <span class="comment">#散点图,for example: plot(y~x)</span></span><br><span class="line">coplot()    <span class="comment">#不同划分下的散点图，例如coplot(Y~x1x2)</span></span><br><span class="line">hist()      <span class="comment">#直方图</span></span><br><span class="line">pie()       <span class="comment">#饼图</span></span><br><span class="line">boxplot()   <span class="comment">#箱线图</span></span><br><span class="line">dotchart()  <span class="comment">#点图</span></span><br><span class="line">pairs()     <span class="comment">#配对散点图</span></span><br><span class="line">barplot()   <span class="comment">#柱状图</span></span><br><span class="line"></span><br><span class="line">qqline()    <span class="comment">#qq线，qqline向通过探测器分位数(默认情况下是第一和第三四分位数)的“理论”(默认情况下是正常的)分位数-分位数曲线图添加一条线</span></span><br><span class="line">qqnorm()    <span class="comment">#qq图，是一种通用函数，其默认方法是生成Y中的值的正常QQ图</span></span><br></pre></td></tr></table></figure><h4 id="统计类命令"><a href="#统计类命令" class="headerlink" title="统计类命令"></a>统计类命令</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##############统计相关##########</span></span><br><span class="line"></span><br><span class="line">table()     <span class="comment">#统计数据中的频数</span></span><br><span class="line"></span><br><span class="line">cor()       <span class="comment">#相关性检验</span></span><br><span class="line">cor.test()  <span class="comment">#检查两个元素之间的相关性</span></span><br><span class="line"></span><br><span class="line">princomp()  <span class="comment">#Princomp对给定的数字数据矩阵执行主成分分析，并将结果作为princomp类的对象返回。</span></span><br><span class="line">predict(object) <span class="comment">#预测样本主成分，参数是princomp类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########回归相关命令#########</span></span><br><span class="line"></span><br><span class="line">lm()        <span class="comment">#线性回归</span></span><br><span class="line">lm(Y ~ X1 + X2,data = list1)</span><br><span class="line">glm()       <span class="comment">#logistic回归，</span></span><br><span class="line">glm.val&lt;-glm(Y~X1+X2+X3+X4+X5,data=list2)</span><br><span class="line">step()      <span class="comment">#逐步回归</span></span><br><span class="line">step(glm.val)</span><br><span class="line"></span><br><span class="line">summary(object) <span class="comment">#查看拟合方程</span></span><br><span class="line">coef(object)    <span class="comment">#查看拟合方程的参数</span></span><br></pre></td></tr></table></figure><h3 id="tips："><a href="#tips：" class="headerlink" title="tips："></a>tips：</h3><p>R语言的matrix和data.frame的区别：</p><ol><li> matrix：二维的数组，也就是里面只能储存一种类型的数据；data.frame：数据框，里面是多个一维的数据，也就是可以储存不同类型的数据。</li><li> 使用cbind()，rbind()，as.matirx()，matrix()生成的是matrix类型，而read.table()和data.frame()生成的是data.frame类型。</li><li> matrix不能使用$</li></ol><h3 id="奇淫技巧"><a href="#奇淫技巧" class="headerlink" title="奇淫技巧"></a>奇淫技巧</h3><h4 id="修改某一列的所有元素"><a href="#修改某一列的所有元素" class="headerlink" title="修改某一列的所有元素"></a>修改某一列的所有元素</h4><p>使用which对数据进行筛选，我觉得这个应该是内置了一个循环函数，对数据中所有的数据进行遍历进行修改。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1$Q101E1[which(df1$Q101E1==<span class="string">&quot;未上过学&quot;</span>)]&lt;-<span class="string">&quot;未上过小学&quot;</span></span><br></pre></td></tr></table></figure><h4 id="如何解决csv文件中有空值而不是NA"><a href="#如何解决csv文件中有空值而不是NA" class="headerlink" title="如何解决csv文件中有空值而不是NA"></a>如何解决csv文件中有空值而不是NA</h4><p>这个只能在读取的时候进行处理，在读取的地方添加 na.strings = “”，这样读取出来的数据和Q101L1行一样，在R中就会转换为NA。</p><p><img src="http://pict.lanyun1103.top/typora/20201212230854.png" alt="image-20201212230846976"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df2 = read.csv(<span class="string">&quot;2017.csv&quot;</span>,na.strings = <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="xlabel90°旋转"><a href="#xlabel90°旋转" class="headerlink" title="xlabel90°旋转"></a>xlabel90°旋转</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme(axis.text.x=element_text(angle=<span class="number">90</span>, size=<span class="number">8</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;h4 id=&quot;生成数组&quot;&gt;&lt;a href=&quot;#生成数组&quot; class=&quot;headerlink&quot; title=&quot;生成数组&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="大数据与人工智能" scheme="http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="R" scheme="http://example.com/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX希腊字母</title>
    <link href="http://example.com/2020/12/03/latex-xi-la-zi-mu/"/>
    <id>http://example.com/2020/12/03/latex-xi-la-zi-mu/</id>
    <published>2020-12-03T08:17:51.000Z</published>
    <updated>2021-06-27T10:39:42.001Z</updated>
    
    <content type="html"><![CDATA[<p>希腊字母小写、大写</p><p>LaTeX形式</p><p>希腊字母小写、大写</p><p>LaTeX形式</p><p>α α A</p><p>\alpha A</p><p>μ μ <strong>_N\_</strong></p><p>\mu N</p><p>β β B</p><p>\beta B</p><p>ξ ξ ΞΞ</p><p>\xi \Xi</p><p>γ γ ΓΓ</p><p>\gamma \Gamma</p><p>o O</p><p>o O</p><p>δ δ ΔΔ</p><p>\delta \ Delta</p><p>π π ΠΠ</p><p>\pi \Pi</p><p><em>ϵ</em> ϵ εε E</p><p>\epsilon \varepsilon E</p><p>ρ ϱ P</p><p>\rho \varrho P</p><p>ζ ζ Z</p><p>\zeta Z</p><p>σσ ΣΣ</p><p>\sigma \Sigma</p><p>_η_η H</p><p>\eta H</p><p>_τ_τ <strong><em>T</em></strong></p><p>\tau T</p><p>_θ_θ _ϑ_ϑ ΘΘ</p><p>\theta \vartheta \Theta</p><p>_υ_υ ΥΥ</p><p>\upsilon \Upsilon</p><p>_ι_ι <strong>I</strong></p><p>\iota I</p><p>_ϕ_ϕ _φ_φ ΦΦ</p><p>\phi \varphi \Phi</p><p>_κ_κ <strong>K</strong></p><p>\kappa K</p><p>_χ_χ <strong><em>X</em></strong></p><p>\chi X</p><p>_λ_λ ΛΛ</p><p>\lambda \Lambda</p><p>_ψ_ψ ΨΨ</p><p>\psi \Psi</p><p>_μ_μ <strong>_M\_</strong></p><p>\mu M</p><p>_ω_ω ΩΩ</p><p>\omega \Omega</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;希腊字母小写、大写&lt;/p&gt;
&lt;p&gt;LaTeX形式&lt;/p&gt;
&lt;p&gt;希腊字母小写、大写&lt;/p&gt;
&lt;p&gt;LaTeX形式&lt;/p&gt;
&lt;p&gt;α α A&lt;/p&gt;
&lt;p&gt;\alpha A&lt;/p&gt;
&lt;p&gt;μ μ &lt;strong&gt;_N\_&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;\mu N&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>kratos-3.2.1</title>
    <link href="http://example.com/2020/11/09/kratos-3-2-1/"/>
    <id>http://example.com/2020/11/09/kratos-3-2-1/</id>
    <published>2020-11-09T06:33:29.000Z</published>
    <updated>2021-06-27T10:39:41.724Z</updated>
    
    <content type="html"><![CDATA[<p>h1 { padding-top: 0.25em; padding-bottom: 0.25em; font-weight: normal; font-size:3em; text-align: center; } h2 { padding-top: 0.6em; padding-bottom: 0.6em; font-size:2.2em; font-weight: normal; text-align: center; } h3 { padding-top: 0.25em; padding-bottom: 0.25em; font-weight: normal; font-style: italic; font-size:1.6em; text-align: center; } h4 { padding-top: 0.25em; padding-bottom: 0.25em; font-size:1.2em; } hr { height: 2px; background-color: var(–text-color1); border: 0px; } /* list */ ul, ol { padding-left: 30px; } /* blockquote */ blockquote { border-left: 4px solid #45A9F9; padding: 4px 15px; color: hsl(220, 6%, 45%); } blockquote blockquote { padding-right: 0em; } /* table */ .md-rawblock &gt; .md-rawblock-container table, .md-table-fig, .md-table-fig:active { box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2); } table thead tr { background-color: var(–table-thead-color); } table tr th { font-weight: bold; border-left: 2px solid var(–table-border-color); border-right: 2px solid var(–table-border-color); text-align: left; margin: 0; padding: 6px 13px; } table tbody tr { border-top: 2px solid var(–table-border-color); margin: 0; padding: 0; } table tbody tr:nth-child(2n) { background-color: var(–table-bg-darker-color); } table tbody tr:nth-child(2n + 1) { background-color: var(–table-bg-color); } table tr td { border-left: 2px solid var(–table-border-color); border-right: 2px solid var(–table-border-color); text-align: left; margin: 0; padding: 6px 13px; } table tr th:first-child, table tr td:first-child { border-left-width: 0px; } table tr th:last-child, table tr td:last-child { border-right-width: 0px; } html { font-size: 16px; } body { font-family: “Open Sans”, “Clear Sans”, “Helvetica Neue”, Helvetica, Arial, sans-serif;  line-height: 1.6; }</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;h1 { padding-top: 0.25em; padding-bottom: 0.25em; font-weight: normal; font-size:3em; text-align: center; } h2 { padding-top: 0.6em; padd</summary>
      
    
    
    
    <category term="uncategorized" scheme="http://example.com/categories/uncategorized/"/>
    
    
  </entry>
  
  <entry>
    <title>Untitled Post - 19</title>
    <link href="http://example.com/2020/11/04/255/"/>
    <id>http://example.com/2020/11/04/255/</id>
    <published>2020-11-04T00:42:49.000Z</published>
    <updated>2021-06-27T10:39:41.770Z</updated>
    
    
    
    
    <category term="uncategorized" scheme="http://example.com/categories/uncategorized/"/>
    
    
  </entry>
  
</feed>
