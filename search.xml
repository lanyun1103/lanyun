<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式Cheat sheet</title>
      <link href="/2021/03/26/zheng-ze-biao-da-shi-cheat-sheet/"/>
      <url>/2021/03/26/zheng-ze-biao-da-shi-cheat-sheet/</url>
      
        <content type="html"><![CDATA[<p><img src="http://lanyun1103.top/wp-content/uploads/2021/03/re1-300x225.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中文字号、英文字号、毫米、像素对照图（一图流）</title>
      <link href="/2021/03/26/zhong-wen-zi-hao-ying-wen-zi-hao-hao-mi-xiang-su-dui-zhao-tu-yi-tu-liu/"/>
      <url>/2021/03/26/zhong-wen-zi-hao-ying-wen-zi-hao-hao-mi-xiang-su-dui-zhao-tu-yi-tu-liu/</url>
      
        <content type="html"><![CDATA[<p><img src="http://lanyun1103.top/wp-content/uploads/2021/03/9426KQ0D6C0@QD63462-300x300.png"></p>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Collection接口下类总结</title>
      <link href="/2021/03/06/java-collection-jie-kou-xia-lei-zong-jie/"/>
      <url>/2021/03/06/java-collection-jie-kou-xia-lei-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Collection接口下类总结"><a href="#Java-Collection接口下类总结" class="headerlink" title="Java Collection接口下类总结"></a>Java Collection接口下类总结</h1><h2 id="一、集合接口下的结构"><a href="#一、集合接口下的结构" class="headerlink" title="一、集合接口下的结构"></a>一、集合接口下的结构</h2><p>引用CSDN<a href="https://blog.csdn.net/javaee_gao/article/details/96372530">博客</a>的图片。蓝色——继承，绿色——实现。</p><p><img src="https://img-blog.csdnimg.cn/20190717224652123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phdmFlZV9nYW8=,size_16,color_FFFFFF,t_70"></p><p>因为对源码实在很感兴趣，所以就看了看java包中的源码，希望对结构有根深的理解。</p><h2 id="二、实现类"><a href="#二、实现类" class="headerlink" title="二、实现类"></a>二、实现类</h2><h3 id="1-Collection接口"><a href="#1-Collection接口" class="headerlink" title="1. Collection接口"></a>1. Collection接口</h3><h4 id="1-1-List"><a href="#1-1-List" class="headerlink" title="1.1 List"></a>1.1 List</h4><h5 id="1-1-1-LinkedList-※"><a href="#1-1-1-LinkedList-※" class="headerlink" title="1.1.1 LinkedList ※"></a>1.1.1 LinkedList ※</h5><p>这个类实现了List接口，继承了，创建<strong>链表</strong>数据结构。（没有同步方法，如果多线程同时访问需要自己实现同步）</p><h5 id="1-1-2-ArrayList-※"><a href="#1-1-2-ArrayList-※" class="headerlink" title="1.1.2 ArrayList ※"></a>1.1.2 ArrayList ※</h5><p>这个类实现了List接口，实现了<strong>可变大小</strong>的数组，随机访问和遍历元素时，提供更好的性能。</p><h4 id="1-2-Set"><a href="#1-2-Set" class="headerlink" title="1.2 Set"></a>1.2 Set</h4><h5 id="1-2-1-HashSet-※"><a href="#1-2-1-HashSet-※" class="headerlink" title="1.2.1 HashSet ※"></a>1.2.1 HashSet ※</h5><p>该类实现了Set接口，<strong>不允许出现重复元素</strong>，不保证集合中元素的顺序，允许包含值为null的元素，但最多只能一个。</p><h5 id="1-2-2-LinkedHashSet"><a href="#1-2-2-LinkedHashSet" class="headerlink" title="1.2.2 LinkedHashSet"></a>1.2.2 LinkedHashSet</h5><p>具有可预知迭代顺序的 <code>Set</code> 接口的哈希表和链接列表实现。</p><h5 id="1-2-3-TreeSet"><a href="#1-2-3-TreeSet" class="headerlink" title="1.2.3 TreeSet"></a>1.2.3 TreeSet</h5><p>该类实现了Set接口，可以实现排序等功能。</p><h4 id="1-3-Map"><a href="#1-3-Map" class="headerlink" title="1.3 Map"></a>1.3 Map</h4><h5 id="1-3-1-HashMap-※"><a href="#1-3-1-HashMap-※" class="headerlink" title="1.3.1 HashMap ※"></a>1.3.1 HashMap ※</h5><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。</p><p>该类实现了Map接口，继承自AbstractMap类。根据键的HashCode值存储数据，<strong>具有很快的访问速度</strong>，最多允许一条记录的键为null，不支持线程同步。</p><p>使用get(key)通过key获得value，使用put(key,value)加入新的值键对。</p><h5 id="1-3-2-TreeMap"><a href="#1-3-2-TreeMap" class="headerlink" title="1.3.2 TreeMap"></a>1.3.2 TreeMap</h5><p>只继承AbstractMap，并且使用一颗树来储存数据。</p><h5 id="1-3-3-WeakHashMap"><a href="#1-3-3-WeakHashMap" class="headerlink" title="1.3.3 WeakHashMap"></a>1.3.3 WeakHashMap</h5><p>只继承AbstractMap，使用弱密钥的哈希表。</p><h5 id="1-3-4-LinkedHashMap"><a href="#1-3-4-LinkedHashMap" class="headerlink" title="1.3.4 LinkedHashMap"></a>1.3.4 LinkedHashMap</h5><p>继承于HashMap，使用元素的自然顺序对元素进行排序.</p><h5 id="1-3-5-IdentityHashMap"><a href="#1-3-5-IdentityHashMap" class="headerlink" title="1.3.5 IdentityHashMap"></a>1.3.5 IdentityHashMap</h5><p>继承AbstractMap类，比较文档时使用引用相等。</p><h2 id="三、-java-util包中定义的部分集合类"><a href="#三、-java-util包中定义的部分集合类" class="headerlink" title="三、 java.util包中定义的部分集合类"></a>三、 java.util包中定义的部分集合类</h2><h3 id="1-Vector"><a href="#1-Vector" class="headerlink" title="1. Vector"></a>1. Vector</h3><p>这个类和C++中的vector比较类似，同时这个类与ArrayList也很类似，但是这个类<strong>是同步</strong>的。</p><h3 id="2-Stack"><a href="#2-Stack" class="headerlink" title="2. Stack"></a>2. Stack</h3><p>栈是Vector的一个子类，它实现了一个标准的后进先出的栈。</p><p>经典的方法，push加入，pop弹出</p><h3 id="3-Dictionary"><a href="#3-Dictionary" class="headerlink" title="3. Dictionary"></a>3. Dictionary</h3><p>Dictionary 类是一个抽象类，用来存储键/值对，作用和Map类相似。</p><h3 id="4-Hashtable"><a href="#4-Hashtable" class="headerlink" title="4. Hashtable"></a>4. Hashtable</h3><p>Hashtable 是 Dictionary(字典) 类的子类，位于 java.util 包中。</p><h3 id="5-Properties"><a href="#5-Properties" class="headerlink" title="5. Properties"></a>5. Properties</h3><p>Properties 继承于 Hashtable，表示一个持久的属性集，属性列表中每个键及其对应值都是一个字符串。</p><h3 id="6-BitSet"><a href="#6-BitSet" class="headerlink" title="6. BitSet"></a>6. BitSet</h3><p>一个Bitset类创建一种特殊类型的数组来保存位值。BitSet中数组大小会随需要增加。</p><h2 id="四、-使用迭代器对数据结构进行遍历："><a href="#四、-使用迭代器对数据结构进行遍历：" class="headerlink" title="四、 使用迭代器对数据结构进行遍历："></a>四、 使用迭代器对数据结构进行遍历：</h2><p>一个对象如果实现了<code>Iterator</code>接口或者<code>ListIterator</code>，可以使用迭代器进行输出。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> testtest <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用foreach迭代</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>             list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//迭代器迭代</span>        <span class="token comment">//Collection接口继承了Iterator类，也就是说任何一个实现Collection接口的类都可以使用这个函数来得到可迭代的Interator对象</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实在是懒得自己写，copy一下菜鸟教程的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//第一种：普遍使用，二次取值</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.keySet遍历key和value："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key= "</span><span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">" and value= "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//第二种</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.entrySet使用iterator遍历key和value："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> it <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key= "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and value= "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//第三种：推荐，尤其是容量大时</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.entrySet遍历key和value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key= "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and value= "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//第四种</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过Map.values()遍历所有的value，但不能遍历key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> v <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value= "</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解释一下entrySet是什么，以及为什么使用："><a href="#解释一下entrySet是什么，以及为什么使用：" class="headerlink" title="解释一下entrySet是什么，以及为什么使用："></a>解释一下entrySet是什么，以及为什么使用：</h4><p>这个方法返回一个映射关系的Set集合，为什么使用呢，因为对于一般的映射关系，不能通过<code>foreach</code>进行迭代。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">sites <span class="token class-name">HashMap</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token operator">=</span><span class="token class-name">Google</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">=</span><span class="token class-name">Runoob</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">=</span><span class="token class-name">Taobao</span><span class="token punctuation">&#125;</span><span class="token comment">//hashmap的直接映射关系</span><span class="token class-name">Set</span> <span class="token class-name">View</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">=</span><span class="token class-name">Google</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">=</span><span class="token class-name">Runoob</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">=</span><span class="token class-name">Taobao</span><span class="token punctuation">]</span><span class="token comment">//entrySet返回的Set关系</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="五、-比较器是什么"><a href="#五、-比较器是什么" class="headerlink" title="五、 比较器是什么"></a>五、 比较器是什么</h2><p>Java Comparator类中包含了一个compare方法。这个方法的用处是用来设置一个数据结构应该以怎么样的方式来对内容进行排序/分组。</p><p>一个典型的例子，一个ArrayList中储存了Person类的对象，这时候没有设置compare，java不知道这个类中哪个东西是排序的标准。（也可以引申到储存二维数据）</p><p>例：person1：age=11，id=12；一个person2：age=14，id=14。</p><p>如果想要告诉java，这个东西应该按照id升序排序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//Collections.sort(list, new Comparator&lt;Dog>())也是可以的</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> o1<span class="token punctuation">,</span> <span class="token class-name">Dog</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> o1<span class="token punctuation">.</span>id <span class="token operator">-</span> o2<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美赛小总结</title>
      <link href="/2021/02/14/mei-sai-xiao-zong-jie/"/>
      <url>/2021/02/14/mei-sai-xiao-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="美赛小总结"><a href="#美赛小总结" class="headerlink" title="美赛小总结"></a>美赛小总结</h2><p>有段时间没更新内容了，忙着准备美赛，这个月九号就结束了，到现在没开始写下一个博客，总结一下过程中的问题，和我们的解决</p><h3 id="1-协同"><a href="#1-协同" class="headerlink" title="1. 协同"></a>1. 协同</h3><p>其实在比赛之前我们想了很多，后来发现不需要进行协同，但是这里我们还是推荐几个可以协同的途径</p><ol><li> sharelatex&amp;overleaf 这两个吧服务器在国外，比较卡，只能免费两人同</li><li> wps 协同doc文件，后来再转pdf</li><li> git 这个需要有一点计算机基础使用，懂的都会</li></ol><h3 id="2-论文"><a href="#2-论文" class="headerlink" title="2. 论文"></a>2. 论文</h3><p>关于这部分我在知乎写了一些，<a href="https://www.zhihu.com/question/436884223/answer/1723586415">岚纭</a></p><h3 id="3-技能点"><a href="#3-技能点" class="headerlink" title="3. 技能点"></a>3. 技能点</h3><p>关于建模的学生需要怎么学习，应该不用我说什么 但是网上说到关于负责编程的同学应该学什么的内容很少，我在这简单说几个仅供参考</p><ol><li> matlab</li></ol><p>对于建模来说，matlab的使用是一个很实际的问题，他不像R一样，遇到一个问题查一查可能一会就看出来怎么实现，例如三维元胞自动机如何实现，网上可能会有一个例子，但是怎么改成自己的模型需要对元胞自动机和matlab同时具有较深的理解。</p><p>美赛是一个这样的竞赛，这四天内你很难去造轮子，大部分时间你都在用别人的轮子。</p><p>所以竞赛结束后，我想拥有更多的时间去创造一些不存在的轮子，供后人使用，这也算是互联网生生不息的原因。</p><ol start="2"><li> 英语</li></ol><p>英语真的很重要，负责编程的同学不可能一点文献都不看，可能也会花费很多时间把文献翻译到中文，或者到最后把自己的编程思路翻译成英文。提前多看看正宗的英语语法，和美国本地人习惯用语。</p><ol start="3"><li> Python大数据的处理</li></ol><p>大数据的课程有很多，但是如果遇到2021年D题就需要编程和算法兼通，多看多学。</p><p>算了不写了，就这样吧，反正也没人看。</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
            <tag> 建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于查阅文献的伎俩</title>
      <link href="/2021/01/30/guan-yu-cha-yue-wen-xian-de-ji-lia/"/>
      <url>/2021/01/30/guan-yu-cha-yue-wen-xian-de-ji-lia/</url>
      
        <content type="html"><![CDATA[<h1 id="关于查阅文献的伎俩"><a href="#关于查阅文献的伎俩" class="headerlink" title="关于查阅文献的伎俩"></a>关于查阅文献的伎俩</h1><blockquote><p>针对安徽工业大学学生</p></blockquote><h2 id="一、文献途径"><a href="#一、文献途径" class="headerlink" title="一、文献途径"></a>一、文献途径</h2><p>关于查阅文献，浙大的学长曾经单独说过一次，如果没有正确的准备、正确的姿势，肯定效率是非常低下的。</p><p>我先说，文献的途径，以下内容无前后</p><ul><li>搜索引擎<ul><li>  百度</li><li>  google scholar</li></ul></li><li>  网站，包括各种领域的顶会网站。</li></ul><h3 id="1-搜索引擎的使用"><a href="#1-搜索引擎的使用" class="headerlink" title="1. 搜索引擎的使用"></a>1. 搜索引擎的使用</h3><h4 id="基本技巧："><a href="#基本技巧：" class="headerlink" title="基本技巧："></a>基本技巧：</h4><p>其实大部分可以从网上搜到，我只说一下比较常用的技巧</p><ol><li>使用双引号 给要查询的关键词加上双引号（半角，以下要加的其它符号同此），可以实现精确的查询，这种方法要求查询结果要精确匹配，不包括演变形式。 例如在搜索引擎的文字框中输入“电传”，它就会返回网页中有“电传”这个关键字的网址，而不会返回诸如“电话传真”之类网页。</li><li>使用加号（+） 在关键词的前面使用加号，也就等于告诉搜索引擎该单词必须出现在搜索结果中的网页上，例如，在搜索引擎中输入“+电脑+电话+传真”就表示要查找的内容必须要同时包含“电脑、电话、传真”这三个关键词。</li><li><strong>使用元词检索</strong><ul><li>intitle:清华大学，可以查到网页标题中带有清华大学的网页。</li><li>site:搜索某个域名下，例如site:zhihu.com</li><li>link:用于检索链接到某个选定网站的页面，URL:用于检索地址中带有某个关键词的网页。</li><li>filetype:用于指定搜索结果是什么文件</li></ul></li></ol><h4 id="额外技巧："><a href="#额外技巧：" class="headerlink" title="额外技巧："></a>额外技巧：</h4><p>怎么科学上网查阅文献呢，我在这里放一个文件<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases/download/0.14.3/Clash.for.Windows.Setup.0.14.3.exe">Clash</a>，如果你想学习如何科学上网的话再联系我吧</p><h2 id="二、网站"><a href="#二、网站" class="headerlink" title="二、网站"></a>二、网站</h2><ul><li>  <a href="https://ahut.metaersp.com/">安徽工业大学电子资源全集</a>:sfz csnyr8</li><li>  <a href="https://ds.carsi.edu.cn/">全国大学生电子资源</a></li><li>  <a href="https://arxiv.org/">arxiv（论文预印本）</a></li><li>  <a href="https://fsso.cnki.net/">知网</a></li><li>  <a href="sci-hub.se">scihub</a></li><li>  <a href="https://paperswithcode.com/">paperwithcode</a></li></ul><h3 id="搜书网站"><a href="#搜书网站" class="headerlink" title="搜书网站"></a><strong>搜书网站</strong></h3><p><a href="https://www.jiumodiary.com/">https://www.jiumodiary.com/</a></p><p><a href="https://www.pan58.com/">https://www.pan58.com/</a></p><p><a href="http://www.toplinks.cc/">http://www.toplinks.cc/</a></p><p><a href="http://www.pdfzj.com/">http://www.pdfzj.com/</a></p><p><a href="https://www.pdf5.net/">https://www.pdf5.net/</a></p><h3 id="中文文献"><a href="#中文文献" class="headerlink" title="*中文文献*"></a><strong><em>*中文文献*</em></strong></h3><p>百度学术</p><p><a href="http://www.ncpssd.org/index.aspx">http://www.ncpssd.org/index.aspx</a></p><p><a href="http://www.nlc.cn/">http://www.nlc.cn/</a></p><h3 id="翻译"><a href="#翻译" class="headerlink" title="*翻译*"></a><strong><em>*翻译*</em></strong></h3><p><a href="http://dict.cnki.net/dict_result.aspx">http://dict.cnki.net/dict_result.aspx</a></p><h3 id="外文文献数据库"><a href="#外文文献数据库" class="headerlink" title="*外文文献数据库*"></a><strong><em>*外文文献数据库*</em></strong></h3><p><a href="https://www.webofknowledge.com/">https://www.webofknowledge.com</a></p><p><a href="http://www.scopus.com/">www.scopus.com</a></p><p><a href="https://www.ncbi.nlm.nih.gov/pubmed/">https://www.ncbi.nlm.nih.gov/pubmed/</a></p><p><a href="https://sci-hub.tw/">https://sci-hub.tw/</a></p><p><a href="https://www.researchgate.net/">https://www.researchgate.net/</a></p><p><a href="https://www.icpsr.umich.edu/web/pages/">https://www.icpsr.umich.edu/web/pages/</a></p><p>pubmed建议配合scholarscope使用</p><h3 id="生物学数据库"><a href="#生物学数据库" class="headerlink" title="*生物学数据库*"></a><strong><em>*生物学数据库*</em></strong></h3><p><a href="https://www.ebi.ac.uk/ena">https://www.ebi.ac.uk/ena</a></p><p><a href="https://www.ddbj.nig.ac.jp/index-e.html">https://www.ddbj.nig.ac.jp/index-e.html</a></p><p><a href="https://www.ncbi.nlm.nih.gov/genbank/">https://www.ncbi.nlm.nih.gov/genbank/</a></p><p><a href="https://www.uniprot.org/">https://www.uniprot.org/</a></p><p><a href="https://www.rcsb.org/">https://www.rcsb.org/</a></p><h3 id="国内外统计数据："><a href="#国内外统计数据：" class="headerlink" title="国内外统计数据："></a>国内外统计数据：</h3><p>1、香港中文大学的数学中英对照：<a href="http://www.cmi.hku.hk/Ref/Glossary/Mat/i.htm">http://www.cmi.hku.hk/Ref/Glossary/Mat/i.htm</a>　　 2、美国MCM的主页：<a href="http://www.comap.com/">http://www.comap.com</a>　　 3、美国普查局： <a href="http://2010.census.gov/2010census/language/chinese-simplified.php">http://2010.census.gov/2010census/language/chinese-simplified.php</a>　　 4、美国交通统计局：<a href="http://www.bts.gov/">http://www.bts.gov</a>　　 5、美国劳工统计局：<a href="http://stats.bls.gov/">http://stats.bls.gov</a>　　 6、美国国家农业统计署：<a href="http://www.usda.gov/wps/portal/usda/usdahome">http://www.usda.gov/wps/portal/usda/usdahome</a>　　 7、DOAJ: <a href="http://www.doaj.org/">http://www.doaj.org</a>　　 8、Open J-Gate: <a href="http://www.openj-gate.com/Search/QuickSearch.aspx">http://www.openj-gate.com/Search/QuickSearch.aspx</a>　　 9、Oaister: <a href="http://www.oclc.org/oaister">http://www.oclc.org/oaister</a>　　 10、arXiv: <a href="http://cn.arxiv.org/">http://cn.arxiv.org</a> 11、美国人口统计局：<a href="http://www.census.gov/">http://www.census.gov/</a>　　 12、联合国数据中心：<a href="http://www.un.org/zh/databases">http://www.un.org/zh/databases</a>　　 13、联合国农粮组织统计数据库：<a href="http://faostat3.fao.org/home/E">http://faostat3.fao.org/home/E</a>　　 14、经济调研数据：<a href="http://ideas.repec.org/">http://ideas.repec.org</a></p><h2 id="三、浏览器插件"><a href="#三、浏览器插件" class="headerlink" title="三、浏览器插件"></a>三、浏览器插件</h2><p>放一个<a href="http://lanyun1103.top/wp-content/uploads/2021/01/Sci-Hub-0.2.zip">scihub的插件</a>在这里</p><h2 id="四、如何管理文献"><a href="#四、如何管理文献" class="headerlink" title="四、如何管理文献"></a>四、如何管理文献</h2><p>建议使用zotero或者endnote，不清楚endnote能不能导出bibtex，反正zotero可以。</p><p>放一个<a href="http://lanyun1103.top/wp-content/uploads/2021/01/zoteroconnector.zip">zotero的插件</a>在这里</p><p>zotero如何使用不再赘述，放一个<a href="https://zhuanlan.zhihu.com/p/98428625">教程</a>在这里</p>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云Task2基本数据类型</title>
      <link href="/2021/01/29/a-li-yun-task2-ji-ben-shu-ju-lei-xing/"/>
      <url>/2021/01/29/a-li-yun-task2-ji-ben-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云Task2基本数据类型"><a href="#阿里云Task2基本数据类型" class="headerlink" title="阿里云Task2基本数据类型"></a>阿里云Task2基本数据类型</h1><p>还是只说一些比较难记的操作：</p><h2 id="一、-列表："><a href="#一、-列表：" class="headerlink" title="一、 列表："></a>一、 列表：</h2><h3 id="1-列表操作"><a href="#1-列表操作" class="headerlink" title="1. 列表操作"></a>1. 列表操作</h3><p><code>list.append(obj)</code> 在列表末尾添加新的对象，只接受一个参数，参数可以是任何数据类型，被追加的元素在 list 中保持着原结构类型</p><p><code>list.extend(seq)</code> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</p><p><code>list.remove(obj)</code> 移除列表中某个值的第一个匹配项</p><p><code>list.pop([index=-1])</code> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。<em>需要注意的是python可以移除某一个特定index的元素</em></p><h3 id="2-获取列表值"><a href="#2-获取列表值" class="headerlink" title="2. 获取列表值"></a>2. 获取列表值</h3><p>直接索引：</p><ul><li>  通过元素的索引值，从列表获取单个元素，注意，列表索引值是从0开始的。</li><li>  通过将索引指定为-1，可让Python返回最后一个列表元素，索引 -2 返回倒数第二个列表元素，以此类推。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Monday &lt;class 'str'></span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># ['Thursday', 'Friday'] &lt;class 'list'></span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Wednesday &lt;class 'str'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切片：</p><p>通用写法是 <code>start : stop : step</code></p><p>情况 1 - “start :”</p><ul><li>  以 <code>step</code> 为 1 (默认) 从编号 <code>start</code> 往列表尾部切片。</li></ul><p>情况 2 - “: stop”</p><ul><li>  以 <code>step</code> 为 1 (默认) 从列表头部往编号 <code>stop</code> 切片。</li></ul><p>情况 3 - “start : stop”</p><ul><li>  以 <code>step</code> 为 1 (默认) 从编号 <code>start</code> 往编号 <code>stop</code> 切片。</li></ul><p>情况 4 - “start : stop : step”</p><ul><li>  以具体的 <code>step</code> 从编号 <code>start</code> 往编号 <code>stop</code> 切片。注意最后把 <code>step</code> 设为 -1，相当于将列表反向排列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">week <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Monday'</span><span class="token punctuation">,</span> <span class="token string">'Tuesday'</span><span class="token punctuation">,</span> <span class="token string">'Wednesday'</span><span class="token punctuation">,</span> <span class="token string">'Thursday'</span><span class="token punctuation">,</span> <span class="token string">'Friday'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># ['Tuesday', 'Thursday']</span><span class="token keyword">print</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># ['Monday', 'Wednesday']</span><span class="token keyword">print</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># ['Tuesday', 'Thursday']</span><span class="token keyword">print</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># ['Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-列表操作符"><a href="#3-列表操作符" class="headerlink" title="3. 列表操作符"></a>3. 列表操作符</h3><ul><li>  等号操作符：<code>==</code></li><li>  连接操作符 <code>+</code></li><li>  重复操作符 <code>*</code></li><li>  成员关系操作符 <code>in</code>、<code>not in</code></li></ul><p>等号 ==，只有成员、成员位置都相同时才返回True。</p><p>列表拼接有两种方式，用「加号 +」和「乘号 *」，前者首尾拼接，后者复制拼接。</p><h3 id="4-列表统计方法"><a href="#4-列表统计方法" class="headerlink" title="4. 列表统计方法"></a>4. 列表统计方法</h3><p><code>list.count(obj)</code> 统计某个元素在列表中出现的次数</p><p><code>list.reverse()</code> 反向列表中元素</p><p><code>list.index(x[, start[, end]])</code> 从列表中找出某个值第一个匹配项的索引位置</p><p><code>list.sort(key=None, reverse=False)</code> 对原列表进行排序。</p><ul><li>  <code>key</code> – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li>  <code>reverse</code> – 排序规则，<code>reverse = True</code> 降序， <code>reverse = False</code> 升序（默认）。</li><li>  该方法没有返回值，但是会对列表的对象进行排序。</li></ul><h2 id="二、-元组"><a href="#二、-元组" class="headerlink" title="二、 元组"></a>二、 元组</h2><ul><li>  创建元组可以用小括号 ()，也可以什么都不用，为了可读性，建议还是用 ()。</li><li>  元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class 'int'></span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class 'tuple'></span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class 'list'></span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class 'tuple'></span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class 'tuple'></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>元组有<strong>不可更改</strong> (immutable) 的性质，因此不能直接给元组的元素赋值，但是只要元组中的元素可更改 (mutable)，那么我们可以直接更改其元素，注意这跟赋值其元素不同。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>  <span class="token comment"># (1, 2, 3, [4, 5, 6])</span>t1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span>  <span class="token comment"># (1, 2, 3, [9, 5, 6])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-内置方法"><a href="#1-内置方法" class="headerlink" title="1. 内置方法"></a>1. 内置方法</h3><p>元组大小和内容都不可更改，因此只有 <code>count</code> 和 <code>index</code> 两种方法。</p><h3 id="2-解压元组"><a href="#2-解压元组" class="headerlink" title="2. 解压元组"></a>2. 解压元组</h3><p>【例子】解压（unpack）一维元组（有几个元素左边括号定义几个变量）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10.31</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 1 10.31 python</span><span class="token number">1</span> <span class="token number">10.31</span> python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【例子】解压二维元组（按照元组里的元组结构来定义变量）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10.31</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> t<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token comment"># 1 10.31 OK python</span><span class="token number">1</span> <span class="token number">10.31</span> OK python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【例子】如果你只想要元组其中几个元素，用通配符「*」，英文叫 wildcard，在计算机语言中代表一个或多个元素。下例就是把多个元素丢给了 <code>rest</code> 变量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>rest<span class="token punctuation">,</span> c <span class="token operator">=</span> t<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>  <span class="token comment"># 1 2 5</span><span class="token keyword">print</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span>  <span class="token comment"># [3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、字符串"><a href="#三、字符串" class="headerlink" title="三、字符串"></a>三、字符串</h2><h3 id="1-字符串的切片与拼接"><a href="#1-字符串的切片与拼接" class="headerlink" title="1. 字符串的切片与拼接"></a>1. 字符串的切片与拼接</h3><ul><li>  类似于元组具有不可修改性</li><li>  从 0 开始 (和 Java 一样)</li><li>  切片通常写成 <code>start:end</code> 这种形式，包括「<code>start</code> 索引」对应的元素，不包括「<code>end</code>索引」对应的元素。</li><li>  索引值可正可负，正索引从 0 开始，从左往右；负索引从 -1 开始，从右往左。使用负数索引时，会从最后一个元素开始计数。最后一个元素的位置编号是 -1</li></ul><h3 id="2-Python-的常用转义字符"><a href="#2-Python-的常用转义字符" class="headerlink" title="2. Python 的常用转义字符"></a>2. Python 的常用转义字符</h3><p>转义字符</p><p>描述</p><p><code>\\</code></p><p>反斜杠符号</p><p><code>\&#39;</code></p><p>单引号</p><p><code>\&quot;</code></p><p>双引号</p><p><code>\n</code></p><p>换行</p><p><code>\t</code></p><p>横向制表符(TAB)</p><p><code>\r</code></p><p>回车</p><h3 id="3-字符串的常用内置方法"><a href="#3-字符串的常用内置方法" class="headerlink" title="3. 字符串的常用内置方法"></a>3. 字符串的常用内置方法</h3><ul><li><code>capitalize()</code> 将字符串的第一个字符转换为大写。</li><li><code>lower()</code> 转换字符串中所有大写字符为小写。</li><li><code>upper()</code> 转换字符串中的小写字母为大写。</li><li><code>swapcase()</code> 将字符串中大写转换为小写，小写转换为大写。</li><li><code>count(str, beg= 0,end=len(string))</code> 返回<code>str</code>在 string 里面出现的次数，如果<code>beg</code>或者<code>end</code>指定则返回指定范围内<code>str</code>出现的次数。</li><li><code>endswith(suffix, beg=0, end=len(string))</code> 检查字符串是否以指定子字符串 <code>suffix</code> 结束，如果是，返回 True，否则返回 False。如果 <code>beg</code> 和 <code>end</code> 指定值，则在指定范围内检查。</li><li><code>startswith(substr, beg=0,end=len(string))</code> 检查字符串是否以指定子字符串 <code>substr</code> 开头，如果是，返回 True，否则返回 False。如果 <code>beg</code> 和 <code>end</code> 指定值，则在指定范围内检查。</li><li><code>find(str, beg=0, end=len(string))</code> 检测 <code>str</code> 是否包含在字符串中，如果指定范围 <code>beg</code> 和 <code>end</code>，则检查是否包含在指定范围内，如果包含，返回开始的索引值，否则返回 -1。</li><li><code>rfind(str, beg=0,end=len(string))</code> 类似于 <code>find()</code> 函数，不过是从右边开始查找</li><li><code>isnumeric()</code> 如果字符串中只包含数字字符，则返回 True，否则返回 False。</li><li><code>ljust(width[, fillchar])</code>返回一个原字符串左对齐，并使用<code>fillchar</code>（默认空格）填充至长度<code>width</code>的新字符串。</li><li><code>rjust(width[, fillchar])</code>返回一个原字符串右对齐，并使用<code>fillchar</code>（默认空格）填充至长度<code>width</code>的新字符串。</li><li><code>lstrip([chars])</code> 截掉字符串左边的空格或指定字符。</li><li><code>rstrip([chars])</code> 删除字符串末尾的空格或指定字符。</li><li><code>strip([chars])</code> 在字符串上执行<code>lstrip()</code>和<code>rstrip()</code>。</li><li><code>partition(sub)</code> 找到子字符串sub，把字符串分为一个三元组<code>(pre_sub,sub,fol_sub)</code>，如果字符串中不包含sub则返回<code>(&#39;原字符串&#39;,&#39;&#39;,&#39;&#39;)</code>。</li><li><code>rpartition(sub)</code>类似于<code>partition()</code>方法，不过是从右边开始查找。</li><li><code>replace(old, new [, max])</code> 把 将字符串中的<code>old</code>替换成<code>new</code>，如果<code>max</code>指定，则替换不超过<code>max</code>次。</li><li><code>split(str=&quot;&quot;, num)</code> 不带参数默认是以空格为分隔符切片字符串，如果<code>num</code>参数有设置，则仅分隔<code>num</code>个子字符串，返回切片后的子字符串拼接的列表。</li><li><code>splitlines([keepends])</code> 按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数<code>keepends</code>为 False，不包含换行符，如果为 True，则保留换行符。</li><li><code>maketrans(intab, outtab)</code> 创建字符映射的转换表，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</li><li><code>translate(table, deletechars=&quot;&quot;)</code> 根据参数<code>table</code>给出的表，转换字符串的字符，要过滤掉的字符放到<code>deletechars</code>参数中。</li></ul><h3 id="4-字符串格式化"><a href="#4-字符串格式化" class="headerlink" title="4. 字符串格式化"></a>4. 字符串格式化</h3><ul><li>  <code>format</code> 格式化函数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">str8 <span class="token operator">=</span> <span class="token string">"&#123;0&#125; Love &#123;1&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'Lsgogroup'</span><span class="token punctuation">)</span>  <span class="token comment"># 位置参数</span><span class="token keyword">print</span><span class="token punctuation">(</span>str8<span class="token punctuation">)</span>  <span class="token comment"># I Love Lsgogroup</span>str8 <span class="token operator">=</span> <span class="token string">"&#123;a&#125; Love &#123;b&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token string">'I'</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token string">'Lsgogroup'</span><span class="token punctuation">)</span>  <span class="token comment"># 关键字参数</span><span class="token keyword">print</span><span class="token punctuation">(</span>str8<span class="token punctuation">)</span>  <span class="token comment"># I Love Lsgogroup</span>str8 <span class="token operator">=</span> <span class="token string">"&#123;0&#125; Love &#123;b&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token string">'Lsgogroup'</span><span class="token punctuation">)</span>  <span class="token comment"># 位置参数要在关键字参数之前</span><span class="token keyword">print</span><span class="token punctuation">(</span>str8<span class="token punctuation">)</span>  <span class="token comment"># I Love Lsgogroup</span>str8 <span class="token operator">=</span> <span class="token string">'&#123;0:.2f&#125;&#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">27.658</span><span class="token punctuation">,</span> <span class="token string">'GB'</span><span class="token punctuation">)</span>  <span class="token comment"># 保留小数点后两位</span><span class="token keyword">print</span><span class="token punctuation">(</span>str8<span class="token punctuation">)</span>  <span class="token comment"># 27.66GB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  Python 字符串格式化符号</li></ul><p>符 号</p><p>描述</p><p>%c</p><p>格式化字符及其ASCII码</p><p>%s</p><p>格式化字符串，用str()方法处理对象</p><p>%r</p><p>格式化字符串，用rper()方法处理对象</p><p>%d</p><p>格式化整数</p><p>%o</p><p>格式化无符号八进制数</p><p>%x</p><p>格式化无符号十六进制数</p><p>%X</p><p>格式化无符号十六进制数（大写）</p><p>%f</p><p>格式化浮点数字，可指定小数点后的精度</p><p>%e</p><p>用科学计数法格式化浮点数</p><p>%E</p><p>作用同%e，用科学计数法格式化浮点数</p><p>%g</p><p>根据值的大小决定使用%f或%e</p><p>%G</p><p>作用同%g，根据值的大小决定使用%f或%E</p><ul><li>  格式化操作符辅助指令</li></ul><p>符号</p><p>功能</p><p><code>m.n</code></p><p>m 是显示的最小总宽度,n 是小数点后的位数（如果可用的话）</p><p><code>-</code></p><p>用作左对齐</p><p><code>+</code></p><p>在正数前面显示加号( + )</p><p><code>#</code></p><p>在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</p><p><code>0</code></p><p>显示的数字前面填充’0’而不是默认的空格</p><h2 id="四、字典"><a href="#四、字典" class="headerlink" title="四、字典"></a>四、字典</h2><h3 id="可变类型与不可变类型"><a href="#可变类型与不可变类型" class="headerlink" title="可变类型与不可变类型"></a>可变类型与不可变类型</h3><ul><li>  序列是以连续的整数为索引，与此不同的是，字典以”关键字”为索引，关键字可以是任意不可变类型，通常用字符串或数值。</li><li>  字典是 Python 唯一的一个 <strong>映射类型</strong>，字符串、元组、列表属于序列类型。</li></ul><p>那么如何快速判断一个数据类型 <code>X</code> 是不是可变类型的呢？两种方法：</p><ul><li>  麻烦方法：用 <code>id(X)</code> 函数，对 X 进行某种操作，比较操作前后的 <code>id</code>，如果不一样，则 <code>X</code> 不可变，如果一样，则 <code>X</code> 可变。</li><li>  便捷方法：用 <code>hash(X)</code>，只要不报错，证明 <code>X</code> <strong>可被哈希，即不可变</strong>，反过来不<strong>可被哈希，即可变</strong>。</li></ul><h3 id="2-内置方法"><a href="#2-内置方法" class="headerlink" title="2. 内置方法"></a>2. 内置方法</h3><ul><li><code>dict.fromkeys(seq[, value])</code> 用于创建一个新字典，以序列 <code>seq</code> 中元素做字典的键，<code>value</code> 为字典所有键对应的初始值。</li><li><code>dict.keys()</code>返回一个可迭代对象，可以使用 <code>list()</code> 来转换为列表，列表为字典中的所有键。</li><li><code>dict.values()</code>返回一个迭代器，可以使用 <code>list()</code> 来转换为列表，列表为字典中的所有值。</li><li><code>dict.items()</code>以列表返回可遍历的 (键, 值) 元组数组。</li><li><code>dict.get(key, default=None)</code> 返回指定键的值，如果值不在字典中返回默认值。</li><li><code>dict.setdefault(key, default=None)</code>和<code>get()</code>方法 类似, 如果键不存在于字典中，将会添加键并将值设为默认值。</li><li><code>key in dict</code> <code>in</code> 操作符用于判断键是否存在于字典中，如果键在字典 dict 里返回<code>true</code>，否则返回<code>false</code>。而<code>not in</code>操作符刚好相反，如果键在字典 dict 里返回<code>false</code>，否则返回<code>true</code>。</li><li><code>dict.pop(key[,default])</code>删除字典给定键 <code>key</code> 所对应的值，返回值为被删除的值。<code>key</code> 值必须给出。若<code>key</code>不存在，则返回 <code>default</code> 值。</li><li><code>del dict[key]</code> 删除字典给定键 <code>key</code> 所对应的值</li><li><code>dict.popitem()</code>随机返回并删除字典中的一对键和值，如果字典已经为空，却调用了此方法，就报出KeyError异常</li><li><code>dict.clear()</code>用于删除字典内所有元素。</li><li><code>dict.copy()</code>返回一个字典的浅复制。</li></ul><p>【例子】直接赋值和 copy 的区别</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dic1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'lsgogroup'</span><span class="token punctuation">,</span> <span class="token string">'num'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment"># 引用对象</span>dic2 <span class="token operator">=</span> dic1  <span class="token comment"># 浅拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</span>dic3 <span class="token operator">=</span> dic1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>dic1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 148635574728</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>dic2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 148635574728</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>dic3<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 148635574344</span><span class="token comment"># 修改 data 数据</span>dic1<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'root'</span>dic1<span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 输出结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic1<span class="token punctuation">)</span>  <span class="token comment"># &#123;'user': 'root', 'num': [2, 3]&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic2<span class="token punctuation">)</span>  <span class="token comment"># &#123;'user': 'root', 'num': [2, 3]&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic3<span class="token punctuation">)</span>  <span class="token comment"># &#123;'user': 'runoob', 'num': [2, 3]&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  <code>dict.update(dict2)</code>把字典参数 <code>dict2</code> 的 <code>key:value</code>对 更新到字典 <code>dict</code> 里。</li></ul><h2 id="五、集合"><a href="#五、集合" class="headerlink" title="五、集合"></a>五、集合</h2><p>Python 中<code>set</code>与<code>dict</code>类似，也是一组<code>key</code>的集合，但不存储<code>value</code>。由于<code>key</code>不能重复，所以，在<code>set</code>中，没有重复的<code>key</code>。</p><p>注意，<code>key</code>为不可变类型，即可哈希的值。</p><h3 id="1-创建方法："><a href="#1-创建方法：" class="headerlink" title="1. 创建方法："></a>1. 创建方法：</h3><ul><li>  先创建对象再加入元素。</li><li>  在创建空集合的时候只能使用<code>s = set()</code></li></ul><h3 id="2-集合的特点"><a href="#2-集合的特点" class="headerlink" title="2. 集合的特点"></a>2. 集合的特点</h3><ul><li>集合的两个特点：无序 (unordered) 和唯一 (unique)。</li><li>可以通过<code>in</code>或<code>not in</code>判断一个元素是否在集合中已经存在</li></ul><h3 id="3-内置方法"><a href="#3-内置方法" class="headerlink" title="3. 内置方法"></a>3. 内置方法</h3><ul><li><code>set.add(elmnt)</code>用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作。</li><li><code>set.update(set)</code>用于修改当前集合，可以添加新的元素或集合到当前集合中，如果添加的元素在集合中已存在，则该元素只会出现一次，重复的会忽略。</li><li><code>set.remove(item)</code> 用于移除集合中的指定元素。如果元素不存在，则会发生错误。</li><li><code>set.discard(value)</code> 用于移除指定的集合元素。<code>remove()</code> 方法在移除一个不存在的元素时会发生错误，而 <code>discard()</code> 方法不会。</li><li><code>set.pop()</code> 用于随机移除一个元素。</li><li><code>set.intersection(set1, set2)</code> 返回两个集合的交集。</li><li><code>set1 &amp; set2</code> 返回两个集合的交集。</li><li><code>set.intersection_update(set1, set2)</code> 交集，在原始的集合上移除不重叠的元素。</li><li><code>set.union(set1, set2)</code> 返回两个集合的并集。</li><li><code>set1 set2</code> 返回两个集合的并集。</li><li><code>set.difference(set)</code> 返回集合的差集。</li><li><code>set1 - set2</code> 返回集合的差集。</li><li><code>set.difference_update(set)</code> 集合的差集，直接在原来的集合中移除元素，没有返回值。</li><li><code>set.symmetric_difference(set)</code>返回集合的异或。</li><li><code>set1 ^ set2</code> 返回集合的异或。</li><li><code>set.symmetric_difference_update(set)</code>移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</li><li><code>set.issubset(set)</code>判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。</li><li><code>set1 &lt;= set2</code> 判断集合是不是被其他集合包含，如果是则返回 True，否则返回 False。</li><li><code>set.issuperset(set)</code>用于判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。</li><li><code>set1 &gt;= set2</code> 判断集合是不是包含其他集合，如果是则返回 True，否则返回 False。</li><li><code>set.isdisjoint(set)</code> 用于判断两个集合是不是不相交，如果是返回 True，否则返回 False。</li></ul><h3 id="4-不可变集合"><a href="#4-不可变集合" class="headerlink" title="4. 不可变集合"></a>4. 不可变集合</h3><ul><li>  <code>frozenset([iterable])</code> 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</li></ul><h2 id="六、序列"><a href="#六、序列" class="headerlink" title="六、序列"></a>六、序列</h2><p>在 Python 中，序列类型包括<strong>字符串、列表、元组、集合和字典</strong>，这些序列支持一些通用的操作，但比较特殊的是，<strong>集合和字典不支持</strong>索引、切片、相加和相乘操作。</p><h3 id="序列可用的方法"><a href="#序列可用的方法" class="headerlink" title="序列可用的方法"></a>序列可用的方法</h3><p><code>list(sub)</code> 把一个可迭代对象转换为列表</p><p><code>tuple(sub)</code> 把一个可迭代对象转换为元组</p><p><code>str(obj)</code> 把obj对象转换为字符串</p><p><code>len(s)</code> 返回对象（字符、列表、元组等）长度或元素个数</p><p><code>max(sub)</code>返回序列或者参数集合中的最大值</p><p><code>min(sub)</code>返回序列或参数集合中的最小值</p><p><code>sum(iterable[, start=0])</code> 返回序列<code>iterable</code>与可选参数<code>start</code>的总和</p><p><code>sorted(iterable, key=None, reverse=False)</code> 对所有可迭代的对象进行排序操作。</p><ul><li>  <code>iterable</code> – 可迭代对象。</li><li>  <code>key</code> – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li>  <code>reverse</code> – 排序规则，<code>reverse = True</code> 降序 ， <code>reverse = False</code> 升序（默认）。</li><li>  返回重新排序的列表。</li></ul><p><code>reversed(seq)</code> 函数返回一个反转的迭代器。</p><ul><li>  <code>seq</code> – 要转换的序列，可以是 tuple, string, list 或 range。</li></ul><p><code>enumerate(sequence, [start=0])</code></p><p><code>zip(iter1 [,iter2 [...]])</code></p><ul><li>  用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。</li><li>  我们可以使用 <code>list()</code> 转换来输出列表。</li><li>  如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 <code>*</code> 号操作符，可以将元组解压为列表。</li></ul>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云打卡Task1中对非新人比较难记住的点</title>
      <link href="/2021/01/29/a-li-yun-da-qia-task1-zhong-dui-fei-xin-ren-bi-jiao-nan-ji-zhu-de-dian/"/>
      <url>/2021/01/29/a-li-yun-da-qia-task1-zhong-dui-fei-xin-ren-bi-jiao-nan-ji-zhu-de-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云打卡"><a href="#阿里云打卡" class="headerlink" title="阿里云打卡"></a>阿里云打卡</h1><h2 id="Task1中对于非初学者可能比较难以记住的点："><a href="#Task1中对于非初学者可能比较难以记住的点：" class="headerlink" title="Task1中对于非初学者可能比较难以记住的点："></a>Task1中对于非初学者可能比较难以记住的点：</h2><h3 id="1-位运算符："><a href="#1-位运算符：" class="headerlink" title="1. 位运算符："></a>1. 位运算符：</h3><p>操作符</p><p>名称</p><p>示例</p><p><code>~</code></p><p>按位取反</p><p><code>~4</code></p><p><code>&amp;</code></p><p>按位与</p><p><code>4 &amp; 5</code></p><p>按位或</p><p><code>4 5</code></p><p><code>^</code></p><p>按位异或</p><p><code>4 ^ 5</code></p><p><code>&lt;&lt;</code></p><p>左移</p><p><code>4 &lt;&lt; 2</code></p><p><code>&gt;&gt;</code></p><p>右移</p><p><code>4 &gt;&gt; 2</code></p><h3 id="2-三元运算符："><a href="#2-三元运算符：" class="headerlink" title="2. 三元运算符："></a>2. 三元运算符：</h3><p>一个简单的例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token keyword">if</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">:</span>    small <span class="token operator">=</span> x<span class="token keyword">else</span><span class="token punctuation">:</span>    small <span class="token operator">=</span> y<span class="token keyword">print</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span>  <span class="token comment"># 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是最基本的处理方式，python的三元运算符和java的差不多，以下为两个对比</p><p>python:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>small <span class="token operator">=</span> x <span class="token keyword">if</span> x <span class="token operator">&lt;</span> y <span class="token keyword">else</span> y<span class="token keyword">print</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JAVA：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> small <span class="token operator">=</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-其他运算符"><a href="#3-其他运算符" class="headerlink" title="3. 其他运算符"></a>3. 其他运算符</h3><p>操作符</p><p>名称</p><p>示例</p><p><code>in</code></p><p>存在</p><p><code>&#39;A&#39; in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code></p><p><code>not in</code></p><p>不存在</p><p><code>&#39;h&#39; not in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code></p><p><code>is</code></p><p>是</p><p><code>&quot;hello&quot; is &quot;hello&quot;</code></p><p><code>not is</code></p><p>不是</p><p><code>&quot;hello&quot; is not &quot;hello&quot;</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">,</span> a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment"># False True</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> <span class="token keyword">not</span> b<span class="token punctuation">,</span> a <span class="token operator">!=</span> b<span class="token punctuation">)</span>  <span class="token comment"># True False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意事项：</p><ul><li>  is, is not 对比的是两个变量的内存地址</li><li>  ==, != 对比的是两个变量的值</li><li>  比较的两个变量，指向的都是地址不可变的类型（str等），那么is，is not 和 ==，！= 是完全等价的。</li><li>  对比的两个变量，指向的是地址可变的类型（list，dict，tuple等），则两者是有区别的。</li></ul><h3 id="4-运算符的优先级"><a href="#4-运算符的优先级" class="headerlink" title="4. 运算符的优先级"></a>4. 运算符的优先级</h3><p>运算符</p><p>描述</p><p>**</p><p>指数（最高优先级）</p><p>~+-</p><p>按位翻转，一元加号和减号</p><p>* / % //</p><p>乘，除，取模和取整除）</p><p>+ -</p><p>加法减法</p><p>&gt;&gt; &lt;&lt;</p><p>右移，左移运算符</p><p>&amp;</p><p>位‘AND’</p><p>^</p><p>位运算符</p><p>&lt;=&lt;&gt;&gt;=</p><p>比较运算符</p><p>&lt;&gt;==!=</p><p>等于运算符</p><p>=%=/=//=-=+=*=**=</p><p>赋值运算符</p><p>is is not</p><p>身份运算符</p><p>in not in</p><p>成员运算符</p><p>not and or</p><p>逻辑运算符</p><h3 id="5-保留小数点后几位"><a href="#5-保留小数点后几位" class="headerlink" title="5. 保留小数点后几位"></a>5. 保留小数点后几位</h3><p>如果想要保留小数点后n位，这个时候double可能没有这种功能，就可以使用Decimal包下的Decimal对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> Decimal<span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimala <span class="token operator">=</span> decimal<span class="token punctuation">.</span>getcontext<span class="token punctuation">(</span><span class="token punctuation">)</span>b <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> Decimal<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment"># 0.3333333333333333333333333333</span><span class="token comment">#设置保留几位小数</span>decimal<span class="token punctuation">.</span>getcontext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prec <span class="token operator">=</span> <span class="token number">4</span>c <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> Decimal<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment"># 0.3333</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-布尔运算的小细节："><a href="#6-布尔运算的小细节：" class="headerlink" title="6. 布尔运算的小细节："></a>6. 布尔运算的小细节：</h3><p>布尔 (boolean) 型变量只能取两个值，<code>True</code> 和 <code>False</code>。当把布尔型变量用在数字运算中，用 <code>1</code> 和 <code>0</code> 代表 <code>True</code> 和 <code>False</code>。</p><p><code>bool</code> 作用在基本类型变量：<code>X</code> 只要不是整型 <code>0</code>、浮点型 <code>0.0</code>，<code>bool(X)</code> 就是 <code>True</code>，其余就是 <code>False</code>。</p><p><code>bool</code> 作用在容器类型变量：<code>X</code> 只要不是空的变量，<code>bool(X)</code> 就是 <code>True</code>，其余就是 <code>False</code>。</p><p>_是否为空的标准_：</p><ul><li>  对于数值变量，<code>0</code>, <code>0.0</code> 都可认为是空的。</li><li>  对于容器变量，里面没元素就是空的</li></ul><h3 id="7-print-函数的参数讲解"><a href="#7-print-函数的参数讲解" class="headerlink" title="7. print()函数的参数讲解"></a>7. print()函数的参数讲解</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>objects<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>  关键字参数<code>sep</code>是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；</li><li>  关键字参数<code>end</code>是输出结束时的字符，默认是换行符<code>\n</code>；</li><li>  关键字参数<code>file</code>是定义流输出的文件，可以是标准的系统输出<code>sys.stdout</code>，也可以重定义为别的文件；</li><li>  关键字参数<code>flush</code>是立即把内容输出到流文件，不作缓存。</li></ul><h3 id="8-位运算"><a href="#8-位运算" class="headerlink" title="8. 位运算"></a>8. <strong>位运算</strong></h3><p>二进制有三种不同的表示形式：原码、反码和补码，计算机内部使用补码来表示。</p><p><strong>原码</strong>：就是其二进制表示（注意，有一位符号位）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span><span class="token number">10</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>反码</strong>：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span><span class="token number">11</span> <span class="token number">11</span> <span class="token number">11</span> <span class="token number">00</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>补码</strong>：正数的补码就是原码，负数的补码是反码+1。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span><span class="token number">11</span> <span class="token number">11</span> <span class="token number">11</span> <span class="token number">01</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>符号位</strong>：最高位为符号位，0表示正数，1表示负数。在位运算中符号位也参与运算。</p><ul><li>  按位非操作 <code>~</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">~</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">~</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>把<code>num</code>的补码中的 0 和 1 全部取反（0 变为 1，1 变为 0）有符号整数的符号位在 <code>~</code> 运算中同样会取反。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">01</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span><span class="token operator">~</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">11</span> <span class="token number">10</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">6</span><span class="token number">11</span> <span class="token number">11</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">5</span><span class="token operator">~</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  按位与操作 &amp;</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token number">0</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token number">0</span> <span class="token operator">&amp;</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只有两个对应位都为 1 时才为 1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">01</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span><span class="token operator">&amp;</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">6</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  按位或操作</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span>  <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">1</span>  <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">0</span>  <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">0</span>  <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只要两个对应位中有一个 1 时就为 1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">01</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">6</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  按位异或操作 ^</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span> <span class="token operator">^</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token number">1</span> <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">0</span> <span class="token operator">^</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token number">0</span> <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只有两个对应位不同时才为 1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">01</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span><span class="token operator">^</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">6</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>异或操作的性质：满足交换律和结合律</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A<span class="token punctuation">:</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token number">00</span>B<span class="token punctuation">:</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">11</span>A<span class="token operator">^</span>B<span class="token punctuation">:</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token number">11</span>B<span class="token operator">^</span>A<span class="token punctuation">:</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token number">11</span>A<span class="token operator">^</span>A<span class="token punctuation">:</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>A<span class="token operator">^</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token number">00</span>A<span class="token operator">^</span>B<span class="token operator">^</span>A<span class="token punctuation">:</span> <span class="token operator">=</span> A<span class="token operator">^</span>A<span class="token operator">^</span>B <span class="token operator">=</span> B <span class="token operator">=</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  按位左移操作 &lt;&lt;</li></ul><p><code>num &lt;&lt; i</code> 将<code>num</code>的二进制表示向左移动<code>i</code>位所得的值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">11</span><span class="token number">11</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">01</span> <span class="token number">10</span> <span class="token number">00</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">88</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  按位右移操作 &gt;&gt;</li></ul><p><code>num &gt;&gt; i</code> 将<code>num</code>的二进制表示向右移动<code>i</code>位所得的值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">11</span><span class="token number">11</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="利用位运算进行快捷数字操作："><a href="#利用位运算进行快捷数字操作：" class="headerlink" title="利用位运算进行快捷数字操作："></a>利用位运算进行快捷数字操作：</h4><p>通过 <code>&lt;&lt;</code>，<code>&gt;&gt;</code> 快速计算2的倍数问题。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">></span> 计算 n<span class="token operator">*</span><span class="token number">2</span>n <span class="token operator">>></span> <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">></span> 计算 n<span class="token operator">/</span><span class="token number">2</span>，负奇数的运算不可用n <span class="token operator">&lt;&lt;</span> m <span class="token operator">-</span><span class="token operator">></span> 计算 n<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>m<span class="token punctuation">)</span>，即乘以 <span class="token number">2</span> 的 m 次方n <span class="token operator">>></span> m <span class="token operator">-</span><span class="token operator">></span> 计算 n<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>m<span class="token punctuation">)</span>，即除以 <span class="token number">2</span> 的 m 次方<span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">^</span>n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>^</code> 快速交换两个整数。 通过 <code>^</code> 快速交换两个整数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">^</span><span class="token operator">=</span> bb <span class="token operator">^</span><span class="token operator">=</span> aa <span class="token operator">^</span><span class="token operator">=</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过 <code>a &amp; (-a)</code> 快速获取<code>a</code>的最后为 1 位置的整数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">01</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span><span class="token operator">&amp;</span><span class="token number">11</span> <span class="token number">11</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">14</span><span class="token operator">&amp;</span><span class="token number">11</span> <span class="token number">11</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">14</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">10</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="利用位运算实现整数集合："><a href="#利用位运算实现整数集合：" class="headerlink" title="利用位运算实现整数集合："></a>利用位运算实现整数集合：</h4><p>一个数的二进制表示可以看作是一个集合（0 表示不在集合中，1 表示在集合中）。</p><p>比如集合 <code>&#123;1, 3, 4, 8&#125;</code>，可以表示成 <code>01 00 01 10 10</code> 而对应的位运算也就可以看作是对集合进行的操作。</p><blockquote><p>一开始我是没看懂的，其实也就是从左往右看，最左边的0-&gt;代表0不在集合，从左往右数第二个1-&gt;代表1在集合，以此可以得到结果</p></blockquote><p>元素与集合的操作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a  <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">></span> 把 i 插入到集合中a <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> 把 i 从集合中删除a <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">></span> 判断 i 是否属于该集合（零不属于，非零属于）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>集合之间的操作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a 补   <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">~</span>aa 交 b <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">&amp;</span> ba 并 b <span class="token operator">-</span><span class="token operator">></span> a  ba 差 b <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：整数在内存中是以补码的形式存在的，输出自然也是按照补码输出。</p><p>注意：</p><ul><li>  Python中<code>bin</code>一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号，巨坑。</li><li>  Python中的整型是补码形式存储的。</li><li>  Python中整型是不限制长度的不会超范围溢出。</li></ul><h3 id="9-特殊的for-else循环"><a href="#9-特殊的for-else循环" class="headerlink" title="9. 特殊的for-else循环"></a>9. 特殊的for-else循环</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 迭代变量 <span class="token keyword">in</span> 可迭代对象<span class="token punctuation">:</span>    代码块<span class="token keyword">else</span><span class="token punctuation">:</span>    代码块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当<code>for</code>循环正常执行完的情况下，执行<code>else</code>输出，如果<code>for</code>循环中执行了跳出循环的语句，比如 <code>break</code>，将不执行<code>else</code>代码块的内容，与<code>while - else</code>语句一样。</p><h3 id="10-enumerate-函数"><a href="#10-enumerate-函数" class="headerlink" title="10. enumerate()函数"></a>10. enumerate()函数</h3><p>枚举函数的作用： 用来返回一个枚举对象，包含了一个数据集合中的数据，<strong>并且给这个元素一个索引值</strong>。</p><h3 id="11-推导式"><a href="#11-推导式" class="headerlink" title="11. 推导式"></a>11. 推导式</h3><p><strong>列表推导式</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span> expr <span class="token keyword">for</span> value <span class="token keyword">in</span> collection <span class="token punctuation">[</span><span class="token keyword">if</span> condition<span class="token punctuation">]</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-异常处理"><a href="#12-异常处理" class="headerlink" title="12. 异常处理"></a>12. 异常处理</h3><h4 id="1-Python-标准异常总结："><a href="#1-Python-标准异常总结：" class="headerlink" title="1). Python 标准异常总结："></a>1). Python 标准异常总结：</h4><ul><li>  BaseException：所有异常的 <strong>基类</strong></li><li>  Exception：常规异常的 <strong>基类</strong></li><li>  StandardError：所有的内建标准异常的基类</li><li>  ArithmeticError：所有数值计算异常的基类</li><li>  FloatingPointError：浮点计算异常</li><li>  OverflowError：数值运算超出最大限制</li><li>  ZeroDivisionError：除数为零</li><li>  AssertionError：断言语句（assert）失败</li><li>  AttributeError：尝试访问未知的对象属性</li><li>  EOFError：没有内建输入，到达EOF标记</li><li>  EnvironmentError：操作系统异常的基类</li><li>  IOError：输入/输出操作失败</li><li>  OSError：操作系统产生的异常（例如打开一个不存在的文件）</li><li>  WindowsError：系统调用失败</li><li>  ImportError：导入模块失败的时候</li><li>  KeyboardInterrupt：用户中断执行</li><li>  LookupError：无效数据查询的基类</li><li>  IndexError：索引超出序列的范围</li><li>  KeyError：字典中查找一个不存在的关键字</li><li>  MemoryError：内存溢出（可通过删除对象释放内存）</li><li>  NameError：尝试访问一个不存在的变量</li><li>  UnboundLocalError：访问未初始化的本地变量</li><li>  ReferenceError：弱引用试图访问已经垃圾回收了的对象</li><li>  RuntimeError：一般的运行时异常</li><li>  NotImplementedError：尚未实现的方法</li><li>  SyntaxError：语法错误导致的异常</li><li>  IndentationError：缩进错误导致的异常</li><li>  TabError：Tab和空格混用</li><li>  SystemError：一般的解释器系统异常</li><li>  TypeError：不同类型间的无效操作</li><li>  ValueError：传入无效的参数</li><li>  UnicodeError：Unicode相关的异常</li><li>  UnicodeDecodeError：Unicode解码时的异常</li><li>  UnicodeEncodeError：Unicode编码错误导致的异常</li><li>  UnicodeTranslateError：Unicode转换错误导致的异常</li></ul><p><img src="https://img-blog.csdnimg.cn/20200710131404548.png"></p><h4 id="2-Python标准警告总结"><a href="#2-Python标准警告总结" class="headerlink" title="2). Python标准警告总结"></a>2). Python标准警告总结</h4><ul><li>  Warning：警告的基类</li><li>  DeprecationWarning：关于被弃用的特征的警告</li><li>  FutureWarning：关于构造将来语义会有改变的警告</li><li>  UserWarning：用户代码生成的警告</li><li>  PendingDeprecationWarning：关于特性将会被废弃的警告</li><li>  RuntimeWarning：可疑的运行时行为(runtime behavior)的警告</li><li>  SyntaxWarning：可疑语法的警告</li><li>  ImportWarning：用于在导入模块过程中触发的警告</li><li>  UnicodeWarning：与Unicode相关的警告</li><li>  BytesWarning：与字节或字节码相关的警告</li><li>  ResourceWarning：与资源使用相关的警告</li></ul><h4 id="3-处理语句"><a href="#3-处理语句" class="headerlink" title="3). 处理语句"></a>3). 处理语句</h4><ul><li>  try - except 语句</li><li>  try - except - finally</li><li>  try - except - else</li><li>  raise语句</li></ul><p>每个语句举几个例子：</p><h5 id="try-except"><a href="#try-except" class="headerlink" title="try-except:"></a>try-except:</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    检测范围<span class="token keyword">except</span> Exception<span class="token punctuation">[</span><span class="token keyword">as</span> reason<span class="token punctuation">]</span><span class="token punctuation">:</span>    出现异常后的处理代码<span class="token comment">###################</span><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> OSError <span class="token keyword">as</span> error<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'打开文件出错\n原因是：'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 打开文件出错</span><span class="token comment"># 原因是：[Errno 2] No such file or directory: 'test.txt'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'1'</span>    <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> <span class="token punctuation">(</span>OSError<span class="token punctuation">,</span> TypeError<span class="token punctuation">,</span> ValueError<span class="token punctuation">)</span> <span class="token keyword">as</span> error<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'出错了！\n原因是：'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 出错了！</span><span class="token comment"># 原因是：unsupported operand type(s) for +: 'int' and 'str'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="try-except-finally"><a href="#try-except-finally" class="headerlink" title="try-except-finally:"></a>try-except-finally:</h5><p>监测范围范围 except Exception[as reason]: 出现异常后的处理代码 finally: 无论如何都会被执行的代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> x <span class="token operator">/</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"result is"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"division by zero!"</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"executing finally clause"</span><span class="token punctuation">)</span>divide<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># result is 2.0</span><span class="token comment"># executing finally clause</span>divide<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># division by zero!</span><span class="token comment"># executing finally clause</span>divide<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token comment"># executing finally clause</span><span class="token comment"># TypeError: unsupported operand type(s) for /: 'str' and 'str'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="try-except-else"><a href="#try-except-else" class="headerlink" title="try-except-else:"></a>try-except-else:</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    检测范围<span class="token keyword">except</span><span class="token punctuation">:</span>    出现异常后的处理代码<span class="token keyword">else</span><span class="token punctuation">:</span>    如果没有异常执行这块代码<span class="token comment">###################</span><span class="token keyword">try</span><span class="token punctuation">:</span>    fh <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"testfile.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>    fh<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"这是一个测试文件，用于测试异常!!"</span><span class="token punctuation">)</span><span class="token keyword">except</span> IOError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error: 没有找到文件或读取文件失败"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"内容写入文件成功"</span><span class="token punctuation">)</span>    fh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 内容写入文件成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="raise"><a href="#raise" class="headerlink" title="raise:"></a>raise:</h5><p>Python 使用<code>raise</code>语句抛出一个指定的异常。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> NameError<span class="token punctuation">(</span><span class="token string">'HiThere'</span><span class="token punctuation">)</span><span class="token keyword">except</span> NameError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'An exception flew by!'</span><span class="token punctuation">)</span><span class="token comment"># An exception flew by!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个Manim的bug-UserWarning: g0-87 not recognized</title>
      <link href="/2021/01/22/yi-ge-manim-de-bug-userwarning-g0-87-not-recognized/"/>
      <url>/2021/01/22/yi-ge-manim-de-bug-userwarning-g0-87-not-recognized/</url>
      
        <content type="html"><![CDATA[<h1 id="一个Manim的bug"><a href="#一个Manim的bug" class="headerlink" title="一个Manim的bug"></a>一个Manim的bug</h1><h3 id="一、报错代码："><a href="#一、报错代码：" class="headerlink" title="一、报错代码："></a>一、报错代码：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span>Scene<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">construct</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        my_first_text <span class="token operator">=</span> TextMobject<span class="token punctuation">(</span><span class="token string">"Writing with manim is fun"</span><span class="token punctuation">)</span>        second_line <span class="token operator">=</span> TextMobject<span class="token punctuation">(</span><span class="token string">"and easy to do!"</span><span class="token punctuation">)</span>        second_line<span class="token punctuation">.</span>next_to<span class="token punctuation">(</span>my_first_text<span class="token punctuation">,</span> DOWN<span class="token punctuation">)</span>        third_line <span class="token operator">=</span> TextMobject<span class="token punctuation">(</span><span class="token string">"for me and you!"</span><span class="token punctuation">)</span>        third_line<span class="token punctuation">.</span>next_to<span class="token punctuation">(</span>my_first_text<span class="token punctuation">,</span> DOWN<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>my_first_text<span class="token punctuation">,</span> second_line<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>Transform<span class="token punctuation">(</span>second_line<span class="token punctuation">,</span> third_line<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        second_line<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> DOWN<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>ApplyMethod<span class="token punctuation">(</span>my_first_text<span class="token punctuation">.</span>shift<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> UP<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">###Try uncommenting the following###</span>        <span class="token comment"># self.play(ApplyMethod(second_line.move_to, LEFT_SIDE-2*LEFT))</span>        <span class="token comment"># self.play(ApplyMethod(my_first_text.next_to,second_line))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一段非常正常的代码，但是运行时报错：</p><blockquote><p>c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-87 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-114 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-105 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-116 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-110 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-103 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-119 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-104 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-109 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-97 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-115 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-102 not recognized warnings.warn(“%s not recognized” % ref) c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\svg_mobject.py:125: UserWarning: g0-117 not recognized warnings.warn(“%s not recognized” % ref) Traceback (most recent call last): File “c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\extract_scene.py”, line 155, in main scene = SceneClass(**scene_kwargs) File “c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\scene\scene.py”, line 75, in <strong>init</strong> self.construct() File “C:\Users\14215\PycharmProjects\manimPRO\main.py”, line 11, in construct my_first_text = TextMobject(“Writing with manim is fun”) File “c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\tex_mobject.py”, line 150, in <strong>init</strong> self.break_up_by_substrings() File “c:\users\14215\pycharmprojects\manimpro\manim-master\manimlib\mobject\svg\tex_mobject.py”, line 190, in break_up_by_substrings sub_tex_mob.move_to(self.submobjects[last_submob_index], RIGHT) IndexError: list index out of range</p></blockquote><p><img src="http://pict.lanyun1103.top/typora/20210122150832.png" alt="image-20210122150831965"></p><h3 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h3><p>非常恶心，于是我去Manim github下的Issue中找到了同样的问题，翻了几十楼翻到了最终的解决方案：</p><ol><li> 找到manim\manimlib\tex_template.tex文件</li><li> 注释掉<code>\usepackage[T1]&#123;fontenc&#125;</code></li></ol><p><img src="http://pict.lanyun1103.top/typora/20210122151017.png" alt="image-20210122151017059"></p><p>问题就解决了，学会点赞。</p><p>这是一个常见的包依赖的问题，在Windows系统上出现的几率高，国外人对于这方面还是喜欢花时间啊，还好给我翻到了，不然这两天什么都学不了了。</p>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>首个教你怎么在Pycharm上安装Manim的教程</title>
      <link href="/2021/01/21/shou-ge-jiao-ni-zen-me-zai-pycharm-shang-an-zhuang-manim-de-jiao-cheng/"/>
      <url>/2021/01/21/shou-ge-jiao-ni-zen-me-zai-pycharm-shang-an-zhuang-manim-de-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="首个教你怎么在Pycharm下安装Manim的教程"><a href="#首个教你怎么在Pycharm下安装Manim的教程" class="headerlink" title="首个教你怎么在Pycharm下安装Manim的教程"></a>首个教你怎么在Pycharm下安装Manim的教程</h1><h2 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1. 安装环境"></a>1. 安装环境</h2><ul><li>  Pycharm</li><li>  Git</li><li>  <a href="https://github.com/3b1b/manim">Manim</a></li></ul><p>前两个都是程序员标配了。只需要去github download zip或者本地git clone一下Manim就可以。</p><h2 id="2-创建工程"><a href="#2-创建工程" class="headerlink" title="2. 创建工程"></a>2. 创建工程</h2><p><img src="http://pict.lanyun1103.top/typora/20210121211054.png" alt="image-20210121211054838"></p><p><img src="http://pict.lanyun1103.top/typora/20210121211114.png" alt="image-20210121211114065"></p><p>把下载完成的manim放在工程主路径里，之后在pycharm的命令行中会用到。我这里的工程名字是<code>manimPRO</code>，按照自己取的名字在电脑上里面找到这个文件夹放进去就行。</p><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><p>最先的一步是什么，我猜大部分人不会使用git clone下载到工程目录，这会导致你的工程还未进行git初始化，所以先在上图中进行<code>git init</code>，当然也可以在pycharm的命令行里面进行初始化。</p><p><img src="http://pict.lanyun1103.top/typora/20210121211410.png" alt="image-20210121211410609"></p><p>这样就可以在pycharm的命令行中使用pip安装manim需要的环境。</p><hr><p>接下来来到pycharm中，打开命令行。</p><p><img src="http://pict.lanyun1103.top/typora/20210121211527.png" alt="image-20210121211527657"></p><p><code>cd manim</code>，进入到manim的目录。</p><p><img src="http://pict.lanyun1103.top/typora/20210121211641.png" alt="image-20210121211641540"></p><p>再输入<code>pip install -e . -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</code></p><p><img src="http://pict.lanyun1103.top/typora/20210121211734.png" alt="image-20210121211734607"></p><p>等待下载完成即可。</p><h2 id="4-运行"><a href="#4-运行" class="headerlink" title="4. 运行"></a>4. 运行</h2><p>这里给一个官方的代码，按照这个代码原封不动的运行，可以得到一个只有一个点的视频。</p><p>说明你已经安装成功了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> manimlib<span class="token punctuation">.</span>imports <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> PathRESOLUTION <span class="token operator">=</span> <span class="token string">""</span>FLAGS <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"-ps </span><span class="token interpolation"><span class="token punctuation">&#123;</span>RESOLUTION<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>SCENE <span class="token operator">=</span> <span class="token string">"Test"</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span>Scene<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">construct</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        Circle <span class="token operator">=</span> Circle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    script_name <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"manim </span><span class="token interpolation"><span class="token punctuation">&#123;</span>script_name<span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>SCENE<span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>FLAGS<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-报错的原因"><a href="#5-报错的原因" class="headerlink" title="5. 报错的原因"></a>5. 报错的原因</h2><ol><li> 没进行git初始化</li></ol><blockquote><p>Exception: Versioning for this project requires either an sdist tarball, or access to an upstream git repository. It’s also possible that there is a mismatch between the package nam e in setup.cfg and the argument given to pbr.version.VersionInfo. Project name manimlib was given, but was not able to be found. error in setup command: Error parsing C:\Users\14215\PycharmProjects\manimPRO\manim-master\setup.cfg: Exception: Versioning for this project requires either an sdist tarball, or acc ess to an upstream git repository. It’s also possible that there is a mismatch between the package name in setup.cfg and the argument given to pbr.version.VersionInfo. Project name mani mlib was given, but was not able to be found. ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.</p></blockquote><ol start="2"><li> 没添加信任镜像源</li></ol><blockquote><p>WARNING: The repository located at mirrors.aliyun.com is not a trusted or secure host and is being ignored. If this repository is available via HTTPS we recommend you use HTTPS instead, otherwise you may silence this warning and allow it anyway with ‘–trusted-host mirrors.aliyun.com’. ERROR: Could not find a version that satisfies the requirement argparse (from manimlib) ERROR: No matching distribution found for argparse</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数值分析公式总结（部分习题）</title>
      <link href="/2021/01/07/shu-zhi-fen-xi-gong-shi-zong-jie-bu-fen-xi-ti/"/>
      <url>/2021/01/07/shu-zhi-fen-xi-gong-shi-zong-jie-bu-fen-xi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="数值分析公式"><a href="#数值分析公式" class="headerlink" title="数值分析公式"></a>数值分析公式</h1><p>一、插值多项式</p><h3 id="1-课前知识"><a href="#1-课前知识" class="headerlink" title="1. 课前知识"></a>1. 课前知识</h3><p>拉格朗日一次插值：</p><p>$$p_{1}(x)=l_0(x) y_{1}+l_{1}(x) y_{1}$$</p><p>$$l_{0}(x)=\frac{x-x_{1}}{x_{0}-x_{1}}$$</p><p>$$l_{1}(x)=\frac{x-x_{0}}{x_{1}-x_{0}}$$</p><p>$$\text{误差：}R_{1}(x)=\frac{f’’(\zeta)}{2}\left(x-x_{0}\right)\left(x-x_{1}\right)$$</p><p>拉格朗日插值更一般的情况： $$l_{k}(x)=\frac{\left(x-x_{0}\right)\left(x-x_{1}\right) \cdots\left(x-x_{k-1}\right)\left(x-x_{k+1}\right) \cdots\left(x-x_{n}\right)}{\left(x_{k}-x_{0}\right)\left(x_{k}-x_{1}\right) \cdots\left(x_{k}-x_{k-1}\right)\left(x_{k}-x_{k+1}\right) \cdots\left(x_{k}-x_{n}\right)}$$ $$\operatorname{Ln}(x)=\sum_{k=0}^{n} l_{k}(x) \cdot y_{k}$$ $$R_{n}(x)=f(x)-\operatorname{Ln}(x)=\frac{f^{(n+1)}(\xi)}{(n+1) !} w_{n+1}(x)$$</p><p>牛顿差值：</p><p>诶尔米特插值： $$H_{3}(x)=\alpha_{0}(x) y_{0}+\alpha_{1}(x) y_{1}+\beta_{0}(x) m_{0}+\beta_{1}(x) m_{1}$$ $$m_0与m_1为y_0、y_1的导数$$ $$\alpha_{0}(x)=[1+2 \cdot l_{1} (x)] \cdot l_{0}^{2}(x)$$ $$\alpha_{1}(x)=[1+2 \cdot l_{0} (x)] \cdot l_{1}^{2}(x)$$ $$\beta_{0}(x)=\left(x-x_{0}\right) \cdot l_{0}^{2}(x)$$ $$\beta_{1}(x)=\left(x-x_{1}\right) \cdot l_{0}^{2}(x)$$ $$l_{0}(x)=\frac{x-x_{1}}{x_{0}-x_{1}} \quad l_{1}(x)=\frac{x-x_{0}}{x_{1}-x_{0}}$$</p><p>梯形法： $$T_{1}=\frac{h}{2}\left[f\left(x_{k}\right)+f\left(x_{k+1}\right)\right] \quad T_{2 n}=\frac{1}{2} T_{n}+\frac{h_{n}}{2} \cdot \sum_{k=0}^{n-1} f\left(x_{k+\frac{1}{2}}\right) \quad h_{n}=\frac{b-a}{n}$$</p><p>三点高斯公式： $$f^{\prime}\left(x_{0}\right)=\frac{1}{2 h}\left[3 \cdot f\left(x_{0}\right)+4 \cdot f\left(x_{1}\right)-f\left(x_{2}\right)\right]+\frac{h}{3} f^{\prime \prime \prime}(\zeta)$$ $$f^{\prime}\left(x_{1}\right)=\frac{1}{2 h}\left[-f\left(x_{0}\right)+f\left(x_{2}\right)\right]-\frac{h}{6} \cdot f^{\prime \prime \prime}(\zeta)$$ $$f^{\prime}\left(x_{2}\right)=\frac{1}{2 h}\left[f\left(x_{0}\right)-4 f\left(x_{1}\right)+3 f\left(x_{2}\right)\right]+\frac{h^{2}}{3} f’’’(\zeta)$$</p><p>四阶龙格库塔公式： $$\begin{aligned} y_{n+1} &amp;=y_{n}+\frac{h}{6}\left(k_{1}+2 k_{2}+2 k_{3}+k_{4}\right) \ \newline k_{1} &amp;=f\left(x_{n}, y_{n}\right) \ \newline k_{2} &amp;=f\left(x_{n}+\frac{h}{2}, y_{n}+\frac{h}{2} k_{1}\right) \ \newline k_{3} &amp;=f\left(x_{n}+\frac{h}{2}, y_{n}+\frac{h}{2} k_{2}\right) \ \newline k_{4} &amp;=f\left(x_{n}+h, y_{n}+h k_{2}\right) \end{aligned}$$</p><p>牛顿迭代： $$x_{k+1}=x_{1}-\frac{F\left(x_{k}\right)}{F^{\prime}\left(x_{k}\right)}$$</p><h3 id="2-题目"><a href="#2-题目" class="headerlink" title="2. 题目"></a>2. 题目</h3><p><img src="http://pict.lanyun1103.top/typora/20210104154315.png" alt="image-20210104154314897"></p><p><img src="http://pict.lanyun1103.top/typora/20210104154232.png" alt="image-20210104154231853"></p><p><img src="http://pict.lanyun1103.top/typora/20210104154204.png" alt="image-20210104154204113"></p><p><img src="http://pict.lanyun1103.top/typora/20210104154132.png" alt="image-20210104154131819"></p><p><img src="http://pict.lanyun1103.top/typora/20210104154634.png" alt="image-20210104154634287"></p><p><img src="http://pict.lanyun1103.top/typora/20210104160219.png" alt="image-20210104160218685"></p><p><img src="http://pict.lanyun1103.top/typora/20210105100353.png" alt="image-20210105100353307"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Manim教程——基础绘制、展现、变换（一）</title>
      <link href="/2021/01/06/manim-jiao-cheng-yi/"/>
      <url>/2021/01/06/manim-jiao-cheng-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Manim教程（一）"><a href="#Manim教程（一）" class="headerlink" title="Manim教程（一）"></a>Manim教程（一）</h1><p><img src="http://pict.lanyun1103.top/typora/20210106205012.png" alt="image-20210106205012723"></p><h2 id="零、使用manim运行脚本文件"><a href="#零、使用manim运行脚本文件" class="headerlink" title="零、使用manim运行脚本文件"></a>零、使用manim运行脚本文件</h2><pre class="line-numbers language-none"><code class="language-none">python -m manim example.py Shapes -pl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>  Shapes 为example.py文件中的一个类</li><li>  pl代表preview与low_quelity</li></ul><h3 id="所需要的环境："><a href="#所需要的环境：" class="headerlink" title="所需要的环境："></a>所需要的环境：</h3><ul><li>  MikTex</li><li>  mainm</li><li>  ffmpeg</li></ul><p>如何安装网上有很多教程，报错也有很多解决方案</p><hr><h2 id="一、分析结构"><a href="#一、分析结构" class="headerlink" title="一、分析结构"></a>一、分析结构</h2><p>先从<code>zimmermant</code>的github库中下载<a href="https://github.com/zimmermant/manim_tutorial/blob/master/manim_tutorial_P37.py">manim_tutorial_P37.py</a></p><blockquote><p><a href="https://github.com/zimmermant/manim_tutorial">https://github.com/zimmermant/manim_tutorial</a></p></blockquote><p>将文件放在manim的根目录下，我们从这一个文件开始，一步一步分析如何使用python制作精美的视频。</p><p><code>还是不知道怎么运行？</code></p><p>在anaconda的命令行中cd到manim的根目录，输入<code>python -m manim manim_tutorial_P37.py Shapes -pl</code></p><hr><p>我们从文件的一个类开始看</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> manimlib<span class="token punctuation">.</span>imports <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">import</span> os<span class="token keyword">import</span> pyclbr<span class="token keyword">class</span> <span class="token class-name">Shapes</span><span class="token punctuation">(</span>Scene<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># A few simple shapes</span>    <span class="token comment"># Python 2.7 version runs in Python 3.7 without changes</span>    <span class="token keyword">def</span> <span class="token function">construct</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        circle <span class="token operator">=</span> Circle<span class="token punctuation">(</span><span class="token punctuation">)</span>        square <span class="token operator">=</span> Square<span class="token punctuation">(</span><span class="token punctuation">)</span>        line<span class="token operator">=</span>Line<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        triangle<span class="token operator">=</span>Polygon<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>ShowCreation<span class="token punctuation">(</span>circle<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>FadeOut<span class="token punctuation">(</span>circle<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>GrowFromCenter<span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>Transform<span class="token punctuation">(</span>square<span class="token punctuation">,</span>triangle<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>  Shapes是文件中的一个类，继承了Scene类，里面的construct方法重写父类中函数的内容，<strong>我们的动画也就是在函数内进行制作</strong>。</li><li>  函数中内容很明显分为两部分，1. 定义 2. 加入场景（类似于java的图形界面）。</li></ul><h2 id="二、基本绘制"><a href="#二、基本绘制" class="headerlink" title="二、基本绘制"></a>二、基本绘制</h2><h3 id="1-基本图形"><a href="#1-基本图形" class="headerlink" title="1. 基本图形"></a>1. 基本图形</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">circle <span class="token operator">=</span> Circle<span class="token punctuation">(</span><span class="token punctuation">)</span>square <span class="token operator">=</span> Square<span class="token punctuation">(</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#添加</span>self<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#进行play中的操作</span>self<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#等待几秒钟</span>self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>ShowCreation<span class="token punctuation">(</span>circle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#将一个图形逐渐显示出来</span>self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>FadeOut<span class="token punctuation">(</span>circle<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#淡出</span>self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>GrowFromCenter<span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#从中心扩张的形式生成图形</span>self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>Transform<span class="token punctuation">(</span>square<span class="token punctuation">,</span>triangle<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#两个参数，一个图形向另一个图形变形  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-基本文字"><a href="#2-基本文字" class="headerlink" title="2. 基本文字"></a>2. 基本文字</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_first_text<span class="token operator">=</span>TextMobject<span class="token punctuation">(</span><span class="token string">"Writing with manim is fun"</span><span class="token punctuation">)</span>second_line<span class="token operator">=</span>TextMobject<span class="token punctuation">(</span><span class="token string">"and easy to do!"</span><span class="token punctuation">)</span>second_line<span class="token punctuation">.</span>next_to<span class="token punctuation">(</span>my_first_text<span class="token punctuation">,</span>DOWN<span class="token punctuation">)</span> <span class="token comment">#</span>third_line<span class="token operator">=</span>TextMobject<span class="token punctuation">(</span><span class="token string">"for me and you!"</span><span class="token punctuation">)</span>third_line<span class="token punctuation">.</span>next_to<span class="token punctuation">(</span>my_first_text<span class="token punctuation">,</span>DOWN<span class="token punctuation">)</span>second_line<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>DOWN<span class="token punctuation">)</span>   <span class="token comment">#文字瞬间向下3个单位</span>self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>ApplyMethod<span class="token punctuation">(</span>my_first_text<span class="token punctuation">.</span>shift<span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">*</span>UP<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#以补帧的方式进行动画移动。</span>self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>ApplyMethod<span class="token punctuation">(</span>author<span class="token punctuation">.</span>scale<span class="token punctuation">,</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#scale(),放大</span>author<span class="token punctuation">.</span>match_color<span class="token punctuation">(</span>quote2<span class="token punctuation">)</span>  <span class="token comment">#通过匹配颜色变成另一个图形的颜色</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是，文字和图形可以进行的操作基本相同。</p></blockquote><ul><li>  图像默认生成在中央，next_to() 让文字在另一个图形的正下方</li></ul><p>AddingMoreText类中：</p><blockquote><p>为了简便，我将没必要说明的代码删除，只说明一些需要解释的方法，可以自己对比已经下载的代码进行调试</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AddingMoreText</span><span class="token punctuation">(</span>Scene<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">construct</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        quote <span class="token operator">=</span> TextMobject<span class="token punctuation">(</span><span class="token string">"Imagination is more important than knowledge"</span><span class="token punctuation">)</span>        quote<span class="token punctuation">.</span>set_color<span class="token punctuation">(</span>RED<span class="token punctuation">)</span>    <span class="token comment">#用来定义文字的颜色</span>        quote<span class="token punctuation">.</span>to_edge<span class="token punctuation">(</span>UP<span class="token punctuation">)</span>   <span class="token comment">#输入参数有 UP、DOWN、LEFT、RIGHT，可以将图形或文字与画面的上、下、左、右边界的中心对齐。</span>        quote2 <span class="token operator">=</span> TextMobject<span class="token punctuation">(</span><span class="token string">"A person who never made a mistake never tried anything new"</span><span class="token punctuation">)</span>        author <span class="token operator">=</span> TextMobject<span class="token punctuation">(</span><span class="token string">"-Albert Einstein"</span><span class="token punctuation">)</span>        author<span class="token punctuation">.</span>next_to<span class="token punctuation">(</span>quote<span class="token punctuation">.</span>get_corner<span class="token punctuation">(</span>DOWN<span class="token operator">+</span>RIGHT<span class="token punctuation">)</span><span class="token punctuation">,</span>DOWN<span class="token punctuation">)</span>   <span class="token comment">#get_corner() 得到图形包裹矩阵的顶点，参数有UP+LEFT、UP+RIGHT、DOWN+LEFT、DOWN+RIGHT</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>Transform<span class="token punctuation">(</span>quote<span class="token punctuation">,</span>quote2<span class="token punctuation">)</span><span class="token punctuation">,</span>ApplyMethod<span class="token punctuation">(</span>author<span class="token punctuation">.</span>move_to<span class="token punctuation">,</span>quote2<span class="token punctuation">.</span>get_corner<span class="token punctuation">(</span>DOWN<span class="token operator">+</span>RIGHT<span class="token punctuation">)</span><span class="token operator">+</span>DOWN<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>LEFT<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-旋转和高亮"><a href="#3-旋转和高亮" class="headerlink" title="3. 旋转和高亮"></a>3. 旋转和高亮</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RotateAndHighlight</span><span class="token punctuation">(</span>Scene<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#Rotation of text and highlighting with surrounding geometries</span>    <span class="token keyword">def</span> <span class="token function">construct</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        square<span class="token operator">=</span>Square<span class="token punctuation">(</span>side_length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>fill_color<span class="token operator">=</span>YELLOW<span class="token punctuation">,</span> fill_opacity<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">#长度，填充颜色，透明度</span>        label<span class="token operator">=</span>TextMobject<span class="token punctuation">(</span><span class="token string">"Text at an angle"</span><span class="token punctuation">)</span>        label<span class="token punctuation">.</span>bg<span class="token operator">=</span>BackgroundRectangle<span class="token punctuation">(</span>label<span class="token punctuation">,</span>fill_opacity<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">#根据label的背景，定义一个矩形。</span>        label_group<span class="token operator">=</span>VGroup<span class="token punctuation">(</span>label<span class="token punctuation">.</span>bg<span class="token punctuation">,</span>label<span class="token punctuation">)</span>  <span class="token comment">#组合</span>        label_group<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span>TAU<span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span>   <span class="token comment">#旋转一圈的八分之一，也就是45°</span>        label2<span class="token operator">=</span>TextMobject<span class="token punctuation">(</span><span class="token string">"Boxed text"</span><span class="token punctuation">,</span>color<span class="token operator">=</span>BLACK<span class="token punctuation">)</span>        label2<span class="token punctuation">.</span>bg<span class="token operator">=</span>SurroundingRectangle<span class="token punctuation">(</span>label2<span class="token punctuation">,</span>color<span class="token operator">=</span>BLUE<span class="token punctuation">,</span>fill_color<span class="token operator">=</span>RED<span class="token punctuation">,</span> fill_opacity<span class="token operator">=</span><span class="token number">.5</span><span class="token punctuation">)</span>   <span class="token comment">#根据label2的边框定义一个及矩形。</span>        label2_group<span class="token operator">=</span>VGroup<span class="token punctuation">(</span>label2<span class="token punctuation">,</span>label2<span class="token punctuation">.</span>bg<span class="token punctuation">)</span>        label2_group<span class="token punctuation">.</span>next_to<span class="token punctuation">(</span>label_group<span class="token punctuation">,</span>DOWN<span class="token punctuation">)</span>        label3<span class="token operator">=</span>TextMobject<span class="token punctuation">(</span><span class="token string">"Rainbow"</span><span class="token punctuation">)</span>        label3<span class="token punctuation">.</span>scale<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        label3<span class="token punctuation">.</span>set_color_by_gradient<span class="token punctuation">(</span>RED<span class="token punctuation">,</span> ORANGE<span class="token punctuation">,</span> YELLOW<span class="token punctuation">,</span> GREEN<span class="token punctuation">,</span> BLUE<span class="token punctuation">,</span> PURPLE<span class="token punctuation">)</span>  <span class="token comment">#把文字按照字母顺序设置为不同的颜色</span>        label3<span class="token punctuation">.</span>to_edge<span class="token punctuation">(</span>DOWN<span class="token punctuation">)</span>    <span class="token comment">#与底部对齐</span>        self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>square<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>FadeIn<span class="token punctuation">(</span>label_group<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>FadeIn<span class="token punctuation">(</span>label2_group<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>FadeIn<span class="token punctuation">(</span>label3<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-基本公式"><a href="#4-基本公式" class="headerlink" title="4. 基本公式"></a>4. 基本公式</h3><h4 id="1-创建简单公式并且write："><a href="#1-创建简单公式并且write：" class="headerlink" title="1) 创建简单公式并且write："></a>1) 创建简单公式并且write：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BasicEquations</span><span class="token punctuation">(</span>Scene<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#A short script showing how to use Latex commands</span>    <span class="token keyword">def</span> <span class="token function">construct</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        eq1<span class="token operator">=</span>TextMobject<span class="token punctuation">(</span><span class="token string">"$\\vec&#123;X&#125;_0 \\cdot \\vec&#123;Y&#125;_1 = 3$"</span><span class="token punctuation">)</span> <span class="token comment">#很简单的语法，通过TextMobect中使用$$包含公式就可以输出公式</span>        eq1<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>UP<span class="token punctuation">)</span>        eq2<span class="token operator">=</span>TexMobject<span class="token punctuation">(</span><span class="token string">r"\vec&#123;F&#125;_&#123;net&#125; = \sum_i \vec&#123;F&#125;_i"</span><span class="token punctuation">)</span>   <span class="token comment">#在TexMobject中可以直接输入公式，在前面加r可以不需要使用双斜杠</span>        eq2<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>DOWN<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>Write<span class="token punctuation">(</span>eq1<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>Write<span class="token punctuation">(</span>eq2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-添加颜色："><a href="#2-添加颜色：" class="headerlink" title="2) 添加颜色："></a>2) 添加颜色：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ColoringEquations</span><span class="token punctuation">(</span>Scene<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#Grouping and coloring parts of equations</span>    <span class="token keyword">def</span> <span class="token function">construct</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        line1<span class="token operator">=</span>TexMobject<span class="token punctuation">(</span><span class="token string">r"\text&#123;The vector &#125; \vec&#123;F&#125;_&#123;net&#125; \text&#123; is the net &#125;"</span><span class="token punctuation">,</span><span class="token string">r"\text&#123;force &#125;"</span><span class="token punctuation">,</span><span class="token string">r"\text&#123;on object of mass &#125;"</span><span class="token punctuation">)</span>        line1<span class="token punctuation">.</span>set_color_by_tex<span class="token punctuation">(</span><span class="token string">"force"</span><span class="token punctuation">,</span> BLUE<span class="token punctuation">)</span> <span class="token comment">#直接设置text&#123;force的颜色为BLUE&#125;，一段一段的上色</span>        line2<span class="token operator">=</span>TexMobject<span class="token punctuation">(</span><span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"\\text&#123; and acceleration &#125;"</span><span class="token punctuation">,</span> <span class="token string">"\\vec&#123;a&#125;"</span><span class="token punctuation">,</span> <span class="token string">".  "</span><span class="token punctuation">)</span>        line2<span class="token punctuation">.</span>set_color_by_tex_to_color_map<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">"m"</span><span class="token punctuation">:</span> YELLOW<span class="token punctuation">,</span>            <span class="token string">"&#123;a&#125;"</span><span class="token punctuation">:</span> RED        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">#使用字典的方式，同时给好几段上色，但是我觉得都非常麻烦</span>        sentence<span class="token operator">=</span>VGroup<span class="token punctuation">(</span>line1<span class="token punctuation">,</span>line2<span class="token punctuation">)</span>        sentence<span class="token punctuation">.</span>arrange_submobjects<span class="token punctuation">(</span>DOWN<span class="token punctuation">,</span> buff<span class="token operator">=</span>MED_LARGE_BUFF<span class="token punctuation">)</span> <span class="token comment">#在play之前，重新定义了sentence组合里面，每个成分的排列方式。意思是，向下排列，排列的间距为半个单位长度，如果没有定义排列方式，两行文字会重叠在一行。</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>Write<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种方法，采用知乎<a href="https://www.zhihu.com/people/lijianhui.net">李狗嗨</a>提到的一种方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ColoringEquations</span><span class="token punctuation">(</span>Scene<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#Grouping and coloring parts of equations</span>    <span class="token keyword">def</span> <span class="token function">construct</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        line1<span class="token operator">=</span>TexMobject<span class="token punctuation">(</span><span class="token string">r"\text&#123;The vector &#125; \vec&#123;F&#125;_&#123;net&#125; \text&#123; is the net &#125;"</span><span class="token punctuation">,</span><span class="token string">r"\text&#123;force &#125;"</span><span class="token punctuation">,</span><span class="token string">r"\text&#123;on object of mass &#125;"</span><span class="token punctuation">)</span>        line1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span>BLUE<span class="token punctuation">)</span>    <span class="token comment">#通过制定line1这个列表来进行染色，效果仍然是force被染色了。</span>        line2<span class="token operator">=</span>TexMobject<span class="token punctuation">(</span><span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"\\text&#123; and acceleration &#125;"</span><span class="token punctuation">,</span> <span class="token string">"\\vec&#123;a&#125;"</span><span class="token punctuation">,</span> <span class="token string">".  "</span><span class="token punctuation">)</span>        line2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span>YELLOW<span class="token punctuation">)</span>        line2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span>RED<span class="token punctuation">)</span>        sentence<span class="token operator">=</span>VGroup<span class="token punctuation">(</span>line1<span class="token punctuation">,</span>line2<span class="token punctuation">)</span>        sentence<span class="token punctuation">.</span>arrange_submobjects<span class="token punctuation">(</span>DOWN<span class="token punctuation">,</span> buff<span class="token operator">=</span>MED_LARGE_BUFF<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>play<span class="token punctuation">(</span>Write<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么到现在，怎么进行基础的绘制的命令就结束了。</p><p>下一次介绍怎么使用manim制作动画。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 一些技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ggplot2使用教程（未完）</title>
      <link href="/2020/12/24/ggplot2-shi-yong-jiao-cheng/"/>
      <url>/2020/12/24/ggplot2-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="ggplot2使用教程"><a href="#ggplot2使用教程" class="headerlink" title="ggplot2使用教程"></a>ggplot2使用教程</h1><h2 id="一、基本作图函数qplot"><a href="#一、基本作图函数qplot" class="headerlink" title="一、基本作图函数qplot"></a>一、基本作图函数qplot</h2><h3 id="1-例子"><a href="#1-例子" class="headerlink" title="1. 例子"></a>1. 例子</h3><p>表示快速作图，下面是qplot的参数</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">qplot(x,y,...,data,facets&#x3D;NULL,margins&#x3D;FALSE,geom&#x3D;&quot;auto&quot;,xlim&#x3D;c(NA,NA),ylim&#x3D;c(NA,NA),log&#x3D;&quot;&quot;,main&#x3D;NULL,xlab&#x3D;NULL,ylab&#x3D;NULL,asp&#x3D;NA,stat&#x3D;NULL,position&#x3D;NULL)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>说明：x,y是绘制在x轴y轴的数据，data指定数据集，官方推荐使用数据框作为绘图数据集，因为数据框可以储存不同类型的值，ggplot2可以直接使用每一列数据来自动映射到图形属性（无论是什么类型的数据）。facets：分页参数，采用”行变量~列变量“。</p></blockquote><p>同样数据下，使用plot绘图：</p><p><img src="http://pict.lanyun1103.top/typora/20201224094219.png" alt="image-20201224094218947"></p><p>使用qplot绘图：</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">fcyl &#x3D; as.factor(mpg$cyl)qplot(displ, hwy, data &#x3D; mpg, shape&#x3D;fcyl, color &#x3D; fcyl)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://pict.lanyun1103.top/typora/20201224094228.png" alt="image-20201224094228539"></p><p>为什么plot需要使用pch制定图形的形状而<code>qplot</code>不需要，因为<code>qplot</code>的自动映射机制，根据数据到几何图像的自动映射让他能自动将不同的数据使用不同的图形表示。同理，使用<code>`color=fcyl`</code>也是自动映射自动生成合适的颜色。</p><p>如何选择自己想要的颜色，可以在之后了解theme，使用<code>help(theme)</code>查看帮助</p><h3 id="2-其他图形："><a href="#2-其他图形：" class="headerlink" title="2. 其他图形："></a>2. 其他图形：</h3><p>除了散点图，还可以绘制其他图形，例如</p><ol><li> 点连线</li><li> 直方图</li><li> 密度曲线</li><li> 箱线图</li><li> 柱状图</li><li> 平滑线</li></ol><pre class="line-numbers language-R" data-language="R"><code class="language-R">qplot(x, y, data &#x3D; mpq, geom &#x3D; c(&quot;point&quot;,&quot;smooth&quot;), method &#x3D; &quot;loess&quot;, se&#x3D;F)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>method表示使用局部平滑。</p></blockquote><h3 id="3-保存"><a href="#3-保存" class="headerlink" title="3. 保存"></a>3. 保存</h3><p>使用ggplot2扩展包生成的图片可以使用<code>ggsave</code>进行保存为pdf。</p><hr><h2 id="二、ggplot2绘图"><a href="#二、ggplot2绘图" class="headerlink" title="二、ggplot2绘图"></a>二、ggplot2绘图</h2><p>ggplot2是基于图层（layer）的绘图工具。</p><p>可以认为图形语法一般包括：</p><ol><li> 数据</li><li> 映射</li><li> 集合对象</li><li> 统计变换</li><li> 标度</li><li> 坐标系</li><li> 分面</li></ol><h3 id="1）数据"><a href="#1）数据" class="headerlink" title="1）数据"></a>1）数据</h3><p>对于ggplot2来说必须使用数据框</p><h3 id="2）映射"><a href="#2）映射" class="headerlink" title="2）映射"></a>2）映射</h3><p>将数据相应数据对应到图形属性的一种关联过程</p><h3 id="3）几何对象"><a href="#3）几何对象" class="headerlink" title="3）几何对象"></a>3）几何对象</h3><p>呈现在集合图形中的多边形元素。</p><p><code>mapping=aes()</code>就是从数据到图形属性的映射函数，通常可以简化成<code>aes()</code>，<code>aes(x=var1,var2)</code>，<code>aes</code>函数中还包含其他的属性，例如大小、颜色、形状。</p><p><code>ggplot()</code>函数的功能是初始化ggplot对象，表明图形所用的数据是什么。</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">ggplot(mpg, aes(displ, hwy, colour &#x3D; factor(cyl)))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pict.lanyun1103.top/typora/20201224105816.png" alt="image-20201224105815944"></p><p>命令会创建一个空的图形</p><p>如果需要绘制图形，<strong>使用<code>layer()</code>添加几何对象</strong>，代码如下</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">ggplot(mpg, aes(displ, hwy, colour &#x3D; factor(cyl)))+  layer(geom &#x3D; &quot;point&quot;, stat &#x3D; &quot;identity&quot;, position &#x3D; &quot;identity&quot;, params &#x3D; list(na.rm&#x3D;FALSE))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里使用了+完成对图形的绘制，layer函数的帮助信息如下</p><blockquote><p>layer(geom=NULL,stat=NULL,data=NULL,mapping=NULL,position=NULL,params=list(),inherit.aes=TRUE,check.aes=TRUE,check.param=TRUE,show.legend=NA,key_glyph=NULL,layer_class=Layer)</p></blockquote><p>比较多，但是一个图层函数必须包含</p><ol><li> data：包含数据的数据集，如果在上面的ggplot中指定过，那么不需要在进行指定，但是也可以在layer中再次指定另一个数据集。</li><li> mapping：即aes</li><li> geom：几何对象</li><li> stat：统计变换，我们可以在图层函数中添加我们想要的数据的统计变换。</li><li> position：位置调整，主要是为了调整图形重合的现象。</li></ol><p>也就是：</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">layer(data, mapping, geom, stat, position)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上的例子绘制的是散点图，设置的为<code>geom=&quot;point&quot;</code>，其他有<code>geom=&quot;line&quot;</code>，但是可以使用其他的代替，例如<code>geom_point()</code>，效果是一样的。<strong>可以使用<code>???geom_.</code>来获得其他函数的清单</strong>。</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">ggplot(mpg, aes(displ, hwy, colour &#x3D; factor(cyl)))+  geom_point()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4）统计变换"><a href="#4）统计变换" class="headerlink" title="4）统计变换"></a>4）统计变换</h3><p>因为有时候我们不仅要绘制原始的图形，还需要对原始数据进行“统计”上的修改。并且把修改后的数据一起表现出来。</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">ggplot(mpg, aes(displ, hwy, colour &#x3D; factor(cyl)))+  geom_point()+stat_smooth(method &#x3D; &quot;loess&quot;, se &#x3D; FALSE)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://pict.lanyun1103.top/typora/20201224111340.png" alt="image-20201224111340039"></p><h3 id="5）标度"><a href="#5）标度" class="headerlink" title="5）标度"></a>5）标度</h3><h3 id="6）坐标系"><a href="#6）坐标系" class="headerlink" title="6）坐标系"></a>6）坐标系</h3><h3 id="7）分面"><a href="#7）分面" class="headerlink" title="7）分面"></a>7）分面</h3><p>即通过<code>+</code>联系起来的ggplot各个页面</p><h2 id="三、绘图实践"><a href="#三、绘图实践" class="headerlink" title="三、绘图实践"></a>三、绘图实践</h2><h3 id="1-散点图"><a href="#1-散点图" class="headerlink" title="1. 散点图"></a>1. 散点图</h3><pre class="line-numbers language-R" data-language="R"><code class="language-R">ggplot(mpg, aes(displ, hwy, colour &#x3D; factor(cyl),shape&#x3D;factor(cyl)))+  geom_point()+  scale_shape_manual(values&#x3D;1:4)scale_color_manual()    #自定义颜色scale_fill_manual()     #自定义填充颜色scale_size_manual()     #自定义大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-折线图"><a href="#2-折线图" class="headerlink" title="2. 折线图"></a>2. 折线图</h3><h4 id="1）普通折线图"><a href="#1）普通折线图" class="headerlink" title="1）普通折线图"></a>1）普通折线图</h4><pre class="line-numbers language-R" data-language="R"><code class="language-R">ggplot(longley, aes(factor(Year), Unemployed, group &#x3D;1))+geom_line()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pict.lanyun1103.top/typora/20201224133947.png" alt="image-20201224133947822"></p><blockquote><p>注意：group=1，告诉ggplot()将数据点作为一个分组来处理。</p></blockquote><pre class="line-numbers language-R" data-language="R"><code class="language-R">geom_line()     #连线geom_point()    #标记图片的点#以下代码可以着重标记图片中某些点a &#x3D; subset(longley, Unemployed&gt;&#x3D;median(Unemployed))p + geom_point(data &#x3D; a, shape &#x3D; 21, size &#x3D; 4,fill &#x3D; &quot;black&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）面积图"><a href="#2）面积图" class="headerlink" title="2）面积图"></a>2）面积图</h4><p><code>geom_area</code>用来绘制面积图</p><h4 id="3）绘制多个折线图"><a href="#3）绘制多个折线图" class="headerlink" title="3）绘制多个折线图"></a>3）绘制多个折线图</h4><p>使用reshape2中的<code>melt()</code>处理宽数据，将数据框以长格式排成一列。</p><h3 id="3-其他的"><a href="#3-其他的" class="headerlink" title="3. 其他的"></a>3. 其他的</h3><p>基本同理啦</p><h3 id="4-设置主题"><a href="#4-设置主题" class="headerlink" title="4.设置主题"></a>4.设置主题</h3><p>使用<code>help(theme)</code>，可以查看所有theme的参数，更细微的内容在这里不说了。</p><h3 id="5-其他图形"><a href="#5-其他图形" class="headerlink" title="5. 其他图形"></a>5. 其他图形</h3><p><code>geom_tile()</code>绘制相关系数热图</p><p><code>geom_ribbon()</code>绘制带状图</p><p><code>stat_function()</code>绘制任意函数的曲线图</p><p><code>geom_area</code>，绘制不同的阴影颜色</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX如何使用Bibtex引用参考文献</title>
      <link href="/2020/12/23/latex-ru-he-shi-yong-bibtex-yin-yong-can-kao-wen-xian/"/>
      <url>/2020/12/23/latex-ru-he-shi-yong-bibtex-yin-yong-can-kao-wen-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="LaTeX如何使用Bibtex引用参考文献"><a href="#LaTeX如何使用Bibtex引用参考文献" class="headerlink" title="LaTeX如何使用Bibtex引用参考文献"></a>LaTeX如何使用Bibtex引用参考文献</h1><h2 id="零、什么是Bibtex"><a href="#零、什么是Bibtex" class="headerlink" title="零、什么是Bibtex"></a>零、什么是Bibtex</h2><p>Bibtex是一个.bib的文件，是一种参考文献的格式，里面包含了多个参考文献的信息，bib文件可以使用记事本或者其他程序打开，文件内信息格式如下，</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">@article&#123;name,    title &#x3D; &#123;&#125;,    issn &#x3D; &#123;&#125;,    url &#x3D; &#123;&#125;,    abstract &#x3D; &#123;&#125;,    language &#x3D; &#123;中文;&#125;,    number &#x3D; &#123;&#125;,    urldate &#x3D; &#123;&#125;,    journal &#x3D; &#123;&#125;,    author &#x3D; &#123;&#125;,    year &#x3D; &#123;&#125;,    keywords &#x3D; &#123;&#125;,    pages &#x3D; &#123;1&#125;,&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>name是文献的唯一标识号，之后在文章中使用<code>\cite&#123;name&#125;</code>引用文献。</p><h2 id="一、获得文献的BibTex"><a href="#一、获得文献的BibTex" class="headerlink" title="一、获得文献的BibTex"></a>一、获得文献的BibTex</h2><p>这里我使用<code>Zotero</code>配合chrome插件获得知网文献的bibtex，打开知网文献页面后点击右上角的插件，保存在本地的文库内。</p><p><img src="http://pict.lanyun1103.top/typora/20201223205859.png" alt="image-20201223205852689"></p><p>桌面的Zotero中选择导出条目</p><p><img src="http://pict.lanyun1103.top/typora/20201223211527.png" alt="image-20201223211527501"></p><p>导出为BibTeX</p><p><img src="http://pict.lanyun1103.top/typora/20201223211551.png" alt="image-20201223211551189"></p><p>导出的文件就是.bib结尾的BibTeX文件了。</p><h2 id="二、在Tex文件中使用BibTex"><a href="#二、在Tex文件中使用BibTex" class="headerlink" title="二、在Tex文件中使用BibTex"></a>二、在Tex文件中使用BibTex</h2><p>使用<code>\bibliographystyle&#123;plain&#125;</code>，指定文章使用的文献id格式，有很多种，这里用的是plain，其他的可以在网上搜到，不做过多赘述。</p><p>使用<code>\bibliography&#123;filename&#125;</code>，filename就是你刚刚导出的bib文件名，不带后缀。</p><blockquote><p>注意：bib文件需要和tex文件在同一目录</p></blockquote><p>在正文中，使用<code>\cite&#123;articlename&#125;</code>，这里的<code>articlename</code>就是前文说到的<code>name</code>。使用这种唯一标识的方法，可以在文章中多次引用同一篇文献。</p><p>我这里在使用过程中，发现TexStudio在自动补全中也有bib文件中文献的<code>name</code>。</p><p><img src="http://pict.lanyun1103.top/typora/20201223213043.png" alt="image-20201223213043177"></p><p>在TexStudio摁F5，最终的效果如下。·</p><p><img src="http://pict.lanyun1103.top/typora/20201223214058.png" alt="image-20201223214058621"></p><p>导出的文件中可以看到一个bbl文件，这里面储存了参考文献的latex型语句，也就是说使用bibtex进行参考文献管理，节省了你自己写latex型语句参考文献的重复步骤。</p>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX科技排版</title>
      <link href="/2020/12/23/latex-ke-ji-pai-ban/"/>
      <url>/2020/12/23/latex-ke-ji-pai-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="LaTeX科技排版"><a href="#LaTeX科技排版" class="headerlink" title="LaTeX科技排版"></a>LaTeX科技排版</h1><p>基础的现就不说了，直接说使用latex如何进行排版</p><h2 id="一、排版语句"><a href="#一、排版语句" class="headerlink" title="一、排版语句"></a>一、排版语句</h2><h3 id="1-居中"><a href="#1-居中" class="headerlink" title="1. 居中"></a>1. 居中</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">center</span><span class="token punctuation">&#125;</span>    hello, this is a paragraph<span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">center</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个居中行</p><p><img src="http://pict.lanyun1103.top/typora/20201223090346.png" alt="image-20201223090339447"></p><h2 id="二、数学公式："><a href="#二、数学公式：" class="headerlink" title="二、数学公式："></a>二、数学公式：</h2><h3 id="1-输入公式"><a href="#1-输入公式" class="headerlink" title="1. 输入公式"></a>1. 输入公式</h3><h4 id="1-行内"><a href="#1-行内" class="headerlink" title="1) 行内"></a>1) 行内</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">math</span><span class="token punctuation">&#125;</span><span class="token equation string">  <span class="token equation-command regex">\LaTeX</span> </span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">math</span><span class="token punctuation">&#125;</span> <span class="token comment">%第一种</span><span class="token equation string">\(  <span class="token equation-command regex">\LaTeX</span>   \)</span><span class="token comment">%第二种</span><span class="token equation string">$   <span class="token equation-command regex">\LaTeX</span>   $</span> <span class="token comment">%第三种</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-行外（独立数学公式"><a href="#2-行外（独立数学公式" class="headerlink" title="2) 行外（独立数学公式"></a>2) 行外（独立数学公式</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span> 数学公式 <span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">displaymath</span><span class="token punctuation">&#125;</span>  <span class="token equation string">\[  数学公式   \]</span>  <span class="token equation string">$$   数学公式   $$</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-独立成行"><a href="#3-独立成行" class="headerlink" title="3) 独立成行"></a>3) 独立成行</h4><p>独立成行的数学公式，且自动编号。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">equation</span><span class="token punctuation">&#125;</span><span class="token equation string">  0.3x+y/2=4z  </span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">equation</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-复杂的数学公式"><a href="#4-复杂的数学公式" class="headerlink" title="4) 复杂的数学公式"></a>4) 复杂的数学公式</h4><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>对齐方式选择<span class="token punctuation">&#125;</span>  <span class="token comment">%对齐方式的单位是每一列</span>              内容            <span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span class="token comment">%对齐方式包括：左对齐  （l），右对齐  （r），居中  （c）</span><span class="token comment">%例子：绘制一个矩阵</span><span class="token equation string">$$<span class="token equation-command regex">\left</span> (    <span class="token equation-command regex">\begin</span>&#123;array&#125;&#123;c&#125;          <span class="token equation-command regex">\left</span> <span class="token equation-command regex">\begin</span>&#123;array&#125;&#123;cc&#125;          a+b&amp;b+c<span class="token equation-command regex">\\</span>c+d&amp;d+a          <span class="token equation-command regex">\end</span>&#123;array&#125;          <span class="token equation-command regex">\right</span> <span class="token equation-command regex">\\</span>          y<span class="token equation-command regex">\\</span>z          <span class="token equation-command regex">\end</span>&#123;array&#125;<span class="token equation-command regex">\right</span> ) $$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://pict.lanyun1103.top/typora/20201223092505.png" alt="image-20201223092505485"></p><h2 id="三、命令集"><a href="#三、命令集" class="headerlink" title="三、命令集"></a>三、命令集</h2><h3 id="1-文献形式"><a href="#1-文献形式" class="headerlink" title="1. 文献形式"></a>1. 文献形式</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"> <span class="token function selector">\documentclass</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">article</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>{}内：article, book, report,letter.</p><p>Options：可用于选择文献的字号、版式和数学公式的编号及对齐方式</p><ol><li> 字号：11pt，10pt；</li><li> 版式：默认版式是单列单面，双面输出选twoside;</li><li> 数学公式的编号及对齐方式：默认版式位数学公式居中，编号在右 leqno:编号在左，公式左对齐</li></ol><p>使用中文latex内容的话，\documentstyle{article}改为\documentstyle{carticle}</p><h3 id="2-文献头命令"><a href="#2-文献头命令" class="headerlink" title="2. 文献头命令"></a>2. 文献头命令</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">(1)标题命令    <span class="token function selector">\title</span><span class="token punctuation">&#123;</span>标题<span class="token punctuation">&#125;</span>(2)作者命令<span class="token function selector">\author</span><span class="token punctuation">&#123;</span>作者名<span class="token function selector">\\</span>地址<span class="token punctuation">&#125;</span>，即使不需要作者名，此命令不能省(3)日期命令<span class="token function selector">\date</span><span class="token punctuation">&#123;</span>年月日<span class="token punctuation">&#125;</span>，一般写为<span class="token function selector">\date</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>(4)头命令<span class="token function selector">\maketitle</span>该命令产生文献头，即将以上三个命令按latex格式排印出来，不使用这个命令，以上三个都无法显示出来(5)注释命令<span class="token function selector">\thanks</span>  此命令用于小字号产生注释，排在标题页的底部。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-节命令"><a href="#3-节命令" class="headerlink" title="3. 节命令"></a>3. 节命令</h3><p><code>\section</code></p><h3 id="4-简单的规则"><a href="#4-简单的规则" class="headerlink" title="4. 简单的规则"></a>4. 简单的规则</h3><ol><li>空格：Latex中空格不起作用。</li><li>换行：用控制命令“\”,或“ \newline”.</li><li>分段：用控制命令“\par” 或空出一行。</li><li>换页：用控制命令“\newpage”或“\clearpage”</li></ol><h3 id="5-西文字符转换"><a href="#5-西文字符转换" class="headerlink" title="5. 西文字符转换"></a>5. 西文字符转换</h3><p>\rm 罗马字体 \it 意大利字体</p><p>\bf 黑体 \sl 倾斜体</p><p>\sf 等线体 \sc 小体大写字母</p><p>\tt 打字机字体 \mit 数学斜体</p><h3 id="6-字号转换"><a href="#6-字号转换" class="headerlink" title="6. 字号转换"></a>6. 字号转换</h3><p>点数(pt) 相应中文字号 控制命令</p><p>25 一号 \Huge</p><p>20 二号 \huge</p><p>17 三号 \LARGE</p><p>14 四号 \Large</p><p>12 小四号 \large</p><p>10 五号 \normalsize</p><p>9 小五号 \small</p><p>8 六号 \footnotesize</p><p>7 小六号 \scriptsize</p><p>5 七号 \tiny</p><h3 id="7-中文排版字体和字号"><a href="#7-中文排版字体和字号" class="headerlink" title="7.中文排版字体和字号"></a>7.中文排版字体和字号</h3><p><img src="http://pict.lanyun1103.top/typora/20201223093403.png" alt="image-20201223093403496"></p><p><img src="http://pict.lanyun1103.top/typora/20201223093406.png" alt="image-20201223093405985"></p><h3 id="8-页面控制命令"><a href="#8-页面控制命令" class="headerlink" title="8. 页面控制命令"></a>8. 页面控制命令</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\textwidth</span>=14.5cm  <span class="token function selector">\textheight</span>=21.5cm <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="9-数学模式命令"><a href="#9-数学模式命令" class="headerlink" title="9. 数学模式命令"></a>9. 数学模式命令</h3><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">$$<span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">&#125;</span>  <span class="token function selector">\mathrm</span><span class="token punctuation">&#123;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="token punctuation">&#125;</span><span class="token function selector">\\</span><span class="token comment">%罗马字体 </span> <span class="token function selector">\athtt</span><span class="token punctuation">&#123;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="token punctuation">&#125;</span><span class="token function selector">\\</span><span class="token comment">%打字机字体 </span> <span class="token function selector">\mathbf</span><span class="token punctuation">&#123;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="token punctuation">&#125;</span><span class="token function selector">\\</span><span class="token comment">%黑体 </span> <span class="token function selector">\mathsf</span><span class="token punctuation">&#123;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="token punctuation">&#125;</span><span class="token function selector">\\</span><span class="token comment">%等线体 </span> <span class="token function selector">\mathit</span><span class="token punctuation">&#123;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="token punctuation">&#125;</span><span class="token function selector">\\</span><span class="token comment">%意大利字体 </span> <span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">array</span><span class="token punctuation">&#125;</span> $$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>上标下标以及其他东西</li></ol><p>文中数学公式用\$作为定界符，对于独立公式用\$\$作为定界符。</p><p>上标用“^”，下标用“_”。</p><ol start="2"><li><p>求和与积分命令\sum; \int</p></li><li><p>数学公式中省略号和极限 :</p></li></ol><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$<span class="token equation-command regex">\cdots</span>  <span class="token equation-command regex">\ldots</span> <span class="token equation-command regex">\vdots</span>  <span class="token equation-command regex">\ddots</span> $</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如下</p><p>$$\cdots \ldots \vdots \ddots $$</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$$<span class="token equation-command regex">\lim</span>_&#123;n <span class="token equation-command regex">\rightarrow</span> <span class="token equation-command regex">\infty</span>&#125;<span class="token equation-command regex">\sin</span> x_&#123;n&#125;=0$$</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>$$\lim_{n \rightarrow \infty}\sin x_{n}=0$$</p><ol start="4"><li>分式命令</li></ol><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>分子<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>分母<span class="token punctuation">&#125;</span><span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>y<span class="token punctuation">&#125;</span><span class="token function selector">\frac</span><span class="token punctuation">&#123;</span>1<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>2<span class="token punctuation">&#125;</span><span class="token comment">%简单，不演示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>根式命令</li></ol><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\sqrt</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>内容<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>增加间距</li></ol><ol><li> 字间距命令 <code>\!</code> <code>\,</code> <code>\:</code> <code>\;</code> <code>\over</code> 依次增大间距，\,最常用，也可用于文字状态。另外还有\ 1</li><li> 水平空距命令 <code>\hspace&#123;空间距值&#125; \hskip</code> 空间距值 <code>\hspace&#123;1in&#125; \hskip 1in</code> 必须用在行内，前后都是文字</li><li> 垂直空距命令 <code>\vspace&#123;空间距值&#125;</code> \vskip 空间距值 <code>\vspace&#123;1in&#125;</code> <code>\vskip 1in</code></li></ol><ol start="7"><li>上划线、下划线内容</li></ol><p>上划线命令 <code>\overline&#123;内容&#125;</code></p><p>$$\overline{1+x+y}$$</p><p>下划线命令 <code>\underline&#123;内容&#125;</code></p><p>$$\underline{1+x+y}$$</p><p>$$\overline{\underline{x+y}+z}$$</p><ol start="8"><li>上括号、下括号命令</li></ol><p>上花括号命令 <code>$$\overbrace&#123;x+y+z+w&#125;$$</code></p><p>$$\overbrace{x+y+z+w}$$</p><p>下花括号命令 <code>$$a+\underbrace&#123;b+\cdots +y&#125;_&#123;24&#125;+z$$</code></p><p>$$a+\underbrace{b+\cdots +y}_{24}+z$$</p><ol start="9"><li>上下限</li></ol><p><code>\limits</code></p><ol start="10"><li>公式编号命令 <code>\eqno ()</code> <code>\leqno ()</code></li></ol><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token comment">%戴帽命令 </span><span class="token equation string">$$<span class="token equation-command regex">\hat</span>&#123;o&#125; <span class="token equation-command regex">\tilde</span>&#123;o&#125;$$</span>  <span class="token equation string">$$<span class="token equation-command regex">\widehat</span>&#123;A+B&#125; <span class="token equation-command regex">\widetilde</span>&#123;a+b&#125;$$</span> <span class="token comment">%左定界符命令</span><span class="token function selector">\left</span><span class="token comment">%此命令产生大小随高度变化的定界符，比如：&#123;&#125;</span><span class="token function selector">\left</span><span class="token function selector">\&#123;</span><span class="token comment">%右定界符命令</span><span class="token function selector">\right</span><span class="token function selector">\right</span><span class="token function selector">\&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、插入图片"><a href="#四、插入图片" class="headerlink" title="四、插入图片"></a>四、插入图片</h2><p><strong>Tex支持最好的是.eps格式的图片</strong>，将转换好的.eps文件(如p1.eps)与你的TEX文件放置在同一文件夹。</p><p>首先假如graphics宏包：<code>\usepackage[dvips]&#123;graphicx&#125;</code></p><p>插入图片语句：<code>\includegraphics[angle=90,width=0.65\textwidth]&#123;p1.eps&#125;</code></p><blockquote><p>angle=90表示原图顺时针旋转90度，width=0.65\textwidth表示图形的宽度为文本宽度的0.65</p></blockquote><p>如果希望图形有名有姓并且可以实现交叉引用，可以使用Latex的图形环境。</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">&#123;</span><span class="token keyword">figure</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>htbp<span class="token punctuation">]</span><span class="token function selector">\centering</span> <span class="token comment">%图形居中</span><span class="token function selector">\includegraphics</span><span class="token punctuation">[</span>angle=90,width=0.65<span class="token function selector">\textwidth</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>p1.eps<span class="token punctuation">&#125;</span><span class="token function selector">\caption</span><span class="token punctuation">&#123;</span>图片1<span class="token punctuation">&#125;</span><span class="token function selector">\label</span><span class="token punctuation">&#123;</span><span class="token keyword">tupian1</span><span class="token punctuation">&#125;</span><span class="token function selector">\end</span><span class="token punctuation">&#123;</span><span class="token keyword">figure</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，经编译后，你的dvi文件中会出现一个名为“图片1”的图片，如果你之后需要引用它，只要<code>\ref&#123;tupian1&#125;</code>命令即可．</p>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言常用命令以及小技巧</title>
      <link href="/2020/12/17/r-yu-yan-chang-yong-ming-ling-yi-ji-xiao-ji-qiao/"/>
      <url>/2020/12/17/r-yu-yan-chang-yong-ming-ling-yi-ji-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h4 id="生成数组"><a href="#生成数组" class="headerlink" title="生成数组"></a>生成数组</h4><pre class="line-numbers language-r" data-language="r"><code class="language-r">x <span class="token operator">=</span> rbinom<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">)</span> <span class="token comment">#生成伯努利分布的数组</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">10</span>    <span class="token comment">#生成步长为1的数组</span>rep<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">#重复生成某个元素</span>x <span class="token operator">=</span> rep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">#生成10个1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h4><pre class="line-numbers language-R" data-language="R"><code class="language-R">apply(X, MARGIN, FUN, ...)  #函数意义：对X数组进行FUN函数得到数据。#X为数组，MARGIN可以为1,2，1：按照行进行FUN，2：按照列进行FUN。scale()     #对数据进行展开，将二维的数据-&gt;一维数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="绘图命令"><a href="#绘图命令" class="headerlink" title="绘图命令"></a>绘图命令</h4><pre class="line-numbers language-R" data-language="R"><code class="language-R">par()       #设置绘图参数，常用的有mfrow，mfcol（设置n*n），pin（设置图像大小）plot()      #散点图,for example: plot(y~x)coplot()    #不同划分下的散点图，例如coplot(Y~x1x2)hist()      #直方图pie()       #饼图boxplot()   #箱线图dotchart()  #点图pairs()     #配对散点图barplot()   #柱状图qqline()    #qq线，qqline向通过探测器分位数(默认情况下是第一和第三四分位数)的“理论”(默认情况下是正常的)分位数-分位数曲线图添加一条线qqnorm()    #qq图，是一种通用函数，其默认方法是生成Y中的值的正常QQ图<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="统计类命令"><a href="#统计类命令" class="headerlink" title="统计类命令"></a>统计类命令</h4><pre class="line-numbers language-R" data-language="R"><code class="language-R">##############统计相关##########table()     #统计数据中的频数cor()       #相关性检验cor.test()  #检查两个元素之间的相关性princomp()  #Princomp对给定的数字数据矩阵执行主成分分析，并将结果作为princomp类的对象返回。predict(object) #预测样本主成分，参数是princomp类#########回归相关命令#########lm()        #线性回归lm(Y ~ X1 + X2,data &#x3D; list1)glm()       #logistic回归，glm.val&lt;-glm(Y~X1+X2+X3+X4+X5,data&#x3D;list2)step()      #逐步回归step(glm.val)summary(object) #查看拟合方程coef(object)    #查看拟合方程的参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tips："><a href="#tips：" class="headerlink" title="tips："></a>tips：</h3><p>R语言的matrix和data.frame的区别：</p><ol><li> matrix：二维的数组，也就是里面只能储存一种类型的数据；data.frame：数据框，里面是多个一维的数据，也就是可以储存不同类型的数据。</li><li> 使用cbind()，rbind()，as.matirx()，matrix()生成的是matrix类型，而read.table()和data.frame()生成的是data.frame类型。</li><li> matrix不能使用$</li></ol><h3 id="奇淫技巧"><a href="#奇淫技巧" class="headerlink" title="奇淫技巧"></a>奇淫技巧</h3><h4 id="修改某一列的所有元素"><a href="#修改某一列的所有元素" class="headerlink" title="修改某一列的所有元素"></a>修改某一列的所有元素</h4><p>使用which对数据进行筛选，我觉得这个应该是内置了一个循环函数，对数据中所有的数据进行遍历进行修改。</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">df1$Q101E1[which(df1$Q101E1&#x3D;&#x3D;&quot;未上过学&quot;)]&lt;-&quot;未上过小学&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="如何解决csv文件中有空值而不是NA"><a href="#如何解决csv文件中有空值而不是NA" class="headerlink" title="如何解决csv文件中有空值而不是NA"></a>如何解决csv文件中有空值而不是NA</h4><p>这个只能在读取的时候进行处理，在读取的地方添加 na.strings = “”，这样读取出来的数据和Q101L1行一样，在R中就会转换为NA。</p><p><img src="http://pict.lanyun1103.top/typora/20201212230854.png" alt="image-20201212230846976"></p><pre class="line-numbers language-R" data-language="R"><code class="language-R">df2 &#x3D; read.csv(&quot;2017.csv&quot;,na.strings &#x3D; &quot;&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="xlabel90°旋转"><a href="#xlabel90°旋转" class="headerlink" title="xlabel90°旋转"></a>xlabel90°旋转</h4><pre class="line-numbers language-R" data-language="R"><code class="language-R">theme(axis.text.x&#x3D;element_text(angle&#x3D;90, size&#x3D;8))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据与人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX希腊字母</title>
      <link href="/2020/12/03/latex-xi-la-zi-mu/"/>
      <url>/2020/12/03/latex-xi-la-zi-mu/</url>
      
        <content type="html"><![CDATA[<p>希腊字母小写、大写</p><p>LaTeX形式</p><p>希腊字母小写、大写</p><p>LaTeX形式</p><p>α α A</p><p>\alpha A</p><p>μ μ <strong>_N\_</strong></p><p>\mu N</p><p>β β B</p><p>\beta B</p><p>ξ ξ ΞΞ</p><p>\xi \Xi</p><p>γ γ ΓΓ</p><p>\gamma \Gamma</p><p>o O</p><p>o O</p><p>δ δ ΔΔ</p><p>\delta \ Delta</p><p>π π ΠΠ</p><p>\pi \Pi</p><p><em>ϵ</em> ϵ εε E</p><p>\epsilon \varepsilon E</p><p>ρ ϱ P</p><p>\rho \varrho P</p><p>ζ ζ Z</p><p>\zeta Z</p><p>σσ ΣΣ</p><p>\sigma \Sigma</p><p>_η_η H</p><p>\eta H</p><p>_τ_τ <strong><em>T</em></strong></p><p>\tau T</p><p>_θ_θ _ϑ_ϑ ΘΘ</p><p>\theta \vartheta \Theta</p><p>_υ_υ ΥΥ</p><p>\upsilon \Upsilon</p><p>_ι_ι <strong>I</strong></p><p>\iota I</p><p>_ϕ_ϕ _φ_φ ΦΦ</p><p>\phi \varphi \Phi</p><p>_κ_κ <strong>K</strong></p><p>\kappa K</p><p>_χ_χ <strong><em>X</em></strong></p><p>\chi X</p><p>_λ_λ ΛΛ</p><p>\lambda \Lambda</p><p>_ψ_ψ ΨΨ</p><p>\psi \Psi</p><p>_μ_μ <strong>_M\_</strong></p><p>\mu M</p><p>_ω_ω ΩΩ</p><p>\omega \Omega</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kratos-3.2.1</title>
      <link href="/2020/11/09/kratos-3-2-1/"/>
      <url>/2020/11/09/kratos-3-2-1/</url>
      
        <content type="html"><![CDATA[<p>h1 { padding-top: 0.25em; padding-bottom: 0.25em; font-weight: normal; font-size:3em; text-align: center; } h2 { padding-top: 0.6em; padding-bottom: 0.6em; font-size:2.2em; font-weight: normal; text-align: center; } h3 { padding-top: 0.25em; padding-bottom: 0.25em; font-weight: normal; font-style: italic; font-size:1.6em; text-align: center; } h4 { padding-top: 0.25em; padding-bottom: 0.25em; font-size:1.2em; } hr { height: 2px; background-color: var(–text-color1); border: 0px; } /* list */ ul, ol { padding-left: 30px; } /* blockquote */ blockquote { border-left: 4px solid #45A9F9; padding: 4px 15px; color: hsl(220, 6%, 45%); } blockquote blockquote { padding-right: 0em; } /* table */ .md-rawblock &gt; .md-rawblock-container table, .md-table-fig, .md-table-fig:active { box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2); } table thead tr { background-color: var(–table-thead-color); } table tr th { font-weight: bold; border-left: 2px solid var(–table-border-color); border-right: 2px solid var(–table-border-color); text-align: left; margin: 0; padding: 6px 13px; } table tbody tr { border-top: 2px solid var(–table-border-color); margin: 0; padding: 0; } table tbody tr:nth-child(2n) { background-color: var(–table-bg-darker-color); } table tbody tr:nth-child(2n + 1) { background-color: var(–table-bg-color); } table tr td { border-left: 2px solid var(–table-border-color); border-right: 2px solid var(–table-border-color); text-align: left; margin: 0; padding: 6px 13px; } table tr th:first-child, table tr td:first-child { border-left-width: 0px; } table tr th:last-child, table tr td:last-child { border-right-width: 0px; } html { font-size: 16px; } body { font-family: “Open Sans”, “Clear Sans”, “Helvetica Neue”, Helvetica, Arial, sans-serif;  line-height: 1.6; }</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio 配置镜像</title>
      <link href="/2020/11/04/android-studio-pei-zhi-jing-xiang/"/>
      <url>/2020/11/04/android-studio-pei-zhi-jing-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-Studio-配置镜像"><a href="#Android-Studio-配置镜像" class="headerlink" title="Android Studio 配置镜像"></a>Android Studio 配置镜像</h1><h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><p>本地的user目录中存在.gradle文件夹，在里面新建一个文件，命名为init.gradle（用记事本创建即可），复制一下代码，重启Android studio即可。</p><pre class="line-numbers language-none"><code class="language-none">allprojects&#123;    repositories &#123;        def ALIYUN_REPOSITORY_URL &#x3D; &#39;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#39;        def ALIYUN_JCENTER_URL &#x3D; &#39;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;jcenter&#39;        all &#123; ArtifactRepository repo -&gt;            if(repo instanceof MavenArtifactRepository)&#123;                def url &#x3D; repo.url.toString()                if (url.startsWith(&#39;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#39;)  url.startsWith(&#39;http:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#39;)) &#123;                    project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot;                    remove repo                &#125;                if (url.startsWith(&#39;https:&#x2F;&#x2F;jcenter.bintray.com&#x2F;&#39;)  url.startsWith(&#39;http:&#x2F;&#x2F;jcenter.bintray.com&#x2F;&#39;)) &#123;                    project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL.&quot;                    remove repo                &#125;            &#125;        &#125;        maven &#123;            url ALIYUN_REPOSITORY_URL            url ALIYUN_JCENTER_URL        &#125;    &#125;    buildscript&#123;        repositories &#123;            def ALIYUN_REPOSITORY_URL &#x3D; &#39;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#39;            def ALIYUN_JCENTER_URL &#x3D; &#39;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;jcenter&#39;            all &#123; ArtifactRepository repo -&gt;                if(repo instanceof MavenArtifactRepository)&#123;                    def url &#x3D; repo.url.toString()                    if (url.startsWith(&#39;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#39;)  url.startsWith(&#39;http:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#39;)) &#123;                        project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot;                        remove repo                    &#125;                    if (url.startsWith(&#39;https:&#x2F;&#x2F;jcenter.bintray.com&#x2F;&#39;)  url.startsWith(&#39;http:&#x2F;&#x2F;jcenter.bintray.com&#x2F;&#39;)) &#123;                        project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL.&quot;                        remove repo                    &#125;                &#125;            &#125;            maven &#123;                url ALIYUN_REPOSITORY_URL                url ALIYUN_JCENTER_URL            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完后下载速度飞快。</p><h3 id="其他报错："><a href="#其他报错：" class="headerlink" title="其他报错："></a>其他报错：</h3><p>如果报错Connection refused: connect</p><p>很大可能是因为代理的问题。在同路径打开文件gradle.properties，把其中的所有有关代理全部注释掉</p><p><img src="http://pict.lanyun1103.top/typora/20201104083917.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20201104083917846"></p>]]></content>
      
      
      <categories>
          
          <category> APP应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重定向/转发、jsp传递信息、getAttribute与getParameter区别</title>
      <link href="/2020/10/26/chong-ding-xiang-zhuan-fa-jsp-chuan-di-xin-xi-getattribute-yu-getparameter-qu-bie/"/>
      <url>/2020/10/26/chong-ding-xiang-zhuan-fa-jsp-chuan-di-xin-xi-getattribute-yu-getparameter-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="管理系统疑问总结"><a href="#管理系统疑问总结" class="headerlink" title="管理系统疑问总结"></a>管理系统疑问总结</h1><h2 id="一、jsp之间的重定向-转发"><a href="#一、jsp之间的重定向-转发" class="headerlink" title="一、jsp之间的重定向/转发"></a>一、jsp之间的重定向/转发</h2><h3 id="1-重定向"><a href="#1-重定向" class="headerlink" title="1.重定向"></a>1.重定向</h3><p>重定向：</p><ol><li> 客户端自己改变</li><li> 改变地址栏地址</li><li> 无法传递值，至今没有发现如何传递</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"regRequest.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//或者</span><span class="token class-name">String</span> site <span class="token operator">=</span> <span class="token string">"http://www.runoob.com"</span> <span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>SC_MOVED_TEMPORARILY<span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">,</span> site<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-转发"><a href="#2-转发" class="headerlink" title="2.转发"></a>2.转发</h3><p>转发：</p><ol><li> 服务端为客户端完成页面传递</li><li> 地址栏不变</li><li> 信息可以传递</li></ol><h4 id="java代码："><a href="#java代码：" class="headerlink" title="java代码："></a>java代码：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"b.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="jsp代码："><a href="#jsp代码：" class="headerlink" title="jsp代码："></a>jsp代码：</h4><p>可以通过\<a href="jsp:param">jsp:param</a>传递参数，传递的目的文件必须是动态文件（jsp），含义与java代码基本相同</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:forward page&#x3D;&quot;b.jsp&quot;&gt;    &lt;jsp:param name&#x3D;&quot;name&quot; , value &#x3D;&quot;value&quot;&gt;&lt;&#x2F;jsp:param&gt;&lt;&#x2F;jsp:forward&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>跳转的界面可以通过以下获取传递来的数据</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">request.getParameter(&quot;name&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-跳转"><a href="#3-跳转" class="headerlink" title="3.跳转"></a>3.跳转</h3><p>以上两种都是jsp在运行到代码的时候就跳转，即自动跳转</p><p>在用了以上的很多之后，才发现如果想要实现<strong>点击跳转页面+传递数据</strong>，其实最好用的是html的\标签，既可以传递值，也没必要使用button标签添加一个累赘的按钮，现在的很多网页也是这么实现前端的携带信息跳转任务的</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;a href&#x3D;&quot;b.jsp+&lt;%&#x3D;name%&gt;&quot;&gt;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、关于如何在jsp文件之间互相传递信息"><a href="#二、关于如何在jsp文件之间互相传递信息" class="headerlink" title="二、关于如何在jsp文件之间互相传递信息"></a>二、关于如何在jsp文件之间互相传递信息</h2><h3 id="1-通过地址栏传递信息"><a href="#1-通过地址栏传递信息" class="headerlink" title="1.通过地址栏传递信息"></a>1.通过地址栏传递信息</h3><p>即在a.jsp文件中，使用跳转界面，在目的文件地址后方添加参数</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;a href&#x3D;&quot;get_index.jsp?number&#x3D;&lt;%&#x3D;number%&gt;&quot;&gt;点击跳转&lt;&#x2F;a&gt;   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-通过request传递参数"><a href="#2-通过request传递参数" class="headerlink" title="2.通过request传递参数"></a>2.通过request传递参数</h3><p>传递值的方法有很多种，页面重定向/转移的方法也有很多种，以上已经说过，如果需要自动跳转，传递本文件的内容，选择<strong>转发</strong>即可，但是在学习中发现存在一种问题。</p><p>如果在本文件中写了购买票务的底层逻辑，并且在本文件中转发给另一个文件，因为地址栏不变，这是服务器给你改变的网页内容，当你刷新的时候，又运行了一次底层的购买票务逻辑，票就会又少一张，这是很恐怖的结果，所以最方便的结果，就是把需要转发给其他文件的内容，通过地址栏传过去。这样另一个文件也可以通过request的方法获得网址中的参数。</p><p>a.jsp</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%request.setCharacterEncoding(&quot;UTF-8&quot;); %&gt;&lt;%request.setAttribute(&quot;name&quot;, &quot;李白&quot;); %&gt;&lt;jsp:forward page&#x3D;&quot;index.jsp&quot;&gt;&lt;&#x2F;jsp:forward&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>b.jsp</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%&#x3D;(String)request.getAttribute(&quot;name&quot;)%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、关于Attribute与Parameter的区别"><a href="#三、关于Attribute与Parameter的区别" class="headerlink" title="三、关于Attribute与Parameter的区别"></a>三、关于Attribute与Parameter的区别</h2><p>js中我们经常用到getAttribute和getParameter，两者都可以用来从其他文件获得数据，存在区别，这里总结一下</p><h3 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute()"></a>getAttribute()</h3><p>用来获得request域中的参数，可以理解成把数据放到request对象中放在服务器端，也就是说，想要get必须先set。可以实现多个文件中的数据共享。（但是重定向会重置这个request对象，不信可以试试，也就更符合了重定向无法传递信息）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="getParameter"><a href="#getParameter" class="headerlink" title="getParameter()"></a>getParameter()</h3><p>客户端与服务器端之间的单纯单方面信息交换，这个客户端的数据提交可以使用html的表单，也可以是其他任何可以传递信息的跳转网页方法，但是需要注意的是没有setParameter()这个方法，也就是这个方法就是单纯的获得客户端传来的参数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="返回值之间的区别"><a href="#返回值之间的区别" class="headerlink" title="返回值之间的区别"></a>返回值之间的区别</h3><ol><li> getParameter()获取的是客户端设置的数据。 getAttribute()获取的是服务器设置的数据。</li><li> getParameter()永远返回字符串 getAttribute()返回值是任意类型</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java_web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT版本控制总结</title>
      <link href="/2020/10/17/git-ban-ben-kong-zhi-zong-jie/"/>
      <url>/2020/10/17/git-ban-ben-kong-zhi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="GIT版本控制总结"><a href="#GIT版本控制总结" class="headerlink" title="GIT版本控制总结"></a>GIT版本控制总结</h1><h2 id="0-git流程"><a href="#0-git流程" class="headerlink" title="0.git流程"></a>0.git流程</h2><ol><li> 克隆仓库</li><li> 在工作目录中增删改文件</li><li> 暂存文件</li><li> 提交更新</li></ol><h2 id="1-提交文件："><a href="#1-提交文件：" class="headerlink" title="1.提交文件："></a>1.提交文件：</h2><p>本地操作</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git add ***.txt #暂存单个文件git add .       #批量暂存文件git status      #查看当前文件git commit -m <span class="token string">"context"</span>   #提交文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-查看提交记录："><a href="#2-查看提交记录：" class="headerlink" title="2.查看提交记录："></a>2.查看提交记录：</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">git log     #查看提交日志<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看当前文件与仓库文件之间区别："><a href="#查看当前文件与仓库文件之间区别：" class="headerlink" title="查看当前文件与仓库文件之间区别："></a>查看当前文件与仓库文件之间区别：</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git diff ***.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-git库管理策略"><a href="#3-git库管理策略" class="headerlink" title="3.git库管理策略"></a>3.git库管理策略</h2><p>Git之所以能实现分布式版本控制，就是基于其分支管理策略。本地库所做的操作都是在某分支上进行的，不同分支之间可以合并。可以拉取远程分支到本地，也可以推送本地分支到远程。</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git branch &lt;branchName> #创建新的分支git branch -d &lt;branchName> #删除已有分支git checkout &lt;branchName> #切换到其它分支上git merge &lt;branchName>    #合并branchName分支到当前分支上git branch -r           #查看远程分支git branch -a           #查看远程及本地的所有分支，当前分支前加<span class="token string">"*"</span>号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在git中，master作为主分支，不作为开发使用，只用来发布新版本，主分支也叫作版本分支。</p><p>所以通常在另一个develop分支上完成开发，如果想对外发布，则在master分支上对develop进行“合并”。</p><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment">#从master上分出一个develop分支</span>git checkout -b develop master <span class="token comment">#将develop分支合并到master分支的命令如下两个：</span><span class="token comment">#切换到master分支</span>git checkout master<span class="token comment">#对develop分支进行合并</span>git merge --no-ff develop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下会快速合并，意思是直接将master分支指向develop，而添加–no-ff正常合并，在master分支上生成一个新的节点。</p><h2 id="4-远程库向本地库同步："><a href="#4-远程库向本地库同步：" class="headerlink" title="4.远程库向本地库同步："></a>4.远程库向本地库同步：</h2><h3 id="4-1-克隆远程库到本地："><a href="#4-1-克隆远程库到本地：" class="headerlink" title="4.1 克隆远程库到本地："></a>4.1 克隆远程库到本地：</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone &lt;url.git>git clone &lt;ver_url.git> &lt;localurl.git>git clone -o 远程主机名 &lt;ver_url.git> &lt;localurl.git><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-2-拉取远程分支到本地并建立关联"><a href="#4-2-拉取远程分支到本地并建立关联" class="headerlink" title="4.2 拉取远程分支到本地并建立关联"></a>4.2 拉取远程分支到本地并建立关联</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git checkout -b 本地分支名 origin/远程分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-拉取远程分支并与本地分支合并"><a href="#4-3-拉取远程分支并与本地分支合并" class="headerlink" title="4.3 拉取远程分支并与本地分支合并"></a>4.3 拉取远程分支并与本地分支合并</h3><p>git pull命令先拉取远程分支到本地，再与本地指定的分支合并。</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git pull &lt;远程主机名> &lt;远程分支名>:&lt;本地分支名>git pull origin next:master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-本地向远程同步"><a href="#5-本地向远程同步" class="headerlink" title="5. 本地向远程同步"></a>5. 本地向远程同步</h2><h3 id="5-1-主机名管理"><a href="#5-1-主机名管理" class="headerlink" title="5.1 主机名管理"></a>5.1 主机名管理</h3><p>git 为了便于管理，每一个远程主机都需要指定一个主机名，即本地对远程主机名的映射。git remote用来管理这些</p><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment">#添加远程主机</span>git remote add &lt;远程主机名> &lt;网址><span class="token comment">#删除远程主机</span>git remote rm &lt;远程主机名><span class="token comment">#修改远程主机名</span>git remote rename &lt;原主机名> &lt;新主机名><span class="token comment">#查询远程主机</span><span class="token comment">#查询所有与本地库关联的远程主机名</span>git remote<span class="token comment">#查询所有与本地库关联的远程主机名及其地址</span>git remote –v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-本地分支推送到远程主机上"><a href="#5-2-本地分支推送到远程主机上" class="headerlink" title="5.2 本地分支推送到远程主机上"></a>5.2 本地分支推送到远程主机上</h3><p>本地分支有更新时，将本地推送到远程与之关联的分支上</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git push &lt;远程主机名> &lt;本地分支名>:&lt;远程分支名><span class="token comment">#推送master分支到origin主机的master分支上</span>git push origin master<span class="token comment">#本地分支为空，表示删除远程的master分支</span>git push origin :master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT本地配置</title>
      <link href="/2020/10/15/git-ben-di-pei-zhi/"/>
      <url>/2020/10/15/git-ben-di-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="GIT本地配置"><a href="#GIT本地配置" class="headerlink" title="GIT本地配置"></a>GIT本地配置</h1><p>每次换电脑都需要</p><h2 id="下载GIT："><a href="#下载GIT：" class="headerlink" title="下载GIT："></a>下载GIT：</h2><p><a href="https://git-scm.com/download/win">下载地址</a></p><p><img src="http://pict.lanyun1103.top/typora/20201015213717.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20201015213717259"></p><h2 id="本地GIT配置："><a href="#本地GIT配置：" class="headerlink" title="本地GIT配置："></a>本地GIT配置：</h2><h3 id="用户名配置"><a href="#用户名配置" class="headerlink" title="用户名配置"></a>用户名配置</h3><p>在桌面右键打开Git Bash，输入</p><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 配置用户名</span>git config --global user.name <span class="token string">"username"</span>    //（ <span class="token string">"username"</span>是自己的账户名，）<span class="token comment"># 配置邮箱</span>git config --global user.email <span class="token string">"username@email.com"</span>     //(<span class="token string">"username@email.com"</span>注册账号时用的邮箱)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这一步对之后的设置可有可无，但是对github来说为了统一用户名最好还是加上。</p><h3 id="在本地生成ssh"><a href="#在本地生成ssh" class="headerlink" title="在本地生成ssh"></a>在本地生成ssh</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开本地.ssh文件夹，打开id_rsa.pub文件，复制其中内容</p><p><img src="http://pict.lanyun1103.top/typora/20201015214936.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20201015214936128"></p><h3 id="配置Github-SSH"><a href="#配置Github-SSH" class="headerlink" title="配置Github SSH"></a>配置Github SSH</h3><p><img src="http://pict.lanyun1103.top/typora/20201015215103.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20201015215103021"></p><p>创建一个新的SSH，粘贴刚刚复制的本地SSH密钥。</p><h3 id="链接远程github服务器"><a href="#链接远程github服务器" class="headerlink" title="链接远程github服务器"></a>链接远程github服务器</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下载git库"><a href="#下载git库" class="headerlink" title="下载git库"></a>下载git库</h3><p>在github库中复制git库地址</p><p><img src="http://pict.lanyun1103.top/typora/20201015215315.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20201015215315731"></p><p>在桌面或者其他任何地方右键打开Git bash，输入</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone git@github.com:*******/*********.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可开始在本地下载库，作用和在github中下载zip是基本一样的。区别是：下载zip不包括.git文件夹，这个文件夹中包含了上传git的配置文件，如果使用zip下载文件，需要在文件夹中打开git bash，输入</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入后会把文件夹初始化作为git库</p><h3 id="上传、更新库"><a href="#上传、更新库" class="headerlink" title="上传、更新库"></a>上传、更新库</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment">#添加所有文件到本地</span>git add .<span class="token comment">#提交引号中内容作为备注的文件</span>git commit -m <span class="token string">"**"</span><span class="token comment">#上传到远程仓库</span>git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算器（HTML+CSS+JavaScript）</title>
      <link href="/2020/09/26/ji-suan-qi-htmlcssjavascript/"/>
      <url>/2020/09/26/ji-suan-qi-htmlcssjavascript/</url>
      
        <content type="html"><![CDATA[<h1 id="计算器（HTML-CSS-JavaScript）"><a href="#计算器（HTML-CSS-JavaScript）" class="headerlink" title="计算器（HTML+CSS+JavaScript）"></a>计算器（HTML+CSS+JavaScript）</h1><h2 id="实际界面展示："><a href="#实际界面展示：" class="headerlink" title="实际界面展示："></a>实际界面展示：</h2><p><img src="http://pict.lanyun1103.top/typora/20200926182152.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200926182151942"></p><h3 id="计算效果："><a href="#计算效果：" class="headerlink" title="计算效果："></a>计算效果：</h3><p><img src="http://pict.lanyun1103.top/typora/20200926182328.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200926182328246"></p><p><img src="http://pict.lanyun1103.top/typora/20200926182336.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200926182336732"></p><h2 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">border</span><span class="token punctuation">:</span>1px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> xx-large<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>res<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>+<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFunction(<span class="token punctuation">'</span>+<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>-<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFunction(<span class="token punctuation">'</span>-<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>/<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFunction(<span class="token punctuation">'</span>/<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>*<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFunction(<span class="token punctuation">'</span>*<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFunction(<span class="token punctuation">'</span>1<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>2<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFunction(<span class="token punctuation">'</span>2<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>3<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFunction(<span class="token punctuation">'</span>3<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>acc<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ac<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>acFun()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ac<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>4<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFunction(<span class="token punctuation">'</span>4<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>5<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFunction(<span class="token punctuation">'</span>5<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>6<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFunction(<span class="token punctuation">'</span>6<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>equal<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>=<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getRes()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>7<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFunction(<span class="token punctuation">'</span>7<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>8<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFunction(<span class="token punctuation">'</span>8<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>9<span class="token punctuation">'</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFunction(<span class="token punctuation">'</span>9<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">button</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> beige<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> xx-large<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#equal</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 160px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#acc</span><span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>116<span class="token punctuation">,</span> 51<span class="token punctuation">,</span> 27<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>num<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cur <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> cur<span class="token operator">+</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">acFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> Javascript </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结一些需要找东西</title>
      <link href="/2020/09/23/zong-jie-yi-xie-xu-yao-zhao-dong-xi/"/>
      <url>/2020/09/23/zong-jie-yi-xie-xu-yao-zhao-dong-xi/</url>
      
        <content type="html"><![CDATA[<p><a href="http://mirrors.aliyun.com/centos/7.8.2003/isos/x86_64/">阿里Centos7镜像</a></p>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言基础功能</title>
      <link href="/2020/09/18/r-yu-yan-ji-chu-gong-neng/"/>
      <url>/2020/09/18/r-yu-yan-ji-chu-gong-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="R语言基础功能"><a href="#R语言基础功能" class="headerlink" title="R语言基础功能"></a>R语言基础功能</h1><h2 id="0-安装R包以及查看如何使用"><a href="#0-安装R包以及查看如何使用" class="headerlink" title="0.安装R包以及查看如何使用"></a>0.安装R包以及查看如何使用</h2><pre class="line-numbers language-R" data-language="R"><code class="language-R">install.package(&quot;package_name&quot;)?package_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-数据集、向量、矩阵和数组"><a href="#1-数据集、向量、矩阵和数组" class="headerlink" title="1.数据集、向量、矩阵和数组"></a>1.数据集、向量、矩阵和数组</h2><pre class="line-numbers language-R" data-language="R"><code class="language-R">向量x &lt;- c(1,2,3,4);矩阵newMatrix &lt;- matrix(1:20,nrow &#x3D; 4);     [,1] [,2] [,3] [,4] [,5][1,]    1    5    9   13   17[2,]    2    6   10   14   18[3,]    3    7   11   15   19[4,]    4    8   12   16   20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>R语言中的数组是一个矩阵的推广形式，更类似于三维数组，以下为创建四个3*2的矩阵</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; d &lt;-array(1:24,c(3,2,4),dimnames &#x3D; list(dim1,dim2,dim3))&gt; d, , c1   b1 b2a1  1  4a2  2  5a3  3  6, , c2   b1 b2a1  7 10a2  8 11a3  9 12, , c3   b1 b2a1 13 16a2 14 17a3 15 18, , c4   b1 b2a1 19 22a2 20 23a3 21 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-数据框"><a href="#2-数据框" class="headerlink" title="2.数据框"></a>2.数据框</h2><p>可以创建所含元素数量相同的数据框</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; patientData &#x3D; data.frame(id,age,dias,status)&gt; patientData  id age  dias    status1  1  24 type1      poor2  2  25 type2  improved3  3  26 type3 excellent4  4  27 type4      poor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得其中的值</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">patientData$age<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以通过直接访问元素的值取出</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">attach(mtcars)#attach之后可以直接访问数据集中的数据，例如访问mpgmpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-因子"><a href="#3-因子" class="headerlink" title="3.因子"></a>3.因子</h2><p>可以看下面代码输出的结果知道factor的用处</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; diab &lt;- c(&quot;type1&quot;,&quot;type2&quot;,&quot;type3&quot;,&quot;type2&quot;)&gt; diabs &lt;- factor(diab)&gt; diabs[1] type1 type2 type3 type2Levels: type1 type2 type3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4.常用命令"></a>4.常用命令</h2><pre class="line-numbers language-R" data-language="R"><code class="language-R">#删除rm(data)#查看文件ls()#查看长度length()#查看类型mode(v)#求根号sqrt(s)#筛选数据x[x&lt;&#x3D;2  x&gt;5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-导入数据"><a href="#5-导入数据" class="headerlink" title="5.导入数据"></a>5.导入数据</h2><h3 id="1-创建可修改数据框"><a href="#1-创建可修改数据框" class="headerlink" title="1.创建可修改数据框"></a>1.创建可修改数据框</h3><pre class="line-numbers language-R" data-language="R"><code class="language-R">&gt; mydata &lt;- data.frame(age &#x3D; numeric(0),+ gender &#x3D; character(0),+ weight &#x3D; numeric(0))&gt; mydata &lt;- edit(mydata)&gt; mydata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-读取文本文件"><a href="#2-读取文本文件" class="headerlink" title="2.读取文本文件"></a>2.读取文本文件</h3><pre class="line-numbers language-R" data-language="R"><code class="language-R">#读取txt或xlsxdata &lt;- read.table(&quot;file_dir&quot;, header &#x3D; TRUE,sep &#x3D; &quot;,&quot;)#读取csv文件data &lt;- read.csv(&quot;file_dir&quot;, header &#x3D; TRUE,sep &#x3D; &quot;,&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最好可以读取ASCII码编码的文件</p><h2 id="6-R自定义函数"><a href="#6-R自定义函数" class="headerlink" title="6.R自定义函数"></a>6.R自定义函数</h2><pre class="line-numbers language-R" data-language="R"><code class="language-R">mydate &lt;- function(type)&#123;switch(type,long &#x3D; format(sys.time(),&quot;%A %B %d %Y&quot;)short &#x3D; format(sys.time(),&quot;%m-%d-%y&quot;), cat(type,&quot; is not recognized type\n&quot;))&#125;#定义完成后，可以使用fix进行修改fix(mydata)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据与人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建自己的图库（typora+picgo+阿里oss）</title>
      <link href="/2020/08/31/chuang-jian-zi-ji-de-tu-ku-typorapicgo-a-li-oss/"/>
      <url>/2020/08/31/chuang-jian-zi-ji-de-tu-ku-typorapicgo-a-li-oss/</url>
      
        <content type="html"><![CDATA[<h1 id="创建自己的图库"><a href="#创建自己的图库" class="headerlink" title="创建自己的图库"></a>创建自己的图库</h1><h2 id="1-购买阿里云oss"><a href="#1-购买阿里云oss" class="headerlink" title="1.购买阿里云oss"></a>1.购买阿里云oss</h2><p><a href="https://common-buy.aliyun.com/?commodityCode=ossbag#/buy">阿里云oss购买地址</a></p><p><img src="http://pict.lanyun1103.top/typora/20200831111516.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200831111516750"></p><p>阿里云的oss空间是很便宜的，贵在oss的流量费用和请求费用</p><p><img src="http://pict.lanyun1103.top/typora/20200831111829.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200831111829765"></p><p>购买后创建bucket，如果是通过typora+picgo进行嵌入图片操作，那么需要把这里的<strong>读写权限改成公共读</strong>，上传的权限可以自己设置成私人RAM用户可操作oss，如果设置成私有的话typora是无法读取图片的，即无法边编辑文章边看到文章中的图片。</p><p><img src="http://pict.lanyun1103.top/typora/20200831111850.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200831111850558"></p><h3 id="创建RAM用户"><a href="#创建RAM用户" class="headerlink" title="创建RAM用户"></a>创建RAM用户</h3><p>创建用户-&gt;添加对oss操作的所有权限，这一步很简单，也很麻烦。</p><p>要注意的是创建之后会有<strong>用户的access key，和密钥</strong>，在之后会有用，除了创建时能看到，之后就只能重新创建了。</p><p><img src="http://pict.lanyun1103.top/typora/20200831112322.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200831112322007"></p><h2 id="2-下载picgo"><a href="#2-下载picgo" class="headerlink" title="2.下载picgo"></a>2.下载picgo</h2><p><img src="http://pict.lanyun1103.top/typora/20200831111149.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200831111149755"></p><p>以下是完整的设置，踩过很多坑，keyid和keysecret为ram用户的accessi key和密钥</p><p><img src="http://pict.lanyun1103.top/typora/20200831114208.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200831114208255"></p><p><strong>储存区域</strong>一定得是这里，网上很多教程笼统的把后面的也加上了，基本都是复制粘贴的。</p><p><img src="http://pict.lanyun1103.top/typora/20200831114342.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200831114342932"></p><h2 id="3-在typora中设置"><a href="#3-在typora中设置" class="headerlink" title="3.在typora中设置"></a>3.在typora中设置</h2><p><img src="http://pict.lanyun1103.top/typora/20200831115748.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200831115747938"></p><p>设置完这两个之后，就可以截图粘贴，自动上传图片了。</p><p>其实typora是一个微型的浏览器，在typora中shift + f12就可以打开typora的类似于chrome的监视器，如果不能显示图片，可以再network中查看文件报错代码。</p><p><img src="http://pict.lanyun1103.top/typora/20200831115843.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200831115843389"></p>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 使用类《C++ primer plus》</title>
      <link href="/2020/08/31/c-shi-yong-lei-c-primer-plus/"/>
      <url>/2020/08/31/c-shi-yong-lei-c-primer-plus/</url>
      
        <content type="html"><![CDATA[<h1 id="C-使用类"><a href="#C-使用类" class="headerlink" title="C++ 使用类"></a>C++ 使用类</h1><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p>运算符重载的意义在于可以对对象之间进行运算符操作，例如</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Time ;Time time1;Time time2;time1 + time2;time1 - time2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码的核心在于</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;t为传来的参数，因为是用于对象之间的操作，参数是一个传来的对象Time Time::operator+(const Time&amp; t)const &#123;    &#x2F;&#x2F;新建一个sum对象    Time sum;    &#x2F;&#x2F;本对象即为minutes，t.minutes为传来参数的时间    sum.minutes &#x3D; minutes + t.minutes;    sum.hours &#x3D; hours + t.hours + sum.minutes &#x2F; 60;    sum.minutes %&#x3D; 60;    return sum;&#125;&#x2F;&#x2F;这里猜测有前后顺序，加号后面的是传来的参数，可能会导致不能颠倒顺序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef STACK_H#define STACK_H#include&lt;iostream&gt;class Time &#123;    int hours;    int minutes;public:    Time();    Time(int h, int m &#x3D; 0);    void Addmin(int min);    void AddHr(int h);    void Reset(int h &#x3D; 0, int m &#x3D; 0);    Time operator + (const Time&amp; t)const;    void Show() const;&#125;;#endif <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类方法定义"><a href="#类方法定义" class="headerlink" title="类方法定义"></a>类方法定义</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;stack.h&quot;Time::Time() &#123;    hours &#x3D; minutes &#x3D; 0;&#125;Time::Time(int h, int m) &#123;    hours &#x3D; h;    minutes &#x3D; m;&#125;void Time::Addmin(int m) &#123;    minutes +&#x3D; m;    hours +&#x3D; minutes &#x2F; 60;    minutes % 60;&#125;void Time::AddHr(int h) &#123;    hours +&#x3D; h;&#125;void Time::Reset(int h, int m) &#123;    hours &#x3D; h;    minutes &#x3D; m;&#125;Time Time::operator+(const Time&amp; t)const &#123;    Time sum;    sum.minutes &#x3D; minutes + t.minutes;    sum.hours &#x3D; hours + t.hours + sum.minutes &#x2F; 60;    sum.minutes %&#x3D; 60;    return sum;&#125;void Time::Show() const &#123;    std::cout &lt;&lt; hours &lt;&lt; &quot;hours&quot; &lt;&lt; minutes &lt;&lt; &quot;minutes&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主函数使用"><a href="#主函数使用" class="headerlink" title="主函数使用"></a>主函数使用</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;stack.h&quot;#include&lt;iostream&gt;int main() &#123;    using namespace std;    Time planning;    Time coding(2, 40);    Time fixing(5, 55);    Time total;    cout &lt;&lt; &quot;planning time &#x3D; &quot;;    planning.Show();    cout &lt;&lt; endl;    cout &lt;&lt; &quot;coding time &#x3D; &quot;;    coding.Show();    cout &lt;&lt; endl;    cout &lt;&lt; &quot;fixing time &#x3D; &quot;;    fixing.Show();    cout &lt;&lt; endl;    total &#x3D; coding + fixing;    cout &lt;&lt; &quot;coding time + fixing time &#x3D; &quot;;    total.Show();    cout &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><p>友元的意义： 在类重载二元运算符时，常常需要友元，例如把Time对象乘以实数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span> <span class="token operator">=</span> <span class="token class-name">B</span> <span class="token operator">*</span> <span class="token number">2.75</span><span class="token punctuation">;</span><span class="token comment">//被转换成</span><span class="token class-name">A</span> <span class="token operator">=</span> <span class="token class-name">B</span><span class="token punctuation">.</span>operator<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2.75</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是如果是</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">2.75</span> <span class="token operator">*</span> <span class="token class-name">B</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么验证了我上面的猜想，这种方法是有左右顺序的，左边的操作数应该是调用对象。 但是这样的话，左边需要调用类的<strong>私有数据</strong>，但是根据C++的语言特性，一个常规的非成员函数是不能调用类的私有数据的，这就引出了友元函数——可以调用类的私有数据的函数。</p><h3 id="创建友元"><a href="#创建友元" class="headerlink" title="创建友元"></a>创建友元</h3><p>声明友元函数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;goes in class declarationfriend Time operator*(double m ,const Time &amp; t);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>定义函数，需要注意的是前面不需要加上friend 和 Time::，因为这不是一个成员函数，直接定义即可。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Time operator * (double m, const Time &amp; t)&#123;    Time res;    long totalminutes &#x3D; t.hours * mult * 60 + t.minutes* mult;    result.hours &#x3D; totalminutes&#x2F;60;    result.minutes &#x3D; totalminutes%60;    return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以用来重载&lt;&lt;来格式化输出</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void operator &lt;&lt; (ostream &amp; os,const Time &amp; t)&#123;    os &lt;&lt; t.hours &lt;&lt; &quot; hours,&quot; &lt;&lt; t.minutes &lt;&lt; &quot; minutes.&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用这种方法重写&lt;&lt;来进行输出会导致无法进行</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout &lt;&lt; t.hours &lt;&lt; &quot; hours.&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于c++特性，cout语句从左到右执行，需要重写的方法返回ostream类才可以继续进行右边的输出</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;definefriend std::ostream&amp; operator &lt;&lt; (std::ostream&amp; os, const Time&amp; t);&#x2F;&#x2F;declarestd::ostream&amp; operator &lt;&lt; (std::ostream&amp; os, const Time&amp; t) &#123;    os &lt;&lt; t.hours &lt;&lt; &quot; hours &quot; &lt;&lt; t.minutes &lt;&lt; &quot; minutes&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类的自动转换和强制转换"><a href="#类的自动转换和强制转换" class="headerlink" title="类的自动转换和强制转换"></a>类的自动转换和强制转换</h2><h3 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">long count &#x3D; 90;double time &#x3D; 80;int side &#x3D; 8.33;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对于类来说，如果不通过正常的创建类的方式</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Time time1 &#x3D; Time(1,2);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而是通过</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Time time;time &#x3D; 19;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时可以看出这种方法不可以同时接受两个参数，也就是构造方法只能有一个参数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Time(int time)&#123;    time_ &#x3D; time;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如何解决呢，这里可以使用默认参数的方法，解决需要创建两个方法来区分单个参数和多个参数的问题</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Time(int hours ,int minutes &#x3D; 0)&#123;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Time time1;time1 &#x3D; 12;time2 &#x3D; Time(12);time3 &#x3D; (Time)12;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h3><p>转换函数用来把类转换成基础数据类型</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;declareoperator typeName();&#x2F;&#x2F;defineTime::operator double() &#123;    return stone;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>所有的代码，《C++ primer plus》中对于类的使用的基本所有代码，理解完所有的语句以及书中所有的注意事项</p><h3 id="stack-h"><a href="#stack-h" class="headerlink" title="stack.h"></a>stack.h</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef STACK_H#define STACK_H#include&lt;iostream&gt;class Time &#123;    int hours;    int minutes;    double stone;public:    &#x2F;&#x2F;construct    Time();    Time(int h, int m &#x3D; 0);    Time(double stone);    &#x2F;&#x2F;fun    void Addmin(int min);    void AddHr(int h);    void Reset(int h &#x3D; 0, int m &#x3D; 0);    &#x2F;&#x2F;operator declare    Time operator + (const Time&amp; t)const;    Time operator * (int n)const;    &#x2F;&#x2F;show fun    void Show() const;    void Showstone() const;    &#x2F;&#x2F;friends    friend Time operator *(int n, const Time&amp; t);    friend std::ostream&amp; operator &lt;&lt; (std::ostream&amp; os, const Time&amp; t);    &#x2F;&#x2F;turnner    operator double();&#125;;#endif <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="stack-cpp"><a href="#stack-cpp" class="headerlink" title="stack.cpp"></a>stack.cpp</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;stack.h&quot;Time::Time() &#123;    hours &#x3D; minutes &#x3D; 0;&#125;Time::Time(int h, int m) &#123;    hours &#x3D; h;    minutes &#x3D; m;&#125;Time::Time(double stone_in) &#123;    hours &#x3D; 0;    minutes &#x3D; 0;    stone &#x3D; stone_in;&#125;void Time::Addmin(int m) &#123;    minutes +&#x3D; m;    hours +&#x3D; minutes &#x2F; 60;    minutes % 60;&#125;void Time::AddHr(int h) &#123;    hours +&#x3D; h;&#125;void Time::Reset(int h, int m) &#123;    hours &#x3D; h;    minutes &#x3D; m;&#125;Time Time::operator+(const Time&amp; t)const &#123;    Time sum;    sum.minutes &#x3D; minutes + t.minutes;    sum.hours &#x3D; hours + t.hours + sum.minutes &#x2F; 60;    sum.minutes %&#x3D; 60;    return sum;&#125;Time Time::operator*(int n)const &#123;    Time result;    long totalminutes &#x3D; hours * n * 60 + minutes * n;    result.hours &#x3D; totalminutes &#x2F; 60;    result.minutes &#x3D; totalminutes % 60;    return result;&#125;void Time::Show() const &#123;    std::cout &lt;&lt; hours &lt;&lt; &quot;hours&quot; &lt;&lt; minutes &lt;&lt; &quot;minutes&quot;;&#125;void Time::Showstone() const &#123;    std::cout &lt;&lt; stone;&#125;Time operator * (int n, const Time&amp; t) &#123;    return t * n;&#125;std::ostream&amp; operator &lt;&lt; (std::ostream&amp; os, const Time&amp; t) &#123;    os &lt;&lt; t.hours &lt;&lt; &quot; hours &quot; &lt;&lt; t.minutes &lt;&lt; &quot; minutes&quot;;    return os;&#125;Time::operator double() &#123;    return stone;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mainer-cpp"><a href="#mainer-cpp" class="headerlink" title="mainer.cpp"></a>mainer.cpp</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&quot;stack.h&quot;#include&lt;iostream&gt;int main() &#123;    using namespace std;    Time planning;    Time coding(2, 40);    Time fixing(5, 55);    Time total;    cout &lt;&lt; &quot;planning time &#x3D; &quot;;    planning.Show();    cout &lt;&lt; endl;    cout &lt;&lt; &quot;coding time &#x3D; &quot;;    coding.Show();    cout &lt;&lt; endl;    cout &lt;&lt; &quot;fixing time &#x3D; &quot;;    fixing.Show();    cout &lt;&lt; endl;    total &#x3D; coding + fixing;    cout &lt;&lt; &quot;coding time + fixing time &#x3D; &quot;;    total.Show();    cout &lt;&lt; endl;    Time time1 &#x3D; 12.0;    time1.Showstone();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一年</title>
      <link href="/2020/08/26/yi-nian/"/>
      <url>/2020/08/26/yi-nian/</url>
      
        <content type="html"><![CDATA[<h2 id="一年"><a href="#一年" class="headerlink" title="一年"></a>一年</h2><p>不知怎么的，好像终于结束了</p><p>2019年6月20日-2020年8月28日，从来没有经历过这么长的假期，终于要结束了。</p><p>我还记得当时在火车站，说着“如果上不了学，那就在家学习”的话，甚至位置都记得清清楚楚。我以为我可以甩别人一大截，可是在这返校前两天， 我能感觉到一股来自内心深处的悲伤，或者通俗点说是遗憾。</p><p>这一年多我当然没有把每一天都用在学习上，却成为了别人眼中比较喜欢学习的一类人。我在不学习的日子的夜晚感到后悔，又在第二天的早晨把时间荒废。</p><p>在这一年我把大一想做的事做完了大半，分了手，再后来做了自己的博客，给自己电脑升了级，有时间就写写博客，不过大部分其实都是给自己看的。</p><p>八月份没有怎么写博客，主要原因还是要开学了，抓紧和朋友聚了聚，学了车子，晒得比吴彦祖黑却没有他一分帅，可恶。</p><p>如果一个人只拥有技术，它只能作社畜。乔布斯的格局很大，从他的话中能看出来，他不仅仅是一个技术人，他还有野心，还有一个作为苹果CEO该有的情商。</p><p>说话技巧不是与生俱来的，我们需要被打磨成一个圆润的石头。</p><p>接下来的日子就会在学校度过了，之后会把每个月的每周计划列出来在博客，写给自己看，如果有朋友恰巧看到计划，也算是作为一个参考。</p>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断回文子串总结</title>
      <link href="/2020/08/19/pan-duan-hui-wen-zi-chuan-zong-jie/"/>
      <url>/2020/08/19/pan-duan-hui-wen-zi-chuan-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="判断回文子串："><a href="#判断回文子串：" class="headerlink" title="判断回文子串："></a>判断回文子串：</h2><p>这个博文用来总结在leetcode遇到的所有回文子串类题目</p><h2 id="总结方法："><a href="#总结方法：" class="headerlink" title="总结方法："></a>总结方法：</h2><p>1.枚举出所有的子串，再判断这些子串是否是回文</p><p>2.枚举每一个回文中心，向两边扩散，两边指针相同就继续扩散，不相同就停止。</p><p>3.马拉车，这个算法就挺离谱的，由于可以在线性时间内求出回文子串个数还是很有用处的。</p><h2 id="经典题目："><a href="#经典题目：" class="headerlink" title="经典题目："></a>经典题目：</h2><h3 id="1-回文子串（每日一题0819）"><a href="#1-回文子串（每日一题0819）" class="headerlink" title="1.回文子串（每日一题0819）"></a>1.回文子串（每日一题0819）</h3><p><img src="http://pict.lanyun1103.top/typora/20200819112944.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200819112944298"></p><h4 id="解题方法1"><a href="#解题方法1" class="headerlink" title="解题方法1"></a>解题方法1</h4><p>使用回文中心解法：</p><p>这个解法最重要的解决的问题是需要找到回文中心的位置，而因为一个字符串会分为奇数和偶数，在奇书状态下只需要最中间位置的一个字符作为回文中心，而偶数状态下需要中间位置的两个字符作为回文中心，引入以下图片</p><p><img src="http://pict.lanyun1103.top/typora/20200819114713.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200819114713770"></p><p>作者为官方题解：LeetCode-Solution 链接：<a href="https://leetcode-cn.com/problems/palindromic-substrings/solution/hui-wen-zi-chuan-by-leetcode-solution/">https://leetcode-cn.com/problems/palindromic-substrings/solution/hui-wen-zi-chuan-by-leetcode-solution/</a></p><p>可以得到<img src="http://pict.lanyun1103.top/typora/20200819114811.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200819114811692"></p><p>因此代码为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countSubstrings</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//这一步可以不需要</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> l <span class="token operator">+</span> i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> n<span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                l<span class="token operator">--</span><span class="token punctuation">;</span>                r<span class="token operator">++</span><span class="token punctuation">;</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解题方法2"><a href="#解题方法2" class="headerlink" title="解题方法2"></a>解题方法2</h4><p>马拉车算法</p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>0805每日一题：打家劫舍</title>
      <link href="/2020/08/05/0805-mei-ri-yi-ti-da-jia-jie-she/"/>
      <url>/2020/08/05/0805-mei-ri-yi-ti-da-jia-jie-she/</url>
      
        <content type="html"><![CDATA[<h2 id="0805每日一题：打家劫舍"><a href="#0805每日一题：打家劫舍" class="headerlink" title="0805每日一题：打家劫舍"></a>0805每日一题：打家劫舍</h2><h4 id="337-打家劫舍-III"><a href="#337-打家劫舍-III" class="headerlink" title="337. 打家劫舍 III"></a><a href="https://leetcode-cn.com/problems/house-robber-iii/">337. 打家劫舍 III</a></h4><p>难度中等522</p><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p><p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p><p><img src="http://pict.lanyun1103.top/typora/20200805224055.png?x-oss-process=image/auto-orient,1/resize,p_81/quality,q_80/sharpen,98/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_10,g_se,x_10,y_10" alt="image-20200805224055803"></p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>这题第一眼一看就是二叉树的动态规划，但是我自己对二叉树的了解是不多的，尤其对子树的递归我非常容易混淆，所以我在写完这题之后还写了几个其他的二叉树题目。</p><p>先说说这题的思路：</p><p>从对题目的了解中可以首先得知，一个节点（房子）有两种可能：被打劫，不被打劫。并且由题目中说，不可以打劫相邻的两个房子，所以就有了一下两个情况:</p><ul><li>  被打劫：因为自己的两个儿子不能被打劫，所以遍历自己两个儿子不被打劫的情况+自己值</li><li>  不被打劫：自己的两个儿子[被打劫，不被打劫]中较大的值（递归）</li></ul><p>由此其实对递归的了解更多了，递归其实就是字面意思，逐渐的归并，从最底层往外层，_但是写的时候得是从最外层往最里层想_。<strong>你需要把外层的逻辑写出来了，内层的只要交给计算机去运行就可以了</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for a binary tree node. * public class TreeNode &#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &#123; val = x; &#125; * &#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//res数组储存这个结点是否被打劫的情况</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//left遍历所有左节点</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**        res[0]：本节点不被打劫，那么这个条件下的最佳情况——是两个孩子节点在[不被打劫，被打劫]条件下的最佳情况        res[1]：本节点被打劫，那么这个条件下的最佳情况——是这个结点左右孩子[不被打劫]情况下的最佳情况加上这个结点本身的值        **/</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mathematica符号与数值计算命令大全</title>
      <link href="/2020/08/05/mathematica-fu-hao-yu-shu-zhi-ji-suan-ming-ling-da-quan/"/>
      <url>/2020/08/05/mathematica-fu-hao-yu-shu-zhi-ji-suan-ming-ling-da-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="Mathematica符号与数值计算命令大全"><a href="#Mathematica符号与数值计算命令大全" class="headerlink" title="Mathematica符号与数值计算命令大全"></a>Mathematica符号与数值计算命令大全</h1><p>基本都是链接，不会的可以直接到官网看，这个博文可以作为一个字典，忘记命令的时候来看看</p><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><h3 id="数学常量-»"><a href="#数学常量-»" class="headerlink" title="数学常量 »"></a><a href="https://reference.wolfram.com/language/guide/MathematicalConstants.html">数学常量 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Pi.html">Pi</a>(<a href="https://reference.wolfram.com/language/ref/Pi.html">π</a>) ▪ <a href="https://reference.wolfram.com/language/ref/E.html">E</a>(<a href="https://reference.wolfram.com/language/ref/E.html"></a>) ▪ <a href="https://reference.wolfram.com/language/ref/Degree.html">Degree</a>(<a href="https://reference.wolfram.com/language/ref/Degree.html">°</a>) ▪ <a href="https://reference.wolfram.com/language/ref/EulerGamma.html">EulerGamma</a> ▪ <a href="https://reference.wolfram.com/language/guide/MathematicalConstants.html">…</a></p><h3 id="复数-»"><a href="#复数-»" class="headerlink" title="复数 »"></a><a href="https://reference.wolfram.com/language/guide/ComplexNumbers.html">复数 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/I.html">I</a>(<a href="https://reference.wolfram.com/language/ref/I.html"></a>) ▪ <a href="https://reference.wolfram.com/language/ref/Re.html">Re</a> ▪ <a href="https://reference.wolfram.com/language/ref/Im.html">Im</a> ▪ <a href="https://reference.wolfram.com/language/ref/Conjugate.html">Conjugate</a> ▪ <a href="https://reference.wolfram.com/language/ref/Abs.html">Abs</a> ▪ <a href="https://reference.wolfram.com/language/ref/Arg.html">Arg</a> ▪ <a href="https://reference.wolfram.com/language/guide/ComplexNumbers.html">…</a></p><h3 id="算术函数-»"><a href="#算术函数-»" class="headerlink" title="算术函数 »"></a><a href="https://reference.wolfram.com/language/guide/ArithmeticFunctions.html">算术函数 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Plus.html">Plus</a>(<a href="https://reference.wolfram.com/language/ref/Plus.html">+</a>) ▪ <a href="https://reference.wolfram.com/language/ref/Times.html">Times</a>(<a href="https://reference.wolfram.com/language/ref/Times.html">×</a>) ▪ <a href="https://reference.wolfram.com/language/ref/Power.html">Power</a>(<a href="https://reference.wolfram.com/language/ref/Power.html">^</a>) ▪ <a href="https://reference.wolfram.com/language/ref/Sqrt.html">Sqrt</a> ▪ <a href="https://reference.wolfram.com/language/ref/Total.html">Total</a> ▪ <a href="https://reference.wolfram.com/language/guide/ArithmeticFunctions.html">…</a></p><h3 id="数值函数-»"><a href="#数值函数-»" class="headerlink" title="数值函数 »"></a><a href="https://reference.wolfram.com/language/guide/NumericalFunctions.html">数值函数 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Abs.html">Abs</a> ▪ <a href="https://reference.wolfram.com/language/ref/Round.html">Round</a> ▪ <a href="https://reference.wolfram.com/language/ref/Floor.html">Floor</a> ▪ <a href="https://reference.wolfram.com/language/ref/Min.html">Min</a> ▪ <a href="https://reference.wolfram.com/language/ref/Max.html">Max</a> ▪ <a href="https://reference.wolfram.com/language/ref/Clip.html">Clip</a> ▪ <a href="https://reference.wolfram.com/language/ref/Ramp.html">Ramp</a> ▪ <a href="https://reference.wolfram.com/language/ref/Rescale.html">Rescale</a> ▪ <a href="https://reference.wolfram.com/language/ref/SquareWave.html">SquareWave</a> ▪ <a href="https://reference.wolfram.com/language/guide/NumericalFunctions.html">…</a></p><h3 id="初等函数-»"><a href="#初等函数-»" class="headerlink" title="初等函数 »"></a><a href="https://reference.wolfram.com/language/guide/ElementaryFunctions.html">初等函数 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Log.html">Log</a> ▪ <a href="https://reference.wolfram.com/language/ref/Log10.html">Log10</a> ▪ <a href="https://reference.wolfram.com/language/ref/Exp.html">Exp</a> ▪ <a href="https://reference.wolfram.com/language/ref/Sqrt.html">Sqrt</a> ▪ <a href="https://reference.wolfram.com/language/ref/Sin.html">Sin</a> ▪ <a href="https://reference.wolfram.com/language/ref/Cos.html">Cos</a> ▪ <a href="https://reference.wolfram.com/language/ref/Tan.html">Tan</a> ▪ <a href="https://reference.wolfram.com/language/ref/ArcTan.html">ArcTan</a> ▪ <a href="https://reference.wolfram.com/language/ref/Tanh.html">Tanh</a> ▪ <a href="https://reference.wolfram.com/language/ref/Sinc.html">Sinc</a> ▪ <a href="https://reference.wolfram.com/language/guide/ElementaryFunctions.html">…</a></p><h3 id="特殊函数-»"><a href="#特殊函数-»" class="headerlink" title="特殊函数 »"></a><a href="https://reference.wolfram.com/language/guide/SpecialFunctions.html">特殊函数 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Gamma.html">Gamma</a> ▪ <a href="https://reference.wolfram.com/language/ref/Erf.html">Erf</a> ▪ <a href="https://reference.wolfram.com/language/ref/BesselJ.html">BesselJ</a> ▪ <a href="https://reference.wolfram.com/language/ref/BesselK.html">BesselK</a> ▪ <a href="https://reference.wolfram.com/language/ref/AiryAi.html">AiryAi</a> ▪ <a href="https://reference.wolfram.com/language/ref/EllipticK.html">EllipticK</a> ▪ <a href="https://reference.wolfram.com/language/ref/LegendreP.html">LegendreP</a> ▪ <a href="https://reference.wolfram.com/language/ref/ChebyshevT.html">ChebyshevT</a> ▪ <a href="https://reference.wolfram.com/language/ref/HermiteH.html">HermiteH</a> ▪ <a href="https://reference.wolfram.com/language/ref/LaguerreL.html">LaguerreL</a> ▪ <a href="https://reference.wolfram.com/language/ref/SpheroidalS1.html">SpheroidalS1</a> ▪ <a href="https://reference.wolfram.com/language/ref/JacobiSN.html">JacobiSN</a> ▪ <a href="https://reference.wolfram.com/language/ref/WeierstrassP.html">WeierstrassP</a> ▪ <a href="https://reference.wolfram.com/language/ref/Zeta.html">Zeta</a> ▪ <a href="https://reference.wolfram.com/language/ref/PolyLog.html">PolyLog</a> ▪ <a href="https://reference.wolfram.com/language/ref/EllipticTheta.html">EllipticTheta</a> ▪ <a href="https://reference.wolfram.com/language/ref/Hypergeometric2F1.html">Hypergeometric2F1</a> ▪ <a href="https://reference.wolfram.com/language/ref/HypergeometricPFQ.html">HypergeometricPFQ</a> ▪ <a href="https://reference.wolfram.com/language/ref/MeijerG.html">MeijerG</a> ▪ <a href="https://reference.wolfram.com/language/ref/AppellF1.html">AppellF1</a> ▪ <a href="https://reference.wolfram.com/language/guide/SpecialFunctions.html">…</a></p><h3 id="广义函数-»"><a href="#广义函数-»" class="headerlink" title="广义函数 »"></a><a href="https://reference.wolfram.com/language/guide/GeneralizedFunctions.html">广义函数 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/DiracDelta.html">DiracDelta</a> ▪ <a href="https://reference.wolfram.com/language/ref/HeavisideTheta.html">HeavisideTheta</a> ▪ <a href="https://reference.wolfram.com/language/ref/DiracComb.html">DiracComb</a> ▪ <a href="https://reference.wolfram.com/language/guide/GeneralizedFunctions.html">…</a></p><h3 id="整数函数-»"><a href="#整数函数-»" class="headerlink" title="整数函数 »"></a><a href="https://reference.wolfram.com/language/guide/IntegerFunctions.html">整数函数 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Mod.html">Mod</a> ▪ <a href="https://reference.wolfram.com/language/ref/Quotient.html">Quotient</a> ▪ <a href="https://reference.wolfram.com/language/ref/Divisible.html">Divisible</a> ▪ <a href="https://reference.wolfram.com/language/ref/GCD.html">GCD</a> ▪ <a href="https://reference.wolfram.com/language/ref/Factorial.html">Factorial</a>(<a href="https://reference.wolfram.com/language/ref/Factorial.html">!</a>) ▪ <a href="https://reference.wolfram.com/language/ref/Binomial.html">Binomial</a> ▪ <a href="https://reference.wolfram.com/language/ref/Fibonacci.html">Fibonacci</a> ▪ <a href="https://reference.wolfram.com/language/ref/BernoulliB.html">BernoulliB</a> ▪ <a href="https://reference.wolfram.com/language/ref/StirlingS1.html">StirlingS1</a> ▪ <a href="https://reference.wolfram.com/language/ref/IntegerDigits.html">IntegerDigits</a> ▪ <a href="https://reference.wolfram.com/language/ref/DigitCount.html">DigitCount</a> ▪ <a href="https://reference.wolfram.com/language/ref/BitAnd.html">BitAnd</a> ▪ <a href="https://reference.wolfram.com/language/guide/IntegerFunctions.html">…</a></p><h3 id="数论函数-»"><a href="#数论函数-»" class="headerlink" title="数论函数 »"></a><a href="https://reference.wolfram.com/language/guide/NumberTheoreticFunctions.html">数论函数 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/FactorInteger.html">FactorInteger</a> ▪ <a href="https://reference.wolfram.com/language/ref/Prime.html">Prime</a> ▪ <a href="https://reference.wolfram.com/language/ref/PrimePi.html">PrimePi</a> ▪ <a href="https://reference.wolfram.com/language/ref/EulerPhi.html">EulerPhi</a> ▪ <a href="https://reference.wolfram.com/language/ref/MoebiusMu.html">MoebiusMu</a> ▪ <a href="https://reference.wolfram.com/language/ref/DivisorSigma.html">DivisorSigma</a> ▪ <a href="https://reference.wolfram.com/language/ref/JacobiSymbol.html">JacobiSymbol</a> ▪ <a href="https://reference.wolfram.com/language/ref/MultiplicativeOrder.html">MultiplicativeOrder</a> ▪ <a href="https://reference.wolfram.com/language/ref/PartitionsP.html">PartitionsP</a> ▪ <a href="https://reference.wolfram.com/language/ref/SquaresR.html">SquaresR</a> ▪ <a href="https://reference.wolfram.com/language/ref/DirichletL.html">DirichletL</a> ▪ <a href="https://reference.wolfram.com/language/guide/NumberTheoreticFunctions.html">…</a></p><h3 id="参数统计分布-»"><a href="#参数统计分布-»" class="headerlink" title="参数统计分布 »"></a><a href="https://reference.wolfram.com/language/guide/ParametricStatisticalDistributions.html">参数统计分布 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/NormalDistribution.html">NormalDistribution</a> ▪ <a href="https://reference.wolfram.com/language/ref/ChiSquareDistribution.html">ChiSquareDistribution</a> ▪ <a href="https://reference.wolfram.com/language/ref/PoissonDistribution.html">PoissonDistribution</a> ▪ <a href="https://reference.wolfram.com/language/guide/ParametricStatisticalDistributions.html">…</a></p><h3 id="随机数-»"><a href="#随机数-»" class="headerlink" title="随机数 »"></a><a href="https://reference.wolfram.com/language/guide/RandomNumberGeneration.html">随机数 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/RandomInteger.html">RandomInteger</a> ▪ <a href="https://reference.wolfram.com/language/ref/RandomReal.html">RandomReal</a> ▪ <a href="https://reference.wolfram.com/language/ref/RandomChoice.html">RandomChoice</a> ▪ <a href="https://reference.wolfram.com/language/ref/RandomPrime.html">RandomPrime</a></p><h3 id="信号函数-»"><a href="#信号函数-»" class="headerlink" title="信号函数 »"></a><a href="https://reference.wolfram.com/language/guide/NumericalFunctions.html">信号函数 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/SquareWave.html">SquareWave</a> ▪ <a href="https://reference.wolfram.com/language/ref/TriangleWave.html">TriangleWave</a> ▪ <a href="https://reference.wolfram.com/language/ref/UnitBox.html">UnitBox</a> ▪ <a href="https://reference.wolfram.com/language/guide/NumericalFunctions.html">…</a></p><h3 id="与分形相关的函数-»"><a href="#与分形相关的函数-»" class="headerlink" title="与分形相关的函数 »"></a><a href="https://reference.wolfram.com/language/guide/IteratedMapsAndFractals.html">与分形相关的函数 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/MandelbrotSetMemberQ.html">MandelbrotSetMemberQ</a> ▪ <a href="https://reference.wolfram.com/language/ref/JuliaSetIterationCount.html">JuliaSetIterationCount</a> ▪ <a href="https://reference.wolfram.com/language/ref/CantorStaircase.html">CantorStaircase</a> ▪ <a href="https://reference.wolfram.com/language/guide/IteratedMapsAndFractals.html">…</a></p><p><a href="https://reference.wolfram.com/language/ref/N.html">N</a> — 任意精度的数值计算</p><p><a href="https://reference.wolfram.com/language/ref/FunctionExpand.html">FunctionExpand</a> — 展开为简单函数</p><p><a href="https://reference.wolfram.com/language/ref/FullSimplify.html">FullSimplify</a> — 应用全部的符号化简</p><p><a href="https://reference.wolfram.com/language/ref/MathematicalFunctionData.html">MathematicalFunctionData</a> — 数学函数的属性和关系</p><h2 id="数据计算和精度"><a href="#数据计算和精度" class="headerlink" title="数据计算和精度"></a>数据计算和精度</h2><p><a href="https://reference.wolfram.com/language/ref/N.html">N</a> — 任意精度的数值计算</p><h3 id="主要的数值函数"><a href="#主要的数值函数" class="headerlink" title="主要的数值函数"></a>主要的数值函数</h3><p><a href="https://reference.wolfram.com/language/ref/NSolve.html">NSolve</a> ▪ <a href="https://reference.wolfram.com/language/ref/NDSolve.html">NDSolve</a> ▪ <a href="https://reference.wolfram.com/language/ref/NIntegrate.html">NIntegrate</a> ▪ <a href="https://reference.wolfram.com/language/ref/NMinimize.html">NMinimize</a> ▪ <a href="https://reference.wolfram.com/language/ref/NSum.html">NSum</a></p><h3 id="复数-»-1"><a href="#复数-»-1" class="headerlink" title="复数 »"></a><a href="https://reference.wolfram.com/language/guide/ComplexNumbers.html">复数 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/I.html">I</a>(<a href="https://reference.wolfram.com/language/ref/I.html"></a>) ▪ <a href="https://reference.wolfram.com/language/ref/Abs.html">Abs</a> ▪ <a href="https://reference.wolfram.com/language/ref/Re.html">Re</a> ▪ <a href="https://reference.wolfram.com/language/ref/Im.html">Im</a> ▪ <a href="https://reference.wolfram.com/language/ref/Conjugate.html">Conjugate</a> ▪ <a href="https://reference.wolfram.com/language/guide/ComplexNumbers.html">…</a></p><h3 id="数字表示-»"><a href="#数字表示-»" class="headerlink" title="数字表示 »"></a><a href="https://reference.wolfram.com/language/guide/RepresentationOfNumbers.html">数字表示 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/IntegerDigits.html">IntegerDigits</a> ▪ <a href="https://reference.wolfram.com/language/ref/RealDigits.html">RealDigits</a> ▪ <a href="https://reference.wolfram.com/language/ref/FromDigits.html">FromDigits</a> ▪ <a href="https://reference.wolfram.com/language/ref/IntegerQ.html">IntegerQ</a> ▪ <a href="https://reference.wolfram.com/language/guide/RepresentationOfNumbers.html">…</a></p><h3 id="数字显示-»"><a href="#数字显示-»" class="headerlink" title="数字显示 »"></a><a href="https://reference.wolfram.com/language/guide/DisplayOfNumbers.html">数字显示 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/NumberForm.html">NumberForm</a> ▪ <a href="https://reference.wolfram.com/language/ref/NumberMarks.html">NumberMarks</a> ▪ <a href="https://reference.wolfram.com/language/ref/InputForm.html">InputForm</a> ▪ <a href="https://reference.wolfram.com/language/ref/CForm.html">CForm</a> ▪ <a href="https://reference.wolfram.com/language/guide/DisplayOfNumbers.html">…</a></p><h3 id="精度和准确度控制-»"><a href="#精度和准确度控制-»" class="headerlink" title="精度和准确度控制 »"></a><a href="https://reference.wolfram.com/language/guide/PrecisionAndAccuracyControl.html">精度和准确度控制 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Precision.html">Precision</a> ▪ <a href="https://reference.wolfram.com/language/ref/Accuracy.html">Accuracy</a> ▪ <a href="https://reference.wolfram.com/language/ref/PrecisionGoal.html">PrecisionGoal</a> ▪ <a href="https://reference.wolfram.com/language/ref/AccuracyGoal.html">AccuracyGoal</a> ▪ <a href="https://reference.wolfram.com/language/guide/PrecisionAndAccuracyControl.html">…</a></p><h3 id="算法控制和分析"><a href="#算法控制和分析" class="headerlink" title="算法控制和分析"></a>算法控制和分析</h3><p><a href="https://reference.wolfram.com/language/ref/Method.html">Method</a> ▪ <a href="https://reference.wolfram.com/language/ref/StepMonitor.html">StepMonitor</a> ▪ <a href="https://reference.wolfram.com/language/ref/EvaluationMonitor.html">EvaluationMonitor</a> ▪ <a href="https://reference.wolfram.com/language/ref/Norm.html">Norm</a></p><h2 id="矩阵与线性代数"><a href="#矩阵与线性代数" class="headerlink" title="矩阵与线性代数"></a>矩阵与线性代数</h2><h3 id="向量操作-»"><a href="#向量操作-»" class="headerlink" title="向量操作 »"></a><a href="https://reference.wolfram.com/language/guide/OperationsOnVectors.html">向量操作 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Plus.html">+</a>, <a href="https://reference.wolfram.com/language/ref/Times.html">*</a>, <a href="https://reference.wolfram.com/language/ref/Power.html">^</a>, <a href="https://reference.wolfram.com/language/guide/OperationsOnVectors.html">…</a> — 自动按元素作用: {<em>a</em>,<em>b</em>}+{<em>c</em>,<em>d</em>}-&gt;{<em>a</em>+<em>c</em>,<em>b</em>+<em>d</em>}</p><p><a href="https://reference.wolfram.com/language/ref/Dot.html">Dot</a> (<a href="https://reference.wolfram.com/language/ref/Dot.html">.</a>) — 标量点积</p><p><a href="https://reference.wolfram.com/language/ref/Cross.html">Cross</a> ▪ <a href="https://reference.wolfram.com/language/ref/Norm.html">Norm</a> ▪ <a href="https://reference.wolfram.com/language/ref/Total.html">Total</a> ▪ <a href="https://reference.wolfram.com/language/ref/Normalize.html">Normalize</a></p><p><a href="https://reference.wolfram.com/language/ref/Normalize.html">Normalize</a>[_v_]</p><p>给出向量 <em>v</em> 的归一化格式.</p><p><a href="https://reference.wolfram.com/language/ref/Normalize.html">Normalize</a>[_z_]</p><p>给出复数 <em>z</em> 的归一化格式.</p><p><a href="https://reference.wolfram.com/language/ref/Normalize.html">Normalize</a>[<em>expr</em>,_f_]</p><p>相对于norm 函数 <em>f</em> 归一化.</p><p>▪ <a href="https://reference.wolfram.com/language/ref/Projection.html">Projection</a> ▪ <a href="https://reference.wolfram.com/language/ref/Orthogonalize.html">Orthogonalize</a> ▪ <a href="https://reference.wolfram.com/language/guide/OperationsOnVectors.html">…</a></p><h3 id="构造矩阵-»"><a href="#构造矩阵-»" class="headerlink" title="构造矩阵 »"></a><a href="https://reference.wolfram.com/language/guide/ConstructingMatrices.html">构造矩阵 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Table.html">Table</a> — 按表达式构建矩阵</p><p><a href="https://reference.wolfram.com/language/ref/IdentityMatrix.html">IdentityMatrix</a> ▪ <a href="https://reference.wolfram.com/language/ref/DiagonalMatrix.html">DiagonalMatrix</a> ▪ <a href="https://reference.wolfram.com/language/ref/RotationMatrix.html">RotationMatrix</a> ▪ <a href="https://reference.wolfram.com/language/ref/HilbertMatrix.html">HilbertMatrix</a> ▪ <a href="https://reference.wolfram.com/language/guide/ConstructingMatrices.html">…</a></p><h3 id="子矩阵-»"><a href="#子矩阵-»" class="headerlink" title="子矩阵 »"></a><a href="https://reference.wolfram.com/language/guide/PartsOfMatrices.html">子矩阵 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Part.html">Part</a> — 部分或子矩阵：_m_[[<em>i</em>,_j_]]；用 _m_[[<em>i</em>,_j_]]=<em>x</em> 重新设置</p><p><a href="https://reference.wolfram.com/language/ref/Dimensions.html">Dimensions</a> ▪ <a href="https://reference.wolfram.com/language/ref/Take.html">Take</a> ▪ <a href="https://reference.wolfram.com/language/ref/Drop.html">Drop</a> ▪ <a href="https://reference.wolfram.com/language/ref/Diagonal.html">Diagonal</a> ▪ <a href="https://reference.wolfram.com/language/ref/Position.html">Position</a> ▪ <a href="https://reference.wolfram.com/language/ref/UpperTriangularize.html">UpperTriangularize</a> ▪ <a href="https://reference.wolfram.com/language/guide/PartsOfMatrices.html">…</a></p><h3 id="矩阵运算-»"><a href="#矩阵运算-»" class="headerlink" title="矩阵运算 »"></a><a href="https://reference.wolfram.com/language/guide/MatrixOperations.html">矩阵运算 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Dot.html">Dot</a>(<a href="https://reference.wolfram.com/language/ref/Dot.html">.</a>) ▪ <a href="https://reference.wolfram.com/language/ref/Inverse.html">Inverse</a> ▪ <a href="https://reference.wolfram.com/language/ref/Transpose.html">Transpose</a> ▪ <a href="https://reference.wolfram.com/language/ref/Det.html">Det</a> ▪ <a href="https://reference.wolfram.com/language/ref/Tr.html">Tr</a> ▪ <a href="https://reference.wolfram.com/language/ref/Eigenvalues.html">Eigenvalues</a> ▪ <a href="https://reference.wolfram.com/language/ref/MatrixExp.html">MatrixExp</a> ▪ <a href="https://reference.wolfram.com/language/guide/MatrixOperations.html">…</a></p><h3 id="线性系统-»"><a href="#线性系统-»" class="headerlink" title="线性系统 »"></a><a href="https://reference.wolfram.com/language/guide/LinearSystems.html">线性系统 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/LinearSolve.html">LinearSolve</a> ▪ <a href="https://reference.wolfram.com/language/ref/NullSpace.html">NullSpace</a> ▪ <a href="https://reference.wolfram.com/language/ref/MatrixRank.html">MatrixRank</a> ▪ <a href="https://reference.wolfram.com/language/ref/RowReduce.html">RowReduce</a> ▪ <a href="https://reference.wolfram.com/language/ref/Minors.html">Minors</a> ▪ <a href="https://reference.wolfram.com/language/guide/LinearSystems.html">…</a></p><h3 id="基于矩阵的最小化-»"><a href="#基于矩阵的最小化-»" class="headerlink" title="基于矩阵的最小化 »"></a><a href="https://reference.wolfram.com/language/guide/MatrixBasedMinimization.html">基于矩阵的最小化 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/LeastSquares.html">LeastSquares</a> ▪ <a href="https://reference.wolfram.com/language/ref/PseudoInverse.html">PseudoInverse</a> ▪ <a href="https://reference.wolfram.com/language/ref/Norm.html">Norm</a> ▪ <a href="https://reference.wolfram.com/language/ref/LinearProgramming.html">LinearProgramming</a> ▪ <a href="https://reference.wolfram.com/language/guide/MatrixBasedMinimization.html">…</a></p><h3 id="矩阵分解-»"><a href="#矩阵分解-»" class="headerlink" title="矩阵分解 »"></a><a href="https://reference.wolfram.com/language/guide/MatrixDecompositions.html">矩阵分解 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/SingularValueDecomposition.html">SingularValueDecomposition</a> ▪ <a href="https://reference.wolfram.com/language/ref/QRDecomposition.html">QRDecomposition</a> ▪ <a href="https://reference.wolfram.com/language/ref/LUDecomposition.html">LUDecomposition</a> ▪ <a href="https://reference.wolfram.com/language/ref/CholeskyDecomposition.html">CholeskyDecomposition</a> ▪ <a href="https://reference.wolfram.com/language/ref/SchurDecomposition.html">SchurDecomposition</a> ▪ <a href="https://reference.wolfram.com/language/guide/MatrixDecompositions.html">…</a></p><p><a href="https://reference.wolfram.com/language/ref/PrincipalComponents.html">PrincipalComponents</a> ▪ <a href="https://reference.wolfram.com/language/ref/KarhunenLoeveDecomposition.html">KarhunenLoeveDecomposition</a> ▪ <a href="https://reference.wolfram.com/language/guide/MatrixDecompositions.html">…</a></p><h3 id="矩阵判断-»"><a href="#矩阵判断-»" class="headerlink" title="矩阵判断 »"></a><a href="https://reference.wolfram.com/language/guide/MatrixPredicates.html">矩阵判断 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/MatrixQ.html">MatrixQ</a> ▪ <a href="https://reference.wolfram.com/language/ref/DiagonalMatrixQ.html">DiagonalMatrixQ</a> ▪ <a href="https://reference.wolfram.com/language/ref/UpperTriangularMatrixQ.html">UpperTriangularMatrixQ</a> ▪ <a href="https://reference.wolfram.com/language/ref/SymmetricMatrixQ.html">SymmetricMatrixQ</a> ▪ <a href="https://reference.wolfram.com/language/ref/PositiveDefiniteMatrixQ.html">PositiveDefiniteMatrixQ</a> ▪ <a href="https://reference.wolfram.com/language/guide/MatrixPredicates.html">…</a></p><h3 id="随机矩阵-»"><a href="#随机矩阵-»" class="headerlink" title="随机矩阵 »"></a><a href="https://reference.wolfram.com/language/guide/MatrixDistributions.html">随机矩阵 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/RandomVariate.html">RandomVariate</a> ▪ <a href="https://reference.wolfram.com/language/ref/WishartMatrixDistribution.html">WishartMatrixDistribution</a> ▪ <a href="https://reference.wolfram.com/language/ref/MatrixPropertyDistribution.html">MatrixPropertyDistribution</a> ▪ <a href="https://reference.wolfram.com/language/guide/MatrixDistributions.html">…</a></p><h3 id="显示矩阵"><a href="#显示矩阵" class="headerlink" title="显示矩阵"></a>显示矩阵</h3><p><a href="https://reference.wolfram.com/language/ref/MatrixForm.html">MatrixForm</a> — 二维形式显示矩阵</p><p><a href="https://reference.wolfram.com/language/ref/MatrixPlot.html">MatrixPlot</a> — 着色元素，可视化一个矩阵</p><h3 id="稀疏数组-»"><a href="#稀疏数组-»" class="headerlink" title="稀疏数组 »"></a><a href="https://reference.wolfram.com/language/guide/SparseArrays.html">稀疏数组 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/SparseArray.html">SparseArray</a> — 从坐标和值方面构建一个稀疏矩阵</p><p><a href="https://reference.wolfram.com/language/ref/ArrayRules.html">ArrayRules</a> ▪ <a href="https://reference.wolfram.com/language/ref/Normal.html">Normal</a> ▪ <a href="https://reference.wolfram.com/language/ref/CoefficientArrays.html">CoefficientArrays</a> ▪ <a href="https://reference.wolfram.com/language/guide/SparseArrays.html">…</a></p><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><p><a href="https://reference.wolfram.com/language/ref/format/CSV.html">“CSV”</a> ▪ <a href="https://reference.wolfram.com/language/ref/format/HDF.html">“HDF”</a> ▪ <a href="https://reference.wolfram.com/language/ref/format/MAT.html">“MAT”</a> ▪ <a href="https://reference.wolfram.com/language/ref/format/MTX.html">“MTX”</a> ▪ <a href="https://reference.wolfram.com/language/ref/format/HarwellBoeing.html">“HarwellBoeing”</a> ▪ …</p><h2 id="公式处理"><a href="#公式处理" class="headerlink" title="公式处理"></a>公式处理</h2><p><a href="https://reference.wolfram.com/language/ref/Simplify.html">Simplify</a> — 化简，可能带有变量假定</p><p><a href="https://reference.wolfram.com/language/ref/FullSimplify.html">FullSimplify</a> — 应用完全的化简过程</p><p><a href="https://reference.wolfram.com/language/ref/FunctionExpand.html">FunctionExpand</a> — 更多初等函数的展开</p><p><a href="https://reference.wolfram.com/language/ref/Expand.html">Expand</a> — 展开代数表达式</p><p><a href="https://reference.wolfram.com/language/ref/Factor.html">Factor</a> — 代数表达式的因子</p><p><a href="https://reference.wolfram.com/language/ref/Reduce.html">Reduce</a> — 化简等式和不等式</p><p><a href="https://reference.wolfram.com/language/ref/Series.html">Series</a> — 求出一个级数近似值</p><h3 id="提取公式的部分"><a href="#提取公式的部分" class="headerlink" title="提取公式的部分"></a>提取公式的部分</h3><p><a href="https://reference.wolfram.com/language/ref/Coefficient.html">Coefficient</a> ▪ <a href="https://reference.wolfram.com/language/ref/Exponent.html">Exponent</a> ▪ <a href="https://reference.wolfram.com/language/ref/Part.html">Part</a> ▪ <a href="https://reference.wolfram.com/language/ref/Numerator.html">Numerator</a> ▪ <a href="https://reference.wolfram.com/language/ref/Denominator.html">Denominator</a></p><h3 id="公式整理"><a href="#公式整理" class="headerlink" title="公式整理"></a>公式整理</h3><p><a href="https://reference.wolfram.com/language/ref/Collect.html">Collect</a> ▪ <a href="https://reference.wolfram.com/language/ref/Together.html">Together</a> ▪ <a href="https://reference.wolfram.com/language/ref/Apart.html">Apart</a> ▪ <a href="https://reference.wolfram.com/language/ref/Cancel.html">Cancel</a></p><h3 id="等式变换"><a href="#等式变换" class="headerlink" title="等式变换"></a>等式变换</h3><p><a href="https://reference.wolfram.com/language/ref/AddSides.html">AddSides</a> ▪ <a href="https://reference.wolfram.com/language/ref/SubtractSides.html">SubtractSides</a> ▪ <a href="https://reference.wolfram.com/language/ref/MultiplySides.html">MultiplySides</a> ▪ <a href="https://reference.wolfram.com/language/ref/DivideSides.html">DivideSides</a> ▪ <a href="https://reference.wolfram.com/language/ref/ApplySides.html">ApplySides</a></p><h3 id="代数转换-»"><a href="#代数转换-»" class="headerlink" title="代数转换 »"></a><a href="https://reference.wolfram.com/language/guide/AlgebraicTransformations.html">代数转换 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/PowerExpand.html">PowerExpand</a> ▪ <a href="https://reference.wolfram.com/language/ref/ComplexExpand.html">ComplexExpand</a> ▪ <a href="https://reference.wolfram.com/language/ref/TrigExpand.html">TrigExpand</a> ▪ <a href="https://reference.wolfram.com/language/ref/RootReduce.html">RootReduce</a> ▪ <a href="https://reference.wolfram.com/language/ref/ComplexityFunction.html">ComplexityFunction</a> ▪ <a href="https://reference.wolfram.com/language/guide/AlgebraicTransformations.html">…</a></p><h3 id="公式测试"><a href="#公式测试" class="headerlink" title="公式测试"></a>公式测试</h3><p><a href="https://reference.wolfram.com/language/ref/Equal.html">Equal</a>(<a href="https://reference.wolfram.com/language/ref/Equal.html">==</a>) ▪ <a href="https://reference.wolfram.com/language/ref/Element.html">Element</a> ▪ <a href="https://reference.wolfram.com/language/ref/PossibleZeroQ.html">PossibleZeroQ</a></p><h3 id="假定说明和域-»"><a href="#假定说明和域-»" class="headerlink" title="假定说明和域 »"></a><a href="https://reference.wolfram.com/language/guide/AssumptionsAndDomains.html">假定说明和域 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Refine.html">Refine</a> ▪ <a href="https://reference.wolfram.com/language/ref/Assuming.html">Assuming</a> ▪ <a href="https://reference.wolfram.com/language/ref/ForAll.html">ForAll</a> ▪ <a href="https://reference.wolfram.com/language/ref/Integers.html">Integers</a> ▪ <a href="https://reference.wolfram.com/language/ref/Reals.html">Reals</a> ▪ <a href="https://reference.wolfram.com/language/guide/AssumptionsAndDomains.html">…</a></p><p><a href="https://reference.wolfram.com/language/ref/TraditionalForm.html">TraditionalForm</a> — 以传统数学符号来显示一个公式</p><h2 id="方程求解"><a href="#方程求解" class="headerlink" title="方程求解"></a>方程求解</h2><p><a href="https://reference.wolfram.com/language/ref/Solve.html">Solve</a> — 求解方程和方程组</p><p><a href="https://reference.wolfram.com/language/ref/NSolve.html">NSolve</a> — 方程和方程组的数值解</p><p><a href="https://reference.wolfram.com/language/ref/FindRoot.html">FindRoot</a> — 给出初值，求出方程的一个数值解</p><p><a href="https://reference.wolfram.com/language/ref/AsymptoticSolve.html">AsymptoticSolve</a> — 渐近逼近代数方程</p><p><a href="https://reference.wolfram.com/language/ref/DSolve.html">DSolve</a> — 微分、延迟与混合方程的精确解</p><p><a href="https://reference.wolfram.com/language/ref/NDSolve.html">NDSolve</a> — 微分、延迟与混合方程的数值解</p><p><a href="https://reference.wolfram.com/language/ref/ParametricNDSolve.html">ParametricNDSolve</a> — 带有参数的微分方程的数值解</p><p><a href="https://reference.wolfram.com/language/ref/AsymptoticDSolveValue.html">AsymptoticDSolveValue</a> — 微分方程的渐近解</p><p><a href="https://reference.wolfram.com/language/ref/RSolve.html">RSolve</a> — 求递推和函数式方程的解</p><p><a href="https://reference.wolfram.com/language/ref/RecurrenceTable.html">RecurrenceTable</a> — 递推和函数式方程的解答表</p><p><a href="https://reference.wolfram.com/language/ref/AsymptoticRSolveValue.html">AsymptoticRSolveValue</a> — 递归方程的渐近解</p><p><a href="https://reference.wolfram.com/language/ref/FindInstance.html">FindInstance</a> — 求出等式和不等式的特解</p><p><a href="https://reference.wolfram.com/language/ref/Reduce.html">Reduce</a> — 等式和不等式的化简</p><p><a href="https://reference.wolfram.com/language/ref/LinearSolve.html">LinearSolve</a> — 求解矩阵形式的线性解</p><p><a href="https://reference.wolfram.com/language/ref/FrobeniusSolve.html">FrobeniusSolve</a> ▪ <a href="https://reference.wolfram.com/language/ref/LyapunovSolve.html">LyapunovSolve</a> ▪ <a href="https://reference.wolfram.com/language/ref/DiscreteLyapunovSolve.html">DiscreteLyapunovSolve</a> ▪ <a href="https://reference.wolfram.com/language/ref/RiccatiSolve.html">RiccatiSolve</a> ▪ <a href="https://reference.wolfram.com/language/ref/DiscreteRiccatiSolve.html">DiscreteRiccatiSolve</a></p><p><a href="https://reference.wolfram.com/language/ref/ContourPlot.html">ContourPlot</a>, <a href="https://reference.wolfram.com/language/ref/ContourPlot3D.html">ContourPlot3D</a> — 绘制解的曲线和表面</p><p><a href="https://reference.wolfram.com/language/ref/RegionPlot.html">RegionPlot</a>, <a href="https://reference.wolfram.com/language/ref/RegionPlot3D.html">RegionPlot3D</a> — 绘制满足不等式的区域</p><h2 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h2><p><a href="https://reference.wolfram.com/language/ref/D.html">D</a> (<a href="https://reference.wolfram.com/language/ref/D.html">∂</a>) — 标量函数或向量函数的偏导数</p><p><a href="https://reference.wolfram.com/language/ref/Dt.html">Dt</a> — 全导数</p><p><a href="https://reference.wolfram.com/language/ref/Integrate.html">Integrate</a> (<a href="https://reference.wolfram.com/language/ref/Integrate.html">∫</a>) — 一重或多重的符号积分</p><h3 id="向量微积分-»"><a href="#向量微积分-»" class="headerlink" title="向量微积分 »"></a><a href="https://reference.wolfram.com/language/guide/VectorAnalysis.html">向量微积分 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Grad.html">Grad</a> ▪ <a href="https://reference.wolfram.com/language/ref/Div.html">Div</a> ▪ <a href="https://reference.wolfram.com/language/ref/Curl.html">Curl</a> ▪ <a href="https://reference.wolfram.com/language/ref/Laplacian.html">Laplacian</a> ▪ <a href="https://reference.wolfram.com/language/guide/VectorAnalysis.html">…</a></p><p><a href="https://reference.wolfram.com/language/ref/CoordinateChartData.html">CoordinateChartData</a> — 曲线坐标中的计算</p><p><a href="https://reference.wolfram.com/language/ref/Series.html">Series</a> — 幂级数和渐近展开 <a href="https://reference.wolfram.com/language/guide/SeriesExpansions.html">»</a></p><p><a href="https://reference.wolfram.com/language/ref/Limit.html">Limit</a> — 有向和无向极限，单变量和多变量</p><p><a href="https://reference.wolfram.com/language/ref/MinLimit.html">MinLimit</a>, <a href="https://reference.wolfram.com/language/ref/MaxLimit.html">MaxLimit</a> — 下限和上限</p><p><a href="https://reference.wolfram.com/language/ref/DSolve.html">DSolve</a> — 微分方程的符号解</p><p><a href="https://reference.wolfram.com/language/ref/Minimize.html">Minimize</a>, <a href="https://reference.wolfram.com/language/ref/Maximize.html">Maximize</a> — 符号最优化</p><h3 id="离散微积分-»"><a href="#离散微积分-»" class="headerlink" title="离散微积分 »"></a><a href="https://reference.wolfram.com/language/guide/DiscreteCalculus.html">离散微积分 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Sum.html">Sum</a>, <a href="https://reference.wolfram.com/language/ref/Product.html">Product</a> — 符号之和与乘积</p><p><a href="https://reference.wolfram.com/language/ref/DifferenceQuotient.html">DifferenceQuotient</a> ▪ <a href="https://reference.wolfram.com/language/ref/DifferenceDelta.html">DifferenceDelta</a> ▪ <a href="https://reference.wolfram.com/language/ref/DiscreteLimit.html">DiscreteLimit</a> ▪ <a href="https://reference.wolfram.com/language/ref/RSolve.html">RSolve</a> ▪ <a href="https://reference.wolfram.com/language/guide/DiscreteCalculus.html">…</a></p><h3 id="数值计算和精度»"><a href="#数值计算和精度»" class="headerlink" title="数值计算和精度»"></a><a href="https://reference.wolfram.com/language/guide/NumericalEvaluationAndPrecision.html">数值计算和精度»</a></h3><p><a href="https://reference.wolfram.com/language/ref/NIntegrate.html">NIntegrate</a> ▪ <a href="https://reference.wolfram.com/language/ref/NDSolve.html">NDSolve</a> ▪ <a href="https://reference.wolfram.com/language/ref/NMinimize.html">NMinimize</a> ▪ <a href="https://reference.wolfram.com/language/ref/NSum.html">NSum</a> ▪ <a href="https://reference.wolfram.com/language/guide/NumericalEvaluationAndPrecision.html">…</a></p><h3 id="渐进微积分-»"><a href="#渐进微积分-»" class="headerlink" title="渐进微积分 »"></a><a href="https://reference.wolfram.com/language/guide/Asymptotics.html">渐进微积分 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/AsymptoticIntegrate.html">AsymptoticIntegrate</a> ▪ <a href="https://reference.wolfram.com/language/ref/AsymptoticDSolveValue.html">AsymptoticDSolveValue</a> ▪ <a href="https://reference.wolfram.com/language/ref/AsymptoticSum.html">AsymptoticSum</a> ▪ <a href="https://reference.wolfram.com/language/ref/AsymptoticRSolveValue.html">AsymptoticRSolveValue</a> ▪ <a href="https://reference.wolfram.com/language/guide/Asymptotics.html">…</a></p><h3 id="积分变换»"><a href="#积分变换»" class="headerlink" title="积分变换»"></a><a href="https://reference.wolfram.com/language/guide/IntegralTransforms.html">积分变换»</a></h3><p><a href="https://reference.wolfram.com/language/ref/LaplaceTransform.html">LaplaceTransform</a> ▪ <a href="https://reference.wolfram.com/language/ref/FourierTransform.html">FourierTransform</a> ▪ <a href="https://reference.wolfram.com/language/ref/Convolve.html">Convolve</a> ▪ <a href="https://reference.wolfram.com/language/ref/DiracDelta.html">DiracDelta</a> ▪ <a href="https://reference.wolfram.com/language/guide/IntegralTransforms.html">…</a></p><p><a href="https://reference.wolfram.com/language/ref/Normalize.html">Normalize</a>, <a href="https://reference.wolfram.com/language/ref/Orthogonalize.html">Orthogonalize</a> — 函数的规范化、正交化</p><h3 id="函数属性"><a href="#函数属性" class="headerlink" title="函数属性"></a>函数属性</h3><p><a href="https://reference.wolfram.com/language/ref/FunctionRange.html">FunctionRange</a> ▪ <a href="https://reference.wolfram.com/language/ref/FunctionDomain.html">FunctionDomain</a> ▪ <a href="https://reference.wolfram.com/language/ref/FunctionPeriod.html">FunctionPeriod</a></p><h3 id="微积分与几何-»"><a href="#微积分与几何-»" class="headerlink" title="微积分与几何 »"></a><a href="https://reference.wolfram.com/language/guide/GeometricComputation.html">微积分与几何 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/ArcLength.html">ArcLength</a> ▪ <a href="https://reference.wolfram.com/language/ref/Area.html">Area</a> ▪ <a href="https://reference.wolfram.com/language/ref/Volume.html">Volume</a> ▪ <a href="https://reference.wolfram.com/language/ref/RegionDistance.html">RegionDistance</a> ▪ <a href="https://reference.wolfram.com/language/guide/GeometricComputation.html">…</a></p><h3 id="微分算子-»"><a href="#微分算子-»" class="headerlink" title="微分算子 »"></a><a href="https://reference.wolfram.com/language/guide/DifferentialOperators.html">微分算子 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/Derivative.html">Derivative</a> — 符号和数值导数函数</p><p><a href="https://reference.wolfram.com/language/ref/DifferentialRoot.html">DifferentialRoot</a> — 线性微分方程数值解的普通表达式</p><h2 id="最优化"><a href="#最优化" class="headerlink" title="最优化"></a>最优化</h2><h3 id="数值最优化"><a href="#数值最优化" class="headerlink" title="数值最优化"></a>数值最优化</h3><p><a href="https://reference.wolfram.com/language/ref/NMinimize.html">NMinimize</a>, <a href="https://reference.wolfram.com/language/ref/NMaximize.html">NMaximize</a> — 全局的非线性约束最优化</p><p><a href="https://reference.wolfram.com/language/ref/FindMinimum.html">FindMinimum</a>, <a href="https://reference.wolfram.com/language/ref/FindMaximum.html">FindMaximum</a> — 局部无约束或约束的最优化</p><p><a href="https://reference.wolfram.com/language/ref/FindFit.html">FindFit</a> — 最优化的非线性的无约束或约束的数据拟合</p><h3 id="符号最优化"><a href="#符号最优化" class="headerlink" title="符号最优化"></a>符号最优化</h3><p><a href="https://reference.wolfram.com/language/ref/Minimize.html">Minimize</a>, <a href="https://reference.wolfram.com/language/ref/Maximize.html">Maximize</a> — 符号的全局最优化</p><h3 id="极限值和位置"><a href="#极限值和位置" class="headerlink" title="极限值和位置"></a>极限值和位置</h3><p><a href="https://reference.wolfram.com/language/ref/MinValue.html">MinValue</a>, <a href="https://reference.wolfram.com/language/ref/MaxValue.html">MaxValue</a> — 最小、最大数值</p><p><a href="https://reference.wolfram.com/language/ref/NMinValue.html">NMinValue</a> ▪ <a href="https://reference.wolfram.com/language/ref/NMaxValue.html">NMaxValue</a> ▪ <a href="https://reference.wolfram.com/language/ref/FindMinValue.html">FindMinValue</a> ▪ <a href="https://reference.wolfram.com/language/ref/FindMaxValue.html">FindMaxValue</a></p><p><a href="https://reference.wolfram.com/language/ref/ArgMin.html">ArgMin</a>, <a href="https://reference.wolfram.com/language/ref/ArgMax.html">ArgMax</a> — 最小值、最大值的位置</p><p><a href="https://reference.wolfram.com/language/ref/NArgMin.html">NArgMin</a> ▪ <a href="https://reference.wolfram.com/language/ref/NArgMax.html">NArgMax</a> ▪ <a href="https://reference.wolfram.com/language/ref/FindArgMin.html">FindArgMin</a> ▪ <a href="https://reference.wolfram.com/language/ref/FindArgMax.html">FindArgMax</a></p><h3 id="矩阵形式"><a href="#矩阵形式" class="headerlink" title="矩阵形式"></a>矩阵形式</h3><p><a href="https://reference.wolfram.com/language/ref/LinearProgramming.html">LinearProgramming</a> — 矩阵形式的实数和整数线性规划</p><p><a href="https://reference.wolfram.com/language/ref/LeastSquares.html">LeastSquares</a> — 矩阵形式的最小二乘问题</p><h3 id="凸优化-»"><a href="#凸优化-»" class="headerlink" title="凸优化 »"></a><a href="https://reference.wolfram.com/language/guide/ConvexOptimization.html">凸优化 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/LinearOptimization.html">LinearOptimization</a> — 最小 <img src="https://reference.wolfram.com/language/guide/Files/Optimization.zh/1.png" alt="img"></p><p><a href="https://reference.wolfram.com/language/ref/LinearFractionalOptimization.html">LinearFractionalOptimization</a> — 最小 <img src="https://reference.wolfram.com/language/guide/Files/Optimization.zh/2.png" alt="img"></p><p><a href="https://reference.wolfram.com/language/ref/QuadraticOptimization.html">QuadraticOptimization</a> — 最小 <img src="https://reference.wolfram.com/language/guide/Files/Optimization.zh/3.png" alt="img"></p><p><a href="https://reference.wolfram.com/language/ref/SecondOrderConeOptimization.html">SecondOrderConeOptimization</a> — 最小 <img src="https://reference.wolfram.com/language/guide/Files/Optimization.zh/4.png" alt="img"></p><p><a href="https://reference.wolfram.com/language/ref/SemidefiniteOptimization.html">SemidefiniteOptimization</a> — 最小 <img src="https://reference.wolfram.com/language/guide/Files/Optimization.zh/5.png" alt="img"></p><p><a href="https://reference.wolfram.com/language/ref/ConicOptimization.html">ConicOptimization</a> — 最小 <img src="https://reference.wolfram.com/language/guide/Files/Optimization.zh/6.png" alt="img"></p><h3 id="组合最优化-»"><a href="#组合最优化-»" class="headerlink" title="组合最优化 »"></a><a href="https://reference.wolfram.com/language/guide/DiscreteMathematics.html">组合最优化 »</a></h3><p><a href="https://reference.wolfram.com/language/ref/FindShortestTour.html">FindShortestTour</a> — 求解一个旅行销售商问题</p><p><a href="https://reference.wolfram.com/language/ref/Minimize.html">Minimize</a>, <a href="https://reference.wolfram.com/language/ref/FindMinimum.html">FindMinimum</a> — 求解整数规划问题</p><p><a href="https://reference.wolfram.com/language/ref/ArgMin.html">ArgMin</a>, <a href="https://reference.wolfram.com/language/ref/MinValue.html">MinValue</a>, … — 最小值的位置和数值</p><p><a href="https://reference.wolfram.com/language/ref/KnapsackSolve.html">KnapsackSolve</a> — 求解有界、无界和 0–1 背包问题</p><p><a href="https://reference.wolfram.com/language/ref/FrobeniusSolve.html">FrobeniusSolve</a> — 混合基数约束满足（如：换硬币）问题</p><h3 id="广义优化"><a href="#广义优化" class="headerlink" title="广义优化"></a>广义优化</h3><p><a href="https://reference.wolfram.com/language/ref/BayesianMinimization.html">BayesianMinimization</a> — 数字、文字、图像、…… 函数的基于模型的最小化</p><p><a href="https://reference.wolfram.com/language/ref/BayesianMinimizationObject.html">BayesianMinimizationObject</a> — 基于模型的最小化结果的表示</p><p><a href="https://reference.wolfram.com/language/ref/BayesianMaximization.html">BayesianMaximization</a> ▪ <a href="https://reference.wolfram.com/language/ref/BayesianMaximizationObject.html">BayesianMaximizationObject</a></p><h3 id="不等式可视化"><a href="#不等式可视化" class="headerlink" title="不等式可视化"></a>不等式可视化</h3><p><a href="https://reference.wolfram.com/language/ref/RegionPlot.html">RegionPlot</a>, <a href="https://reference.wolfram.com/language/ref/RegionPlot3D.html">RegionPlot3D</a> — 绘制满足不等式的区域</p><h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><p><a href="https://reference.wolfram.com/language/ref/NetTrain.html">NetTrain</a> — 用指定的损失函数培训神经网络</p><p><a href="https://reference.wolfram.com/language/ref/SpherePoints.html">SpherePoints</a> — 球面上相等的间隔点</p><p><a href="https://reference.wolfram.com/language/ref/EstimatedDistribution.html">EstimatedDistribution</a> ▪ <a href="https://reference.wolfram.com/language/ref/EstimatedProcess.html">EstimatedProcess</a> ▪ <a href="https://reference.wolfram.com/language/ref/FindFormula.html">FindFormula</a> ▪ …</p><p><a href="https://reference.wolfram.com/language/ref/FindGeometricTransform.html">FindGeometricTransform</a> ▪ <a href="https://reference.wolfram.com/language/ref/ImageAlign.html">ImageAlign</a> ▪ <a href="https://reference.wolfram.com/language/ref/GuidedFilter.html">GuidedFilter</a> ▪ …</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematica </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个随笔</title>
      <link href="/2020/08/05/yi-ge-sui-bi/"/>
      <url>/2020/08/05/yi-ge-sui-bi/</url>
      
        <content type="html"><![CDATA[<h2 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h2><p>知乎上突然掀起了关于讨论《三十而已》片子的谈资</p><p>高赞答主一言</p><p><img src="http://pict.lanyun1103.top/typora/20200804233446.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_75/quality,q_70/sharpen,100/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_10,g_se,x_10,y_10" alt="image-20200804233446757"></p><h2 id="记录心情"><a href="#记录心情" class="headerlink" title="记录心情"></a>记录心情</h2><p>可以说我是一直不喜欢看电视剧的，因为前前后后，说的还是成年人之间的感情问题。</p><p>我觉得不应该是这样，不管是男人还是女人，都应该有一个能让自己引以为傲的追求。而这样的电视剧只会背道而驰，起反方向作用。</p><p>比起为了鸡毛蒜皮的感情事，其实人生最重要的是生活，能让自己get happiness，让自己有更美好生活的才是应该追求的事。</p><p>我相信一句话：<strong>别人劝你的事情你一定要三思后再听取，你不知道她是真的想为你好，还是想把你和她变成一类人。</strong>看电视剧更是这样。</p><p>中国永远不会缺人，但是会缺少顶尖的人，而当前在顶尖的人会想方设法让社会中少出现和他们抢饭碗的人，绝大部分电视剧只可以作为消遣时间的工具，很少有电视剧可细品，如果被其潜移默化三观，我觉得是非常不值得的，这是编剧最希望看到的事，他得到钱，你浪费时间，他take more chance，你become junk。</p><p>我想说的还是那一句俗话，你在看电视剧的时候，你的情敌在奋斗。你得到了饭后谈资，而不管他得到了什么，不管是金钱，还是经验，更或是教训，都比你有用的多。</p><p>我经常喜欢问自己一天学到了什么，如果我看了一天movie，我觉得晚上我会心情亢奋，准备明天一早把课程杀他个片甲不留，没过两天就会忘了，啊这，我看过这个啊，挺好看嗷。</p><p>就像每次看完Rock Johnson的电影回去路上都想着一定要健身to protect my lover。过两天，在厕所翻翻手机看看碎片化的知识，我又觉得我行了，今天又是充满希望的一天。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>其实是想告诉自己，我自己也知道自己为什么天天喜欢看qq，隔一会看一下，生怕有人找自己似的。</p><p>我知道我忘不掉，所以真的该放下了。</p><p>就像上面说的一样，人生除了感情，还应该有汹涌澎湃的一生，应该有自己想要奋斗的事业。</p><p>为了鸡毛蒜皮的在自己脑子里面的感情戏让自己精力分散没必要，这个答主最后一句话本写给女性看，也写给我看。</p><p>比起现在这个让我自己都感觉到颓废的人，我更希望看到一个能学习一天的我。</p>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>0804每日一题_课程表</title>
      <link href="/2020/08/04/0804-mei-ri-yi-ti-ke-cheng-biao/"/>
      <url>/2020/08/04/0804-mei-ri-yi-ti-ke-cheng-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="课程表"><a href="#课程表" class="headerlink" title="课程表"></a>课程表</h2><p>一个计算图中是否存在环的算法。算是拓扑排序的一种写法</p><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><h4 id="207-课程表"><a href="#207-课程表" class="headerlink" title="207. 课程表"></a><a href="https://leetcode-cn.com/problems/course-schedule/">207. 课程表</a></h4><p>难度中等</p><p>你这个学期必须选修 <code>numCourse</code> 门课程，记为 <code>0</code> 到 <code>numCourse-1</code> 。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们：<code>[0,1]</code></p><p>给定课程总量以及它们的先决条件，请你判断是否可能完成所有课程的学习？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">示例 <span class="token number">1</span><span class="token operator">:</span>输入<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> 输出<span class="token operator">:</span> <span class="token boolean">true</span>解释<span class="token operator">:</span> 总共有 <span class="token number">2</span> 门课程。学习课程 <span class="token number">1</span> 之前，你需要完成课程 <span class="token number">0</span>。所以这是可能的。示例 <span class="token number">2</span><span class="token operator">:</span>输入<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出<span class="token operator">:</span> <span class="token boolean">false</span>解释<span class="token operator">:</span> 总共有 <span class="token number">2</span> 门课程。学习课程 <span class="token number">1</span> 之前，你需要先完成课程 <span class="token number">0</span>；并且学习课程 <span class="token number">0</span> 之前，你还应先完成课程 <span class="token number">1</span>。这是不可能的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>这题用到判断图中是否存在环算法，总体来说步骤为：</p><p>1.将入度为0的节点放到队列中</p><p>2.创建题目所给条件的邻接表</p><p>3.将队列中的所有元素poll出，如果最终poll出的数量和给出的课程数量一样多，则说明不存在两个节点之间存在互相链接</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canFinish</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> indegrees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//创建邻接矩阵 ad</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个队列，储存满足条件的元素</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numCourses<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//制作一个图的结构，即一个节点有前节点和后节点</span>            ad<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建邻接矩阵</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">:</span> prerequisites<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//temp[0]的位置是需要学习的课程编号，temp[1]是需要满足的课程条件编号</span>            indegrees<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//向链表的temp[1]元素添加这个课程的编号</span>            <span class="token comment">//邻接矩阵的意义，外层储存条件节点，例如1，内层储存目的节点，例如0，或者还有其他节点。那么邻接矩阵的意义就是需要满足1才能学习0。</span>            <span class="token comment">//这里也就是将要学习的节点0添加到前题节点1的链表中。1->0。1为前驱节点</span>            ad<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numCourses<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//如果满足一个点的入度是0，那么添加进队列</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>indegrees<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//把队列中所有元素排出来，排出来则--，如果排出来的数量不是元素总数，则就是存在环的</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//这里的pre是队列中排出来的节点，是一个课程的序号</span>            <span class="token keyword">int</span> pre <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//记录次数</span>            numCourses<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment">//遍历pre的所有邻接节点</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur <span class="token operator">:</span> ad<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//节点的入度-1如果等于0，那么这个节点已经没有前驱节点，可以添加到队列中进行遍历</span>                <span class="token comment">//使用队列的话非常巧妙，如果一个节点“暂时”还不满足条件，那么继续遍历，如果在某一次循环中又碰到了这个节点，这个时候如果满足条件了，就可以重新添加到队列里面作为判断标准了</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>indegrees<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> numCourses<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="我学到了什么："><a href="#我学到了什么：" class="headerlink" title="我学到了什么："></a>我学到了什么：</h3><p>使用链表实现邻接矩阵，使用队列判断拓扑排序</p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大学生数学竞赛_反常积分</title>
      <link href="/2020/08/04/da-xue-sheng-shu-xue-jing-sai-fan-chang-ji-fen/"/>
      <url>/2020/08/04/da-xue-sheng-shu-xue-jing-sai-fan-chang-ji-fen/</url>
      
        <content type="html"><![CDATA[<h2 id="反常积分的计算"><a href="#反常积分的计算" class="headerlink" title="反常积分的计算"></a>反常积分的计算</h2><h3 id="基本方法："><a href="#基本方法：" class="headerlink" title="基本方法："></a>基本方法：</h3><p>换元法、分部积分法、牛顿莱布尼字公式</p><p><img src="http://pict.lanyun1103.top/typora/20200803225707.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803225700711"></p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>1.</p><p><img src="http://pict.lanyun1103.top/typora/20200803225822.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803225822477"></p><p>2.</p><p><img src="http://pict.lanyun1103.top/typora/20200803225944.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803225944574"></p><p>3.</p><p><img src="http://pict.lanyun1103.top/typora/20200803230140.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803230140833"><img src="http://pict.lanyun1103.top/typora/20200803230152.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803230151952"></p><p>4.</p><p><img src="http://pict.lanyun1103.top/typora/20200803231605.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803231605396"><img src="http://pict.lanyun1103.top/typora/20200803231620.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803231620029"></p><p>5.</p><p><img src="http://pict.lanyun1103.top/typora/20200803231653.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803231653344"><img src="http://pict.lanyun1103.top/typora/20200803231704.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803231704303"></p><p>6.</p><p><img src="http://pict.lanyun1103.top/typora/20200803231721.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803231721958"><img src="http://pict.lanyun1103.top/typora/20200803231730.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803231729902"></p><p>7.</p><p><img src="http://pict.lanyun1103.top/typora/20200803233429.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803233429743"></p><p>题目中存在绝对值，那么可以考虑去掉绝对值</p><p>10.</p><p><img src="http://pict.lanyun1103.top/typora/20200803233053.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803233053320"><img src="http://pict.lanyun1103.top/typora/20200803233221.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803233221802"><img src="http://pict.lanyun1103.top/typora/20200803233246.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200803233246586"></p><p>也就是分区间计算的方法</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学生数学竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大学生数学竞赛_一元积分学</title>
      <link href="/2020/08/04/da-xue-sheng-shu-xue-jing-sai-yi-yuan-ji-fen-xue/"/>
      <url>/2020/08/04/da-xue-sheng-shu-xue-jing-sai-yi-yuan-ji-fen-xue/</url>
      
        <content type="html"><![CDATA[<h2 id="一元积分学"><a href="#一元积分学" class="headerlink" title="一元积分学"></a>一元积分学</h2><p>大量图片，流量预警</p><h3 id="一、使用积分求极限"><a href="#一、使用积分求极限" class="headerlink" title="一、使用积分求极限"></a>一、使用积分求极限</h3><h4 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg</h4><p>1.</p><p><img src="http://pict.lanyun1103.top/typora/20200804091448.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804091439899"></p><p>不能写成积分和，可以使用两边夹定理，放缩</p><p><img src="http://pict.lanyun1103.top/typora/20200804091512.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804091511862"></p><p>2.</p><p><img src="http://pict.lanyun1103.top/typora/20200804091722.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804091722227"></p><p>同理，使用夹逼定理</p><p><img src="http://pict.lanyun1103.top/typora/20200804091747.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804091747463"></p><h3 id="二、证明不等式"><a href="#二、证明不等式" class="headerlink" title="二、证明不等式"></a>二、证明不等式</h3><h4 id="1-使用定积分的保序性"><a href="#1-使用定积分的保序性" class="headerlink" title="1.使用定积分的保序性"></a>1.使用定积分的保序性</h4><p><img src="http://pict.lanyun1103.top/typora/20200804091824.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804091824554"></p><h4 id="2-使用积分第一中值定理"><a href="#2-使用积分第一中值定理" class="headerlink" title="2.使用积分第一中值定理"></a>2.使用积分第一中值定理</h4><p><img src="http://pict.lanyun1103.top/typora/20200804091857.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804091857115"></p><p>把不变号的放在里面作为g(x)</p><h4 id="eg1-5"><a href="#eg1-5" class="headerlink" title="eg1~5"></a>eg1~5</h4><p>1.</p><p><img src="http://pict.lanyun1103.top/typora/20200804092151.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804092151323"><img src="http://pict.lanyun1103.top/typora/20200804092202.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804092202391"></p><p>2.</p><p><img src="http://pict.lanyun1103.top/typora/20200804092214.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804092214307"></p><p>想办法去掉根号，使用三角函数换元法</p><p><img src="http://pict.lanyun1103.top/typora/20200804092243.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804092243693"></p><p>3.</p><p><img src="http://pict.lanyun1103.top/typora/20200804092132.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804092132335"></p><p>4.</p><p><img src="http://pict.lanyun1103.top/typora/20200804092317.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804092317568"></p><p>疑问：为什么这里使用积分上限为h^(1/4)</p><p>答：不是固定为1/4，因为需要保证0&lt;h^α&lt;h，所以使用0&lt;α&lt;1。</p><p><img src="http://pict.lanyun1103.top/typora/20200804092534.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804092534642"></p><p>5.</p><p><img src="http://pict.lanyun1103.top/typora/20200804093411.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804093411347"></p><p>想办法把上下限变成一样的</p><p><img src="http://pict.lanyun1103.top/typora/20200804094529.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_85/quality,q_80/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804094528749"></p><h4 id="eg6-10"><a href="#eg6-10" class="headerlink" title="eg6~10"></a>eg6~10</h4><p>6.</p><p><img src="http://pict.lanyun1103.top/typora/20200804094819.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_85/quality,q_80/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804094819004"></p><p><img src="http://pict.lanyun1103.top/typora/20200804094931.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_85/quality,q_80/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804094930995"></p><p>8.</p><p><img src="http://pict.lanyun1103.top/typora/20200804095345.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_85/quality,q_80/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804095345579"></p><p>本题使用施瓦兹不等式</p><p>其次把导数和原函数联系起来（原函数存在定理）</p><p><img src="http://pict.lanyun1103.top/typora/20200804095416.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_85/quality,q_80/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804095416244"><img src="http://pict.lanyun1103.top/typora/20200804095525.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_85/quality,q_80/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804095525768"></p><p>9.</p><p><img src="http://pict.lanyun1103.top/typora/20200804095650.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_85/quality,q_80/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804095650928"></p><p>积分的绝对值&lt;绝对值的积分</p><p><img src="http://pict.lanyun1103.top/typora/20200804095723.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_85/quality,q_80/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804095722954"></p><p>10.</p><p><img src="http://pict.lanyun1103.top/typora/20200804095739.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_85/quality,q_80/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804095739585"><img src="http://pict.lanyun1103.top/typora/20200804095748.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_85/quality,q_80/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804095748727"><img src="http://pict.lanyun1103.top/typora/20200804095933.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_85/quality,q_80/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804095933412"></p><h4 id="eg11-14"><a href="#eg11-14" class="headerlink" title="eg11~14"></a>eg11~14</h4><p>11.</p><p><img src="http://pict.lanyun1103.top/typora/20200804100132.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_85/quality,q_80/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804100132063"></p><p>证明思路：为了证明辅助函数递增，对其求导</p><p><img src="http://pict.lanyun1103.top/typora/20200804100206.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_85/quality,q_80/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200804100205748"></p><p>12.</p><p><img src="http://pict.lanyun1103.top/typora/20200804100836.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_79/quality,q_70/sharpen,100/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_10,g_se,x_10,y_10" alt="image-20200804100836746"></p><p><img src="http://pict.lanyun1103.top/typora/20200804100952.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_79/quality,q_70/sharpen,100/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_10,g_se,x_10,y_10" alt="image-20200804100952289"></p><p>13.</p><p><img src="http://pict.lanyun1103.top/typora/20200804101152.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_79/quality,q_70/sharpen,100/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_10,g_se,x_10,y_10" alt="image-20200804101152576"></p><p><img src="http://pict.lanyun1103.top/typora/20200804101248.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_75/quality,q_70/sharpen,100/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_10,g_se,x_10,y_10" alt="image-20200804101248587"></p><p>14.</p><p><img src="http://pict.lanyun1103.top/typora/20200804101333.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_75/quality,q_70/sharpen,100/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_10,g_se,x_10,y_10" alt="image-20200804101333616"></p><p><img src="http://pict.lanyun1103.top/typora/20200804101400.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_75/quality,q_70/sharpen,100/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_10,g_se,x_10,y_10" alt="image-20200804101400463"></p><p><img src="http://pict.lanyun1103.top/typora/20200804101415.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_75/quality,q_70/sharpen,100/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_10,g_se,x_10,y_10" alt="image-20200804101415042"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学生数学竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题0803字符串相加（简单）</title>
      <link href="/2020/08/03/zi-fu-chuan-xiang-jia/"/>
      <url>/2020/08/03/zi-fu-chuan-xiang-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串相加"><a href="#字符串相加" class="headerlink" title="字符串相加"></a>字符串相加</h2><p>其实这题比较简单，这里想总结的是进位计算进位carry的用法和三目运算符在简化代码中的用处</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.carry作为进位，每一次进位取到两数相加的十位部分，在下一次计算中加上，如果最后一次caryy=1的话再加一次</p><p>2.三目运算符的使用：可以用于判断一个数需不需要进行操作，也可以作为分支选项覆盖值，虽然效率不是很高，每一次都要进行判断，但是还是很有用的。（看起来很牛逼）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addStrings</span><span class="token punctuation">(</span><span class="token class-name">String</span> num1<span class="token punctuation">,</span> <span class="token class-name">String</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> i<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">?</span> num1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y <span class="token operator">=</span> j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">?</span> num2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token operator">+</span>carry<span class="token punctuation">;</span>            carry <span class="token operator">=</span> temp<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复变函数题目总结（二）</title>
      <link href="/2020/08/02/fu-bian-han-shu-ti-mu-zong-jie-er/"/>
      <url>/2020/08/02/fu-bian-han-shu-ti-mu-zong-jie-er/</url>
      
        <content type="html"><![CDATA[<h2 id="五、求积分"><a href="#五、求积分" class="headerlink" title="五、求积分"></a>五、求积分</h2><h3 id="1-简单方法"><a href="#1-简单方法" class="headerlink" title="1.简单方法"></a>1.简单方法</h3><p><img src="http://pict.lanyun1103.top/typora/20200802130042.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802130042871"></p><h3 id="2-柯西古萨基本定理"><a href="#2-柯西古萨基本定理" class="headerlink" title="2.柯西古萨基本定理"></a>2.柯西古萨基本定理</h3><p><img src="http://pict.lanyun1103.top/typora/20200802130122.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802130121956"><img src="http://pict.lanyun1103.top/typora/20200802130136.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802130136671">### 3.柯西积分公式</p><p><img src="http://pict.lanyun1103.top/typora/20200802130217.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802130217014"><img src="http://pict.lanyun1103.top/typora/20200802130238.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802130238638">### 4.n阶导数</p><p><img src="http://pict.lanyun1103.top/typora/20200802130618.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802130618596"><img src="http://pict.lanyun1103.top/typora/20200802130633.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802130633524"></p><h2 id="六、留数"><a href="#六、留数" class="headerlink" title="六、留数"></a>六、留数</h2><h3 id="1-奇点和零点"><a href="#1-奇点和零点" class="headerlink" title="1.奇点和零点"></a>1.奇点和零点</h3><p><img src="http://pict.lanyun1103.top/typora/20200802130956.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802130956006"></p><h3 id="2-留数的定义"><a href="#2-留数的定义" class="headerlink" title="2.留数的定义"></a>2.留数的定义</h3><p><img src="http://pict.lanyun1103.top/typora/20200802131032.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802131032659"></p><h3 id="3-求留数的Ⅰ、Ⅱ规则"><a href="#3-求留数的Ⅰ、Ⅱ规则" class="headerlink" title="3.求留数的Ⅰ、Ⅱ规则"></a>3.求留数的Ⅰ、Ⅱ规则</h3><p><img src="http://pict.lanyun1103.top/typora/20200802131137.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802131137887"></p><h3 id="4-求留数的Ⅲ、IV规则"><a href="#4-求留数的Ⅲ、IV规则" class="headerlink" title="4.求留数的Ⅲ、IV规则"></a>4.求留数的Ⅲ、IV规则</h3><p><img src="http://pict.lanyun1103.top/typora/20200802132436.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802132436586"><img src="http://pict.lanyun1103.top/typora/20200802132446.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802132446189"></p><h2 id="七、利用留数求积分"><a href="#七、利用留数求积分" class="headerlink" title="七、利用留数求积分"></a>七、利用留数求积分</h2><h3 id="1-利用留数求积分"><a href="#1-利用留数求积分" class="headerlink" title="1.利用留数求积分"></a>1.利用留数求积分</h3><p><img src="http://pict.lanyun1103.top/typora/20200802132519.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802132519266"><img src="http://pict.lanyun1103.top/typora/20200802132634.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802132634210"><img src="http://pict.lanyun1103.top/typora/20200802132603.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802132550931"></p><h3 id="2-求积分方法总结"><a href="#2-求积分方法总结" class="headerlink" title="2.求积分方法总结"></a>2.求积分方法总结</h3><p><img src="http://pict.lanyun1103.top/typora/20200802132703.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802132703383"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复变函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复变函数题目总结（一）</title>
      <link href="/2020/08/02/fu-bian-han-shu-ti-mu-zong-jie-yi/"/>
      <url>/2020/08/02/fu-bian-han-shu-ti-mu-zong-jie-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="二、复变函数"><a href="#二、复变函数" class="headerlink" title="二、复变函数"></a>二、复变函数</h2><h3 id="1-导数"><a href="#1-导数" class="headerlink" title="1.导数"></a>1.导数</h3><p><img src="http://pict.lanyun1103.top/typora/20200802111959.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802111959616"></p><p><img src="http://pict.lanyun1103.top/typora/20200802112024.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802112024417"></p><p><img src="http://pict.lanyun1103.top/typora/20200802112216.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802112216655"></p><h3 id="2-解析函数"><a href="#2-解析函数" class="headerlink" title="2.解析函数"></a>2.解析函数</h3><p><img src="http://pict.lanyun1103.top/typora/20200802112243.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802112243295"></p><p><img src="http://pict.lanyun1103.top/typora/20200802112302.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802112302447"></p><h3 id="3-调和函数"><a href="#3-调和函数" class="headerlink" title="3.调和函数"></a>3.调和函数</h3><p><img src="http://pict.lanyun1103.top/typora/20200802112458.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802112458262"></p><h2 id="三、初等函数"><a href="#三、初等函数" class="headerlink" title="三、初等函数"></a>三、初等函数</h2><h3 id="1-exp指数函数"><a href="#1-exp指数函数" class="headerlink" title="1.exp指数函数"></a>1.exp指数函数</h3><p><img src="http://pict.lanyun1103.top/typora/20200802112659.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802112659864"></p><h3 id="2-Ln对数函数"><a href="#2-Ln对数函数" class="headerlink" title="2.Ln对数函数"></a>2.Ln对数函数</h3><p><img src="http://pict.lanyun1103.top/typora/20200802112709.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802112709497"></p><p><img src="http://pict.lanyun1103.top/typora/20200802112719.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802112719561"> <img src="http://pict.lanyun1103.top/typora/20200802112737.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802112737306"></p><h3 id="3-幂函数"><a href="#3-幂函数" class="headerlink" title="3.幂函数"></a>3.幂函数</h3><p><img src="http://pict.lanyun1103.top/typora/20200802112843.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802112843941"></p><h3 id="4-三角函数"><a href="#4-三角函数" class="headerlink" title="4.三角函数"></a>4.三角函数</h3><p><img src="http://pict.lanyun1103.top/typora/20200802112854.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802112854445"></p><p><img src="http://pict.lanyun1103.top/typora/20200802112907.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802112907307"></p><h2 id="四、级数"><a href="#四、级数" class="headerlink" title="四、级数"></a>四、级数</h2><h3 id="1-复数列的极限"><a href="#1-复数列的极限" class="headerlink" title="1.复数列的极限"></a>1.复数列的极限</h3><p><img src="http://pict.lanyun1103.top/typora/20200802113039.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802113039164"></p><p><img src="http://pict.lanyun1103.top/typora/20200802113114.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802113114949"></p><h3 id="2-收敛、收敛半径"><a href="#2-收敛、收敛半径" class="headerlink" title="2.收敛、收敛半径"></a>2.收敛、收敛半径</h3><p><img src="http://pict.lanyun1103.top/typora/20200802113127.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802113127860"> <img src="http://pict.lanyun1103.top/typora/20200802113138.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802113138537"></p><h3 id="3-和函数、幂级数"><a href="#3-和函数、幂级数" class="headerlink" title="3.和函数、幂级数"></a>3.和函数、幂级数</h3><p><img src="http://pict.lanyun1103.top/typora/20200802113155.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802113155423"></p><p><img src="http://pict.lanyun1103.top/typora/20200802113205.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802113205805"> <img src="http://pict.lanyun1103.top/typora/20200802113222.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802113222489"></p><h3 id="4-洛朗级数"><a href="#4-洛朗级数" class="headerlink" title="4.洛朗级数"></a>4.洛朗级数</h3><p><img src="http://pict.lanyun1103.top/typora/20200802113300.png?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="image-20200802113259958"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复变函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机场集合</title>
      <link href="/2020/07/31/ji-chang-ji-he/"/>
      <url>/2020/07/31/ji-chang-ji-he/</url>
      
        <content type="html"><![CDATA[<h1 id="梯子集合"><a href="#梯子集合" class="headerlink" title="梯子集合"></a>梯子集合</h1><p><a href="https://pud.hdker.com/user">布丁网络</a></p><p>套餐</p><p>价格</p><p>季付（128）</p><p>38</p><p>年付（128）</p><p>88</p><p>年付（256）</p><p>128</p><p>年付（512）</p><p>198</p><p><a href="https://chudaobao.online/product.html">YoYu</a></p><p>套餐</p><p>价格</p><p>季付（10-20）</p><p>30</p><p>季付（50-300）</p><p>100</p><p><a href="http://dlj.tf/2FvsU5">YToo</a></p><p>半年144，50-300GB弹性流量，最高500Mbps</p><p><a href="5socloud.gq">soCloud</a></p><p><img src="http://pict.lanyun1103.top/typora/20200731194542.png" alt="image-20200731194542705"></p><p><a href="http://www.tanz.cloud/auth/register">tanz</a> 9.9/month 30/season 99/year</p><p><a href="https://cylink.store/auth/login">次元链接</a> 18.8/month</p>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常微分方程_一阶微分方程、高阶微分方程</title>
      <link href="/2020/07/30/yi-jie-wei-fen-fang-cheng-gao-jie-wei-fen-fang-cheng/"/>
      <url>/2020/07/30/yi-jie-wei-fen-fang-cheng-gao-jie-wei-fen-fang-cheng/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">常微分方程# 一阶微分方程、高阶微分方程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>图来自B站up主 <a href="https://space.bilibili.com/28445148">张小乖Lanse</a></p><h2 id="一、一阶微分方程"><a href="#一、一阶微分方程" class="headerlink" title="一、一阶微分方程"></a>一、一阶微分方程</h2><h3 id="普通的"><a href="#普通的" class="headerlink" title="普通的"></a>普通的</h3><p>分离变量即可</p><h3 id="伯努利方程"><a href="#伯努利方程" class="headerlink" title="伯努利方程"></a>伯努利方程</h3><p><img src="http://pict.lanyun1103.top/typora/20200730093003.png" alt="image-20200730092955758"></p><h3 id="里卡蒂方程"><a href="#里卡蒂方程" class="headerlink" title="里卡蒂方程"></a>里卡蒂方程</h3><p><img src="http://pict.lanyun1103.top/typora/20200730093041.png" alt="image-20200730093040923"></p><h3 id="积分因子法"><a href="#积分因子法" class="headerlink" title="积分因子法"></a>积分因子法</h3><p>若存在一个二元函数u(x,y)使得方程M(x,y)dx+N(x,y)dy=0的左端为_全微分_，则称其为全微分方程。全微分方程的充分必要条件为∂M/∂y=∂N/∂x。</p><p>为了求出全微分方程的原函数，可以采用不定积分法和分组法，对于不是全微分方程，也可以借助<a href="https://baike.baidu.com/item/%E7%A7%AF%E5%88%86%E5%9B%A0%E5%AD%90/7818491">积分因子</a>使其成为全微分方程，再通过以上方法求解。</p><p><img src="http://pict.lanyun1103.top/typora/20200730095201.png" alt="image-20200730095201807"></p><h4 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg<img src="http://pict.lanyun1103.top/typora/20200730095242.png" alt="image-20200730095242269"></h4><h3 id="隐式方程"><a href="#隐式方程" class="headerlink" title="隐式方程"></a>隐式方程</h3><p><img src="http://pict.lanyun1103.top/typora/20200730102955.png" alt="image-20200730102955540"></p><h4 id="eg-1"><a href="#eg-1" class="headerlink" title="eg"></a>eg</h4><p>第一种情况</p><p><img src="http://pict.lanyun1103.top/typora/20200730103024.png" alt="image-20200730103024021"></p><p><img src="http://pict.lanyun1103.top/typora/20200730103057.png" alt="image-20200730103057142"></p><p><img src="http://pict.lanyun1103.top/typora/20200730103139.png" alt="image-20200730103139402"> <img src="http://pict.lanyun1103.top/typora/20200730103149.png" alt="image-20200730103149194"></p><h2 id="二、高阶微分方程"><a href="#二、高阶微分方程" class="headerlink" title="二、高阶微分方程"></a>二、高阶微分方程</h2><p><img src="http://pict.lanyun1103.top/typora/20200730103506.png" alt="image-20200730103506621"></p><h3 id="一般理论"><a href="#一般理论" class="headerlink" title="一般理论"></a>一般理论</h3><p>得到解的结构</p><p><img src="http://pict.lanyun1103.top/typora/20200730103952.png" alt="image-20200730103952727"></p><h3 id="朗斯基行列式"><a href="#朗斯基行列式" class="headerlink" title="朗斯基行列式"></a>朗斯基行列式</h3><p><img src="http://pict.lanyun1103.top/typora/20200730104058.png" alt="image-20200730104058191"> <img src="http://pict.lanyun1103.top/typora/20200730104250.png" alt="image-20200730104250367"></p><p>所以通解就是n个线性无关的解的线性组合</p><h3 id="刘维尔公式"><a href="#刘维尔公式" class="headerlink" title="刘维尔公式"></a>刘维尔公式</h3><p>可以证明上面的朗斯基行列式的推论</p><p><img src="http://pict.lanyun1103.top/typora/20200730104541.png" alt="image-20200730104540996"></p><h4 id="eg-2"><a href="#eg-2" class="headerlink" title="eg"></a>eg</h4><p><img src="http://pict.lanyun1103.top/typora/20200730221047.png" alt="image-20200730221047111"></p><p><img src="http://pict.lanyun1103.top/typora/20200730221309.png" alt="image-20200730221309151"> <img src="http://pict.lanyun1103.top/typora/20200730221345.png" alt="image-20200730221345595"></p><p>二阶只要知道一个非零解，那么通过刘维尔公式就可以得到通解</p><h3 id="求非齐次线性微分方程特解"><a href="#求非齐次线性微分方程特解" class="headerlink" title="求非齐次线性微分方程特解"></a>求非齐次线性微分方程特解</h3><p><img src="http://pict.lanyun1103.top/typora/20200731145103.png" alt="image-20200731145055652"> <img src="http://pict.lanyun1103.top/typora/20200731145141.png" alt="image-20200731145141478"> <img src="http://pict.lanyun1103.top/typora/20200731145440.png" alt="image-20200731145440411"></p><h4 id="eg-3"><a href="#eg-3" class="headerlink" title="eg"></a>eg</h4><p><img src="http://pict.lanyun1103.top/typora/20200731145556.png" alt="image-20200731145556654"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常微分方程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>垫底辣妹感想</title>
      <link href="/2020/07/26/dian-di-la-mei-gan-xiang/"/>
      <url>/2020/07/26/dian-di-la-mei-gan-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="垫底辣妹"><a href="#垫底辣妹" class="headerlink" title="垫底辣妹"></a>垫底辣妹</h1><p><img src="http://pict.lanyun1103.top/typora/20200801122234.jpg?x-oss-process=image/auto-orient,1/interlace,1/quality,q_90/format,jpeg/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_12,g_se,x_10,y_10" alt="20200726143526"></p><p>看完感触良多，实在不知道一时间应该如何说起</p><p>沙耶加也休学了，可能这是这部片子第一个和我产生共鸣之处</p><p>那我就从前往后，说说沙耶加和我，有几分相似</p><h2 id="同伴"><a href="#同伴" class="headerlink" title="同伴"></a>同伴</h2><p>几年前，我也有三个，经常，几乎每日都在一起的同伴。我们在一起打电玩，上网，在无法挣钱的年纪挥霍自己有限的金钱，有限的时间。在高中时期我们还是会联系，但是我仅记得的最后一次相聚，也已经是五年前了。</p><p>好像那段时间每天都在玩，暑假也是，双休也是，和沙耶加的人生不同，我曾是班级名列前茅，被班主任称作是班级唯一一个可能考上省重点高中的学生。</p><p>甚至在中考后，我在电玩城的门口接通落榜电话后，下一秒又能抛到脑后。</p><p>人生中有很多选择，你最不注意的，是最可能，改变你人生的。</p><p>我们四个曾像她们四人组一样，就算去玩mc也非常欣喜。</p><p>现在回想，这大概是叛逆。真是可恶呢，不过如果不是如此我现在才不会有这么多感想可以写出来，也不会有别人不会经历的人生。</p><h2 id="奋斗"><a href="#奋斗" class="headerlink" title="奋斗"></a>奋斗</h2><p>我想我的奋斗是从高三才开始的。</p><p>我听过很多人的故事，因为我自己是对咸鱼翻身最了解的人。就和沙耶加一样。</p><p>一年能做什么，我想只有我自己知道，一年，能从班级倒五-&gt;班级前五(班级五十人)。</p><p>所以我说什么时候奋斗都不会晚，真的不会，需要的只是一个目标，不被大环境改变的心。</p><p>高三那年我变了很多，我曾经不相信刷题，不相信基础的东西能带给我什么大的改变。我买了书店的最后一本刷题秘卷，当时的欣喜想告诉全世界，但是和现在一样，我的身边没有什么和我志同道合的朋友。</p><p>故事的开头只要从我开始，我就可以源源不断的想起高三奋斗的日子。当自习室学着学着只剩下自己一个人，在窗边让夏风浸透短袖，在水房穿着裤衩冲凉，那段时间的一切回忆都是宝藏，都是自己亲身经历过，让自己现在没有理由停止奋斗的理想。</p><h2 id="否定"><a href="#否定" class="headerlink" title="否定"></a>否定</h2><p>我当然是不被看好的。或者很少有老师觉得我可以考好。</p><p>数学课上睡觉，看都不会看我，英语课上举手，看都不会看我。</p><p>因为我是借读生，借读生——花钱进来拿个高中文凭。</p><p>高一时生物考过40，地理考过50。</p><p>高三时物理考过25，数学考过60。</p><p>没有夸张，因为我的物理真的可以差到老师看到这个分都感觉我没有希望。</p><p>我只记得我的生物老师和化学老师，曾在需要的时候帮助我，说我可以，多买点题目做，多和同桌学学，就算考不过也要争口气。</p><h2 id="希冀"><a href="#希冀" class="headerlink" title="希冀"></a>希冀</h2><p>高中三年家人给了我很大支持，有老师，也有同学。</p><p>所以在说起从前，我总是会发现我们这种自己学上来的人，要比那些一步一步稳扎稳打上来的人更明白自学的重要，也明白怎么去自学。</p><p>所以在说起奋斗的结果，我会说I deserve it。</p><h2 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h2><p>在大学我休学，我学习，因为我不知道怎么弥补自己以前做的错事。</p><p>人总是在进步的，但是我缺少自信。</p><p>我觉得上一个好的学校，最重要的是你会拥有自信，或者你有更强大的自信去创建更广阔的朋友圈。</p><p>求知若渴，方得安心</p>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab_存储论</title>
      <link href="/2020/07/26/chu-cun-lun-gai-shu/"/>
      <url>/2020/07/26/chu-cun-lun-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="存储论"><a href="#存储论" class="headerlink" title="存储论"></a>存储论</h2><p>存贮论（或称为库存论）是定量方法和技术最早的领域之一，是研究存贮系统的性质、运行规律以及如何寻找最优存贮策略的一门学科，是运筹学的重要分支。存贮论的数学模型一般分成两类：一类是确定性模型，它不包含任何随机因素，另一类是带有随机因素的随机存贮模型。 <a href="https://baike.baidu.com/item/%E5%AD%98%E8%B4%AE%E8%AE%BA/10601625?fr=aladdin">百度存贮论</a></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>所谓存贮实质上是将供应与需求两个环节以存贮中心联结起来，起到协调与缓和供需之间矛盾的作用。存贮模型的基本形式如图 1 所示：<img src="http://pict.lanyun1103.top/typora/20200726122421.png" alt="image-20200726122421628"></p><h4 id="1．存贮问题的基本要素"><a href="#1．存贮问题的基本要素" class="headerlink" title="1．存贮问题的基本要素"></a>1．存贮问题的基本要素</h4><p>（1）需求率：单位时间内对某种物品的需求量，用 <em>D</em> 表示。</p><p>（2）订货批量：一次订货中，包含某种货物的数量，用_Q_ 表示。</p><p>（3）订货间隔期：两次订货之间的时间间隔，用_T_ 表示。</p><h4 id="2．存贮模型的基本费用"><a href="#2．存贮模型的基本费用" class="headerlink" title="2．存贮模型的基本费用"></a>2．存贮模型的基本费用</h4><p>（1）订货费：每组织一次生产、订货或采购的费用，通常认为与定购数量无关，记为*C*<em>D</em> 。</p><p>（2）存贮费：所有用于存贮的全部费用，通常与存贮物品的多少和时间长短有关。单位存贮费记为*C*<em>P</em> 。</p><p>（3）短缺损失费：由由于物品短缺所产生的一切损失费用，通常与损失物品的多少和短缺时间的长短有关，记为*C*<em>S</em></p><h4 id="3．存贮策略"><a href="#3．存贮策略" class="headerlink" title="3．存贮策略"></a>3．存贮策略</h4><p>所谓一个存贮策略，是指决定什么情况下对存贮进行补充，以及补充数量的多少。</p><p>下面是一些比较常见的存贮策略。</p><p>（1）<em>t</em> 循环策略：不论实际的存贮状态如何，总是每隔一个固定的时间_t_ ，补充一个固定的存贮量_Q_ 。</p><p>（2）(<em>t</em>,<em>S</em>) 策略：每隔一个固定的时间_t_ 补充一次，补充数量以补足一个固定的最大存贮量 <em>S</em> 为准。因此，每次补充的数量是不固定的，要视实际存贮量而定。当存 贮（余额）为 <em>I</em> 时，补充数量为_Q_ = <em>S</em> − <em>I</em> 。</p><p>（3）(<em>s</em>,<em>S</em>) 策略：当存贮（余额）为 <em>I</em> ，若 <em>I</em> &gt; <em>s</em> ，则不对存贮进行补充；若 <em>I</em> ≤ <em>s</em> ，则对存贮进行补充，补充数量_Q_ = <em>S</em> − <em>I</em> 。补充后达到最大存贮量 <em>S</em> 。<em>s</em> 称为订货点（或保险存贮量、安全存贮量、警戒点等）。在很多情况下，实际存贮量需要通过盘点才能得知。若每隔一个固定的时间_t_ 盘点一次，得知当时存贮 <em>I</em> ，然后根据 <em>I</em> 是否超过订货点 <em>s</em> ，决定是否订货、订货多少，这样的策略称为(<em>t</em>,<em>s</em>,<em>S</em>)策略</p><h3 id="无约束的确定型存贮模型"><a href="#无约束的确定型存贮模型" class="headerlink" title="无约束的确定型存贮模型"></a>无约束的确定型存贮模型</h3><p>模型一：不允许缺货，补充时间极短—基本的经济订购批量存贮模型(这边只说一下模型一如何求解)<img src="http://pict.lanyun1103.top/typora/20200726123458.png" alt="image-20200726123458092"></p><p><img src="http://pict.lanyun1103.top/typora/20200726123511.png" alt="image-20200726123511416"></p><p><img src="http://pict.lanyun1103.top/typora/20200726123548.png" alt="image-20200726123548247"></p><p><img src="http://pict.lanyun1103.top/typora/20200726123716.png" alt="image-20200726123716472"></p><h4 id="一个例题："><a href="#一个例题：" class="headerlink" title="一个例题："></a>一个例题：</h4><p><img src="http://pict.lanyun1103.top/typora/20200726123814.png" alt="image-20200726123814029"> <img src="http://pict.lanyun1103.top/typora/20200726123825.png" alt="image-20200726123825487"></p><pre class="line-numbers language-none"><code class="language-none">编写如下LINGO程序：model: sets: times&#x2F;1 2&#x2F;:n,Q,C; endsetsdata: n&#x3D;57 58; enddataC_D&#x3D;10; D&#x3D;100*365; C_P&#x3D;0.005*365; @for(times:n&#x3D;D&#x2F;Q;C&#x3D;0.5*C_P*Q+C_D*D&#x2F;Q); end求得全年组织 58 次订货费用少一点。利用 LINGO 软件，我们可以直接求出问题的整数解。LINGO 程序如下：model: sets: times&#x2F;1..100&#x2F;:C,Q; !100不是必须的，通常取一个适当大的数就可以了;endsetsC_D&#x3D;10; D&#x3D;100*365; C_P&#x3D;0.005*365; @for(times(i):Q(i)&#x3D;D&#x2F;i;C(i)&#x3D;0.5*C_P*Q+C_D*D&#x2F;Q); C_min&#x3D;@min(times:C); Q_best&#x3D;@sum(times(i):Q(i)*(C(i) #eq# C_min)); N_best&#x3D;D&#x2F;Q_best; end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模型二：允许缺货，补充时间较长—经济生产批量存贮模型</p><p>模型三：不允许缺货，补充时间较长—基本的经济生产批量存贮模型</p><p>模型四：允许缺货，补充时间极短的经济订购批量存贮模型</p><p>模型五：经济定购批量折扣模型</p><h3 id="有约束的确定型存贮模型"><a href="#有约束的确定型存贮模型" class="headerlink" title="有约束的确定型存贮模型"></a>有约束的确定型存贮模型</h3><p>和上面差不多，需要添加约束条件</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模型算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab_线性规划、非线性规划</title>
      <link href="/2020/07/25/matlab-xian-xing-gui-hua-fei-xian-xing-gui-hua/"/>
      <url>/2020/07/25/matlab-xian-xing-gui-hua-fei-xian-xing-gui-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="一、线性规划"><a href="#一、线性规划" class="headerlink" title="一、线性规划"></a>一、线性规划</h2><p>线性规划(Linear Programming 简记 LP)则是数学规划的一个重要分支。自从 1947 年 G. B. Dantzig 提出求解线性规划的单纯形方法以来，线性规划在理论上趋向成熟，在实用中日益广泛与深入。特别是在计算机能处理成千上万个约束条件和决策变量的线性规划问题之后，线性规划的适用领域更为广泛了，已成为现代管理中经常采用的基本方法之一。</p><p>线性规划使用lingo进行比较方便，这里先说matlab如何求解。以下是matlab的标准线性规划格式</p><p><img src="http://lanyun1103.top/wp-content/uploads/2020/07/1.png"></p><p>了解这个以后需要知道</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">lingrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">%了解这个函数如何使用</span><span class="token comment">%在matlab中输入lingrop help可以查看这个函数的所有使用方法</span><span class="token comment">%这里说一下这个函数的所有参数是什么</span><span class="token comment">%   f是需要求解的线性函数，A和B是限制，Aeq和Beq是等式限制，如果没有使用[]代替，lb,ub是自变量的范围，options是可选的初值条件，一般使用zeros(*,*)表示从0开始</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>fval<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">linprog</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>A<span class="token punctuation">,</span>b<span class="token punctuation">,</span>Aeq<span class="token punctuation">,</span>beq<span class="token punctuation">,</span>lb<span class="token punctuation">,</span>ub<span class="token punctuation">,</span>options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是lingo写起来就很舒服，lingo需要知道的是他自己的函数</p><pre class="line-numbers language-lingo" data-language="lingo"><code class="language-lingo">@abs() 绝对值@bin() 0-1变量@gin() 整数规划<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里说到了整数规划，Matlab的整数规划不再展开来说，基本是由分枝法确定最终答案的范围，一步一步取得变量的整数解，而lingo可以直接限制为gin就很舒服了</p><h2 id="二、非线性规划"><a href="#二、非线性规划" class="headerlink" title="二、非线性规划"></a>二、非线性规划</h2><p>求一个函数的最大值（或最小值）问题，其中至少有一个非线性函数，这类问题称之为非线性规划问题。</p><p>对于一个实际问题，在把它归结成非线性规划问题时，一般要注意如下几点：</p><p>（i）确定供选方案：首先要收集同问题有关的资料和数据，在全面熟悉问题的基础上，确认什么是问题的可供选择的方案，并用一组变量来表示它们。</p><p>（ii）提出追求目标：经过资料分析，根据实际需要和可能，提出要追求极小化或极大化的目标。并且，运用各种科学和技术原理，把它表示成数学关系式。</p><p>（iii）给出价值标准：在提出要追求的目标之后，要确立所考虑目标的“好”或“坏”的价值标准，并用某种数量形式来描述它。</p><p>（iv）寻求限制条件：由于所追求的目标一般都要在一定的条件下取得极小化或极大化效果，因此还需要寻找出问题的所有限制条件，这些条件通常用变量之间的一些不等式或等式来表示。</p><p>MATLAB的非线性规划基本格式</p><p><img src="http://lanyun1103.top/wp-content/uploads/2020/07/7KYCMG4U1MBQ7M3NGA.png"></p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">X<span class="token operator">=</span><span class="token function">fmincon</span><span class="token punctuation">(</span>FUN<span class="token punctuation">,</span>X0<span class="token punctuation">,</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>Aeq<span class="token punctuation">,</span>Beq<span class="token punctuation">,</span>LB<span class="token punctuation">,</span>UB<span class="token punctuation">,</span>NONLCON<span class="token punctuation">,</span>OPTIONS<span class="token punctuation">)</span><span class="token comment">%它的返回值是向量 x ，其中 FUN 是用 M 文件定义的函数 f (x)；X0是x的初始值;A,B,Aeq,Beq 定义了线性约束</span><span class="token comment">%如果没有线性约束，则A=[],B=[],Aeq=[],Beq=[]；LB 和 UB 是变量 x 的下界和上界，如果上界和下界没有约束，则 LB=[]，UB=[]，</span><span class="token comment">%NONLCON 是用 M 文件定义的非线性向量函数C(x),Ceq(x)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一般步骤：</p><ol><li> 使用m定义目标函数</li><li> 使用m定义非线性约束条件</li><li> 使用m创建主程序文件</li></ol><h3 id="1-无约束问题"><a href="#1-无约束问题" class="headerlink" title="1.无约束问题"></a>1.无约束问题</h3><h4 id="使用一维搜索方法："><a href="#使用一维搜索方法：" class="headerlink" title="使用一维搜索方法："></a>使用一维搜索方法：</h4><h5 id="斐波那契法："><a href="#斐波那契法：" class="headerlink" title="斐波那契法："></a>斐波那契法：</h5><h5 id="0-618法"><a href="#0-618法" class="headerlink" title="0.618法"></a>0.618法</h5><h3 id="2-二次插值法"><a href="#2-二次插值法" class="headerlink" title="2.二次插值法"></a>2.二次插值法</h3><p>使用低次多项式来近似目标函数</p><h3 id="3-无约束问题"><a href="#3-无约束问题" class="headerlink" title="3.无约束问题"></a>3.无约束问题</h3><h4 id="梯度法（最速下降法）"><a href="#梯度法（最速下降法）" class="headerlink" title="梯度法（最速下降法）"></a>梯度法（最速下降法）</h4><h4 id="牛顿法"><a href="#牛顿法" class="headerlink" title="牛顿法"></a>牛顿法</h4><p><img src="http://lanyun1103.top/wp-content/uploads/2020/07/N2B84OJOXRK9@9W.png"></p><h4 id="变尺度法"><a href="#变尺度法" class="headerlink" title="变尺度法"></a>变尺度法</h4><h3 id="4-无约束极值问题"><a href="#4-无约束极值问题" class="headerlink" title="4.无约束极值问题"></a>4.无约束极值问题</h3><p>在 Matlab 工具箱中，用于求解无约束极值问题的函数有 fminunc 和 fminsearch，用法介绍如下：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">fminunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fminsearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span>FVAL<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">FMINUNC</span><span class="token punctuation">(</span>FUN<span class="token punctuation">,</span>X0<span class="token punctuation">,</span>OPTIONS<span class="token punctuation">,</span>P1<span class="token punctuation">,</span>P2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">)</span> <span class="token comment">% 其中的返回值 X 是所求得的极小点，FVAL 是函数的极小值，其它返回值的含义参见相关的帮助。FUN 是一个 M 文件，当 FUN 只有一个返回值时，它的返回值是函数 f (x)； 当 FUN 有两个返回值时，它的第二个返回值是 f (x)的梯度向量；当 FUN 有三个返回值时，它的第三个返回值是 f (x)的二阶导数阵（Hessian 阵）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-约束极值问题"><a href="#5-约束极值问题" class="headerlink" title="5.约束极值问题"></a>5.约束极值问题</h3><p>太多了，百度比我说得好</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模型算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速的创建一个属于自己的博客</title>
      <link href="/2020/07/24/chuang-jian-zi-ji-de-bo-ke/"/>
      <url>/2020/07/24/chuang-jian-zi-ji-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="如何快速的创建一个属于自己的博客"><a href="#如何快速的创建一个属于自己的博客" class="headerlink" title="如何快速的创建一个属于自己的博客"></a>如何快速的创建一个属于自己的博客</h1><p>写给想要自学创建自己博客的同学的话</p><p>现在创建博客很方便</p><ol><li> 自购服务器</li><li> 自购域名</li><li> 搭建宝塔平台</li><li> 一键搭建博客</li><li> 对博客想干啥就干啥</li></ol><p>网上现在教程很多，每一步都有足够多的教程。我不会做教程的。。让我重新弄一遍不如让我去死</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p><strong>我这里只是说一下步骤，让你不在实现了一步之后不知道下一步怎么做，具体怎么实现每一步都要按照教程一步一步做。</strong></p><p>我在过程中出错过很多次，各种奇怪的问题跑到google上面搜，<em>有的问题只是你不按照教程一步步弄产生的</em></p><p>所以创建博客是一个考验基础也考验耐心的东西。不管是创建的前期步骤还是后期的域名备案。</p><hr><h2 id="一、自购服务器"><a href="#一、自购服务器" class="headerlink" title="一、自购服务器"></a>一、自购服务器</h2><p>推荐购买阿里云服务器，阿里云做的服务很多，全国服务器的位置也比较多，我在备案那段时间还会有一个专门服务的客服给你解答一些问题（虽然我啥都没问，只是加了她钉钉，还挺后悔的）。</p><p>购买服务器比较简单，一步一步做就可以，现在学生有优惠，在25岁之前都可以以超低价购买服务器，一个月9块钱左右，比svip便宜多啦！<a href="https://promotion.aliyun.com/ntms/act/campus2018.html#stage">阿里购买地址</a></p><p>记得是购买轻量应用服务器，而不是ECS服务器，那个服务器我到现在不知道如何使用，功能比较多，但是大部分你都用不上。</p><h2 id="二、自购域名"><a href="#二、自购域名" class="headerlink" title="二、自购域名"></a>二、自购域名</h2><p>一起在阿里云买了，一套龙服务最好的是：购买之后他会提醒你使用阿里云dns，全自动帮你域名解析，你啥都不知道都没关系。</p><p>不推荐购买com结尾的大域名，如果你有钱，那我闭嘴。</p><h2 id="三、搭建宝塔平台"><a href="#三、搭建宝塔平台" class="headerlink" title="三、搭建宝塔平台"></a>三、搭建宝塔平台</h2><p>这个涉及linux的操作。</p><p>在阿里云服务器控制中，远程连接到服务器控制台（也可以通过ssh）。</p><p><img src="http://pict.lanyun1103.top/typora/20200724150904.png" alt="image-20200724150903942"></p><p>（这个打码。。其实没意义，你要是懂一丢丢黑客会的东西都知道怎么弄到ip地址</p><p>之后只需要安装网上的教程下载linux平台下的宝塔平台。</p><p>安装完成后管理起来就非常简单了，你不需要再去linux终端里面这边cd那边ll，文件管理就和windows差不多。<img src="http://pict.lanyun1103.top/typora/20200724151221.png" alt="image-20200724151221106"></p><p>在下面有软件商店</p><h2 id="四、搭建博客"><a href="#四、搭建博客" class="headerlink" title="四、搭建博客"></a>四、搭建博客</h2><p><img src="http://pict.lanyun1103.top/typora/20200724151255.png" alt="image-20200724151255545"></p><p>不想折腾其他的一键部署wordpress就可以了，如果提示安装php最好安装最新的，你不安装最新的也会被他天天催催催更新催到恶心，几个小红点真的恶心强迫症。</p><p><img src="http://pict.lanyun1103.top/typora/20200724151402.png" alt="image-20200724151402283"> 这几个环境最好都安装上（除了Apache，安装了不知道会不会和Tomcat有什么兼容问题）</p><h2 id="五、随便怎么折腾自己的博客"><a href="#五、随便怎么折腾自己的博客" class="headerlink" title="五、随便怎么折腾自己的博客"></a>五、随便怎么折腾自己的博客</h2><p>完成了一键搭建之后就可以进入博客的管理界面。</p><p>注意：先从网上找一个自己喜欢的主题，我推荐Kratos的主题，这是我第一个喜欢到花钱的主题，作者更新也很勤快（给钱更勤快）<img src="http://pict.lanyun1103.top/typora/20200724152250.png" alt="image-20200724152250056"></p><p>如果你先好奇心暴涨，开始随便折腾自己主题界面，事实上再折腾那几个初始的主题就那个鬼样子，特别简陋。 再去找其他主题的话之前的设置都会消失。</p><p>就这样</p>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab_对策论、微分稳定方程</title>
      <link href="/2020/07/23/matlab-dui-ce-lun-wei-fen-wen-ding-fang-cheng/"/>
      <url>/2020/07/23/matlab-dui-ce-lun-wei-fen-wen-ding-fang-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="对策论"><a href="#对策论" class="headerlink" title="对策论"></a>对策论</h2><p>社会及经济的发展带来了人与人之间或团体之间的竞争及矛盾，应用科学的方法来解决这样的问题开始于 17 世纪的科学家，如 C.，Huygens 和 W.，Leibnitz 等。现代对策论起源于 1944 年 J.，Von Neumann 和 O.，Morgenstern 的著作《Theory of Games and Economic Behavior》。对策论亦称竞赛论或博弈论。是研究具有斗争或竞争性质现象的数学理论和方法。一般认为，它既是现代数学的一个新分支，也是运筹学中的一个重要学科。对策论发展的历史并不长，但由于它所研究的现象与人们的政治、经济、军事活动乃至一般的日常生活等有着密切的联系，并且处理问题的方法又有明显特色。所以日益引起广泛的注意。在日常生活中，经常看到一些具有相互之间斗争或竞争性质的行为。具有竞争或对抗性质的行为称为<strong>对策行为</strong>。在这类行为中。参加斗争或竞争的各方各自具有不同的目标和利益。为了达到各自的目标和利益，各方必须考虑对手的各种可能的行动方案，并力图选取对自己最为有利或最为合理的方案。对策论就是研究对策行为中斗争各方是否存在着最合理的行动方案，以及如何找到这个合理的行动方案的数学理论和方法。</p><h3 id="对策问题"><a href="#对策问题" class="headerlink" title="对策问题"></a>对策问题</h3><p>参与者为利益相互冲突的各方</p><p>最经典的例子就是穷途困境</p><h3 id="对策的基本要素"><a href="#对策的基本要素" class="headerlink" title="对策的基本要素"></a>对策的基本要素</h3><p>1.局中人</p><p>在一个对策行为（或一局对策）中，有权决定自己行动方案的对策参加者，称为局中人。通常用 <em>I</em> 表示局中人的集合．如果有_n_ 个局中人，则 <em>I</em> = {1,2,L,<em>n</em>}。一般要求一个对策中至少要有两个局中人。在例 1 中，局中人是 <em>A_、_B</em> 两名疑犯。</p><p>2.策略集</p><p>一局对策中，可供局中人选择的一个实际可行的完整的行动方案称为一个策略。参加对策的每一局中人_i_ ，<em>i</em> ∈ <em>I</em> ，都有自己的策略集 *S*<em>i</em> 。一般，每一局中人的策略集中至少应包括两个策略。</p><p>3.赢得函数（支付函数）</p><p>在一局对策中，各局中人所选定的策略形成的策略组称为一个局势，即若 <em>i</em> <em>s</em> 是第_i_个局中人的一个策略，则_n_ 个局中人的策略组<img src="https://lanyun1103.oss-cn-beijing.aliyuncs.com/typora/20200723184523.png" alt="image-20200723184515919"> 是一个局势。</p><p>全体局势的集合 S 可用各局中人策略集的笛卡尔积表示，即<img src="https://lanyun1103.oss-cn-beijing.aliyuncs.com/typora/20200723184534.png" alt="image-20200723184534466"></p><p>当局势出现后，对策的结果也就确定了。也就是说，对任一局势， <em>s_∈_S</em> ，局中人_i_ 可以得到一个赢得 <em>H</em> (<em>s</em>) <em>i</em> 。显然， <em>H</em> (<em>s</em>) <em>i</em> 是局势 <em>s</em> 的函数，称之为第_i_ 个局中人的赢得函数。这样，就得到一个向量赢得函数</p><h3 id="零和对策（矩阵对策）"><a href="#零和对策（矩阵对策）" class="headerlink" title="零和对策（矩阵对策）"></a>零和对策（矩阵对策）</h3><p>零和对策是一类特殊的对策问题。在这类对策中，只有两名局中人，每个局中人都只有有限个策略可供选择。在任一纯局势下，两个局中人的赢得之和总是等于零，即双方的利益是激烈对抗的。</p><p><img src="https://lanyun1103.oss-cn-beijing.aliyuncs.com/typora/20200723190154.png" alt="image-20200723190154811"></p><p>当局中人Ⅰ、Ⅱ和策略集 1 <em>S</em> 、 2 <em>S</em> 及局中人Ⅰ的赢得矩阵 <em>A</em> 确定后，一个零和对策就给定了，零和对策又可称为矩阵对策并可简记成<img src="http://pict.lanyun1103.top/typora/20200723191315.png" alt="image-20200723191315717"></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><img src="http://pict.lanyun1103.top/typora/20200723204317.png" alt="image-20200723204317872"> <img src="http://pict.lanyun1103.top/typora/20200723204335.png" alt="image-20200723204335462"> <img src="http://pict.lanyun1103.top/typora/20200723204352.png" alt="image-20200723204352465"></p><h3 id="由此定义"><a href="#由此定义" class="headerlink" title="由此定义"></a>由此定义</h3><p><img src="http://pict.lanyun1103.top/typora/20200723204426.png" alt="image-20200723204426789"></p><h3 id="对策论未完待续"><a href="#对策论未完待续" class="headerlink" title="对策论未完待续"></a>对策论未完待续</h3><h2 id="稳定状态模型"><a href="#稳定状态模型" class="headerlink" title="稳定状态模型"></a>稳定状态模型</h2><p>虽然动态过程的变化规律一般要用微分方程建立的动态模型来描述，但是对于某些实际问题，建模的主要目的并不是要寻求动态过程每个瞬时的性态，而是研究某种意义下稳定状态的特征，特别是当时间充分长以后动态过程的变化趋势。譬如在什么情况下描述过程的变量会越来越接近某些确定的数值，在什么情况下又会越来越远离这些数值而导致过程不稳定。为了分析这种稳定与不稳定的规律常常不需要求解微分方程，而可以利用微分方程稳定性理论，直接研究平衡状态的稳定性就行了。</p><h3 id="微分方程稳定性理论简介"><a href="#微分方程稳定性理论简介" class="headerlink" title="微分方程稳定性理论简介"></a>微分方程稳定性理论简介</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><h5 id="1-自治方程"><a href="#1-自治方程" class="headerlink" title="1.自治方程"></a>1.自治方程</h5><p>称一个常微分方程（组）是自治的，如果方程（组） <img src="http://pict.lanyun1103.top/typora/20200723191726.png" alt="image-20200723191726018"></p><p>当然，一个非自治方程可以变换成自治系统： <img src="http://pict.lanyun1103.top/typora/20200723191834.png" alt="image-20200723191834545"> 等价</p><h5 id="2-相空间与相图"><a href="#2-相空间与相图" class="headerlink" title="2.相空间与相图"></a>2.相空间与相图</h5><p><img src="http://pict.lanyun1103.top/typora/20200723193102.png" alt="image-20200723193102044"></p><h5 id="3-奇点"><a href="#3-奇点" class="headerlink" title="3.奇点"></a>3.奇点</h5><p>对于 <img src="http://pict.lanyun1103.top/typora/20200723193158.png" alt="image-20200723193158284"> <em>ad</em> − <em>bc</em> = 0时，有一个连续的奇点的集合。当 <em>ad</em> − <em>bc</em> ≠ 0时，(0,0) 是这个系统的唯一的奇点。</p><p><strong>定理</strong>：设 <em>F</em>(<em>x</em>) 是实解析函数，且 x0 是系统的奇点。若 <em>F</em>(<em>x</em>) 在点 0 <em>x</em> 处的Jacobian 矩阵是非奇异的，则 x0 是该系统的孤立奇点</p><h3 id="再生资源的管理和开发"><a href="#再生资源的管理和开发" class="headerlink" title="再生资源的管理和开发"></a>再生资源的管理和开发</h3><p>渔业资源是一种再生资源，再生资源要注意适度开发，不能为了一时的高产“竭泽而渔”，应该在持续稳产的前提下追求最高产量或最优的经济效益。</p><p>这是一类可再生资源管理与开发的模型，这类模型的建立一般先考虑在没有收获的情况下资源自然增长模型，然后再考虑收获策略对资源增长情况的影响。</p><h4 id="1-资源增长模型"><a href="#1-资源增长模型" class="headerlink" title="1.资源增长模型"></a>1.资源增长模型</h4><p>考虑某种鱼的种群的动态。在建立模型之前，做如下的基本假设：</p><p>（i）鱼群的数量本身是离散变量，谈不到可微性。但是，由于突然增加或减少的只是单一个体或少数几个个体，与全体数量相比，这种增长率是微小的。所以，可以近似地假设鱼群的数量随时间连续地，甚至是可微地变化。</p><p>（ii）假设鱼群生活在一个稳定的环境中，即其增长率与时间无关。</p><p>（iii）种群的增长是种群个体死亡与繁殖共同作用的结果。</p><p>（iv）资源有限的生存环境对种群的繁衍，生长有抑制作用，而且这一作用与鱼群的数量是成正比的。</p><p>记时刻_t_ 渔场中鱼量为 <em>x</em>(<em>t</em>) ，我们可以得到 <em>x</em>(<em>t</em>) 所满足的 Logistic 模型： <img src="http://pict.lanyun1103.top/typora/20200723195818.png" alt="image-20200723195818059"></p><p>其中 <em>r</em> 是固有增长率， <em>N</em> 是环境容许的最大鱼量。由分离变量法求得方程解为 <img src="http://pict.lanyun1103.top/typora/20200723195842.png" alt="image-20200723195842723"></p><h4 id="2-资源开发模型"><a href="#2-资源开发模型" class="headerlink" title="2.资源开发模型"></a>2.资源开发模型</h4><p>建立一个在捕捞情况下渔场鱼量遵从的方程，分析鱼量稳定的条件，并且在稳定的前提下，讨论如何控制捕捞使持续产量或经济效益达到最大。设单位时间的捕捞量与渔场鱼量 <em>x</em>(<em>t</em>) 成正比，比例系数_k_ 表示单位时间捕捞率，<em>k_可以进一步分解分解为_k</em> = <em>qE</em> ，<em>E</em> 称为捕捞强度，用可以控制的参数如出海渔船数来度量； <em>q</em> 称为捕捞系数，表示单位强度下的捕捞率。为方便取 <em>q</em> = 1，于是单位时间的捕捞量为 <em>h</em>(<em>x</em>) = <em>Ex</em>(<em>t</em>)。 <em>h</em>(<em>x</em>) = 常数，表示一个特定的捕捞策略，即要求捕鱼者每天只能捕捞一定的数量。这样，捕捞情况下渔场鱼量满足方程<img src="http://pict.lanyun1103.top/typora/20200723200747.png" alt="image-20200723200747077"></p><p>如何才能做到渔资源在持续捕捞的条件下为我们提供最大的收益 <img src="http://pict.lanyun1103.top/typora/20200723200840.png" alt="image-20200723200840171"><img src="http://pict.lanyun1103.top/typora/20200723200943.png" alt="image-20200723200943826"></p><h4 id="3-经济效益模型"><a href="#3-经济效益模型" class="headerlink" title="3.经济效益模型"></a>3.经济效益模型</h4><h4 id="4-种群竞争模型"><a href="#4-种群竞争模型" class="headerlink" title="4.种群竞争模型"></a>4.种群竞争模型</h4>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模型算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab_排队论模型</title>
      <link href="/2020/07/22/matlab-pai-dui-lun-mo-xing/"/>
      <url>/2020/07/22/matlab-pai-dui-lun-mo-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="排队论模型"><a href="#排队论模型" class="headerlink" title="排队论模型"></a>排队论模型</h2><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>排队是在日常生活中经常遇到的现象，如顾客到商店购买物品、病人到医院看病常常要排队。此时要求服务的数量超过服务机构（服务台、服务员等）的容量。也就是说，到达的顾客不能立即得到服务，因而出现了排队现象。这种现象不仅在个人日常生活中出现，电话局的占线问题，车站、码头等交通枢纽的车船堵塞和疏导，故障机器的停机待修，水库的存贮调节等都是有形或无形的排队现象。由于顾客到达和服务时间的随机性。可以说排队现象几乎是不可避免的。</p><p><strong>排队论</strong>（Queuing Theory）也称<strong>随机服务系统理论</strong>，就是为解决上述问题而发展的一门学科。它研究的内容有下列三部分：</p><ol><li> 性态问题，即研究各种排队系统的概率规律性，主要是研究队长分布、等待时间分布和忙期分布等，包括了瞬态和稳态两种情形。</li><li> 最优化问题，又分静态最优和动态最优，前者指最优设计。后者指现有排队系统的最优运营。</li><li> 排队系统的统计推断，即判断一个给定的排队系统符合于哪种模型，以便根据排队理论进行分析研究。</li></ol><p>排队论的一般模型</p><p><img src="https://lanyun1103.oss-cn-beijing.aliyuncs.com/typora/20200722100728.png" alt="image-20200722100728588"></p><p>各个顾客从顾客源出发，随机地来到服务机构，按一定的排队规则等待服务，直到按一定的服务规则接受完服务后离开排队系统。 凡要求服务的对象统称为<strong>顾客</strong>，为顾客服务的人或物称为<strong>服务员</strong>，由顾客和服务员组成服务系统。对于一个服务系统来说，如果服务机构过小，以致不能满足要求服务的众多顾客的需要，那么就会产生拥挤现象而使服务质量降低。 因此，顾客总希望服务机构越大越好，但是，如果服务机构过大，人力和物力方面的开支也就相应增加，从而会造成浪费，因此<strong>研究排队模型的目的就是要在顾客需要和服务机构的规模之间进行权衡决策，使其达到合理的平衡</strong>。</p><h3 id="二、排队系统的组成和特征"><a href="#二、排队系统的组成和特征" class="headerlink" title="二、排队系统的组成和特征"></a>二、排队系统的组成和特征</h3><p>一般的排队过程都由输入过程、排队规则、服务过程三部分组成</p><h4 id="1-输入过程"><a href="#1-输入过程" class="headerlink" title="1.输入过程"></a>1.输入过程</h4><p>输入过程是指顾客到来时间的规律性，可能有下列不同情况：</p><p>（i）顾客的组成可能是有限的，也可能是无限的。</p><p>（ii）顾客到达的方式可能是一个—个的，也可能是成批的。</p><p>（iii）顾客到达可以是相互独立的，即以前的到达情况对以后的到达没有影响；否则是相关的。</p><p>（iv）输入过程可以是平稳的，即相继到达的间隔时间分布及其数学期望、方差等数字特征都与时间无关，否则是非平稳的。</p><h4 id="2-排队规则"><a href="#2-排队规则" class="headerlink" title="2.排队规则"></a>2.排队规则</h4><p>排队规则指到达排队系统的顾客按怎样的规则排队等待，可分为损失制，等待制和混合制三种。</p><p>（i）损失制（消失制）。当顾客到达时，所有的服务台均被占用，顾客随即离去。</p><p>（ii）等待制。当顾客到达时，所有的服务台均被占用，顾客就排队等待，直到接受完服务才离去。例如出故障的机器排队等待维修就是这种情况。</p><p>（iii）混合制。介于损失制和等待制之间的是混合制，即既有等待又有损失。有队列长度有限和排队等待时间有限两种情况，在限度以内就排队等待，超过一定限度就离去。</p><p>排队方式还分为单列、多列和循环队列。</p><h4 id="3-服务过程"><a href="#3-服务过程" class="headerlink" title="3.服务过程"></a>3.服务过程</h4><p>（i）服务机构。主要有以下几种类型：单服务台；多服务台并联（每个服务台同时为不同顾客服务）；多服务台串联（多服务台依次为同一顾客服务）；混合型。</p><p>（ii）服务规则。按为顾客服务的次序采用以下几种规则：</p><p>①先到先服务，这是通常的情形。</p><p>②后到先服务，如情报系统中，最后到的情报信息往往最有价值，因而常被优先处理。</p><p>③随机服务，服务台从等待的顾客中随机地取其一进行服务，而不管到达的先后。</p><p>④优先服务，如医疗系统对病情严重的病人给予优先治疗。</p><p>排队模型用六个符号表示，在符号之间用斜线隔开，即 <em>X</em> /<em>Y</em> / <em>Z</em> / <em>A</em>/ <em>B</em> /<em>C</em> 。第一个符号 <em>X</em> 表示顾客到达流或顾客到达间隔时间的分布；第二个符号_Y_ 表示服务时间的分布；第三个符号 <em>Z</em> 表示服务台数目；第四个符号 <em>A</em> 是系统容量限制；第五个符号 <em>B</em> 是顾客源数目；第六个符号_C_ 是服务规则，如先到先服务 FCFS，后到先服务 LCFS 等。并约定，如略去后三项，即指 <em>X</em> /<em>Y</em> / <em>Z</em> / ∞ / ∞ / FCFS的情形。我们只讨论先到先服务 FCFS的情形，所以略去第六项。</p><p>表示顾客到达间隔时间和服务时间的分布的约定符号为：</p><ul><li>  <em>M</em> —指数分布（ <em>M</em> 是 Markov 的字头，因为指数分布具有无记忆性，即 Markov性）；</li><li>  <em>D</em> —确定型（Deterministic）；</li><li>  *E*<em>k</em> —<em>k</em> 阶爱尔朗(Erlang)分布；</li><li>  <em>G</em> —一般（general）服务时间的分布；</li><li>  <em>GI</em> —一般相互独立（General Independent）的时间间隔的分布。</li></ul><p>例如， <em>M</em> / <em>M</em> /1表示相继到达间隔时间为指数分布、服务时间为指数分布、单服务台、等待制系统。 <em>D</em> / <em>M</em> / <em>c</em> 表示确定的到达时间、服务时间为指数分布、 <em>c</em> 个平行服务台（但顾客是一队）的模型</p><h4 id="4-排队系统的运行指标"><a href="#4-排队系统的运行指标" class="headerlink" title="4.排队系统的运行指标"></a>4.排队系统的运行指标</h4><ul><li>  <strong>平均队长</strong>：指系统内顾客数（包括正被服务的顾客与排队等待服务的顾客）的数学期望，记作 *L*<em>s</em> 。</li><li>  **平均排队长:**指系统内等待服务的顾客数的数学期望，记作 *L*_q_。</li><li>  <strong>平均逗留时间</strong>：顾客在系统内逗留时间（包括排队等待的时间和接受服务的时间）的数学期望，记作*W*<em>s</em> 。</li><li>  <strong>平均等待时间</strong>：指一个顾客在排队系统中排队等待时间的数学期望，记作*W*<em>q</em> 。</li><li>  <strong>平均忙期</strong>：指服务机构连续繁忙时间（顾客到达空闲服务机构起，到服务机构再次空闲止的时间）长度的数学期望，记为*T*<em>b</em> 。</li></ul><p>还有由于顾客被拒绝而使企业受到损失的<strong>损失率</strong>以及以后经常遇到的<strong>服务强度</strong>等，这些都是很重要的指标。</p><p>计算这些指标的基础是表达系统状态的概率。所谓<strong>系统的状态</strong>即指系统中顾客数</p><h3 id="三、常用的几种概率分布"><a href="#三、常用的几种概率分布" class="headerlink" title="三、常用的几种概率分布"></a>三、常用的几种概率分布</h3><h4 id="1-连续型概率分布"><a href="#1-连续型概率分布" class="headerlink" title="1.连续型概率分布"></a>1.连续型概率分布</h4><ol><li> 均匀分布</li><li> 正态分布</li><li> 指数分布</li><li> Gamma 分布</li><li> Weibull 分布</li><li> Beta 分布</li></ol><h4 id="2-离散型"><a href="#2-离散型" class="headerlink" title="2.离散型"></a>2.离散型</h4><ol><li> 离散均匀分布</li><li> Bernoulli 分布（两点分布）</li><li> 泊松（Poisson）分布</li><li> 二项分布</li></ol><h3 id="四、几种排队模型"><a href="#四、几种排队模型" class="headerlink" title="四、几种排队模型"></a>四、几种排队模型</h3><h4 id="1-生灭过程"><a href="#1-生灭过程" class="headerlink" title="1.生灭过程"></a>1.生灭过程</h4><h4 id="2-M-M-s-等待制排队模型"><a href="#2-M-M-s-等待制排队模型" class="headerlink" title="2.M / M /s 等待制排队模型"></a>2.<em>M</em> / <em>M</em> /<em>s</em> 等待制排队模型</h4><h4 id="3-多服务台模型（-M-M-s-∞-）"><a href="#3-多服务台模型（-M-M-s-∞-）" class="headerlink" title="3.多服务台模型（ M / M /s/ ∞ ）"></a>3.多服务台模型（ <em>M</em> / <em>M</em> /<em>s</em>/ ∞ ）</h4><h4 id="4-M-M-s-s-损失制排队模型"><a href="#4-M-M-s-s-损失制排队模型" class="headerlink" title="4.M / M / s/ s 损失制排队模型"></a>4.<em>M</em> / <em>M</em> / <em>s</em>/ <em>s</em> 损失制排队模型</h4><h4 id="5-M-M-s-混合制排队模型"><a href="#5-M-M-s-混合制排队模型" class="headerlink" title="5.M / M / s 混合制排队模型"></a>5.<em>M</em> / <em>M</em> / <em>s</em> 混合制排队模型</h4><h4 id="6-有限源模型"><a href="#6-有限源模型" class="headerlink" title="6.有限源模型"></a>6.有限源模型</h4><h4 id="7-服务率或到达率依赖状态的排队模型"><a href="#7-服务率或到达率依赖状态的排队模型" class="headerlink" title="7.服务率或到达率依赖状态的排队模型"></a>7.服务率或到达率依赖状态的排队模型</h4><h3 id="有关的lingo函数"><a href="#有关的lingo函数" class="headerlink" title="有关的lingo函数"></a>有关的lingo函数</h3><p>（1）@peb(load,S)</p><p>该函数的返回值是当到达负荷为 load，服务系统中有 S 个服务台且允许排队时系统繁忙的概率，也就是顾客等待的概率。</p><p>（2）@pel（load,S）</p><p>该函数的返回值是当到达负荷为 load，服务系统中有 S 个服务台且不允许排队时系统损失概率，也就是顾客得不到服务离开的概率。</p><p>（3）@pfs(load,S,K)</p><p>该函数的返回值是当到达负荷为 load，顾客数为 K，平行服务台数量为 S 时，有限源的 Poisson 服务系统等待或返修顾客数的期望值。</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模型算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab_现代优化算法、数据的统计分析与假设检验</title>
      <link href="/2020/07/21/matlab-xian-dai-you-hua-suan-fa-shu-ju-de-tong-ji-fen-xi-yu-jia-she-jian-yan/"/>
      <url>/2020/07/21/matlab-xian-dai-you-hua-suan-fa-shu-ju-de-tong-ji-fen-xi-yu-jia-she-jian-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="现代优化算法"><a href="#现代优化算法" class="headerlink" title="现代优化算法"></a>现代优化算法</h2><p>现代优化算法是 80 年代初兴起的启发式算法。这些算法包括禁忌搜索（tabu search），模拟退火（simulated annealing），遗传算法（genetic algorithms），人工神经网络（neural networks）。它们主要用于解决大量的实际应用问题。目前，这些算法在理论和实际应用方面得到了较大的发展。无论这些算法是怎样产生的，它们有一个共同的目标－求 NP-hard 组合优化问题的全局最优解。虽然有这些目标，但 NP-hard 理论限制它们只能以启发式的算法去求解实际问题。</p><p>启发式算法包含的算法很多，例如解决复杂优化问题的蚁群算法（Ant Colony Algorithms）。有些启发式算法是根据实际问题而产生的，如解空间分解、解空间的限制等；另一类算法是集成算法，这些算法是诸多启发式算法的合成。</p><p>现代优化算法解决组合优化问题，如 TSP（Traveling Salesman Problem）问题，QAP（Quadratic Assignment Problem）问题，JSP（Job-shop Scheduling Problem）问题等效果很好。</p><h3 id="模拟退火算法"><a href="#模拟退火算法" class="headerlink" title="模拟退火算法"></a>模拟退火算法</h3><p>模拟退火算法得益于材料的统计力学的研究成果。统计力学表明材料中粒子的不同结构对应于粒子的不同能量水平。在高温条件下，粒子的能量较高，可以自由运动和重新排列。在低温条件下，粒子能量较低。如果从高温开始，非常缓慢地降温（这个过程被称为退火），粒子就可以在每个温度下达到热平衡。当系统完全被冷却时，最终形成处于低能状态的晶体。</p><p>这说明如果温度下降十分缓慢，而在每个温度都有足够多次的状态转移，使之在每一个温度下达到热平衡，则全局最优解将以概率 1 被找到。因此可以说模拟退火算法可以找到全局最优解。</p><p><img src="https://lanyun1103.oss-cn-beijing.aliyuncs.com/typora/20200721191933.png" alt="image-20200721191933827"></p><p>我们注意到，在每个Ti 下，所得到的一个新状态 <em>x</em>(<em>k</em> +1) 完全依赖于前一个状态_x_(<em>k</em>) ，可以和前面的状态 <em>x</em>(0),L, <em>x</em>(<em>k</em> −1) 无关，因此这是一个马尔可夫过程。使用马尔可夫过程对上述模拟退火的步骤进行分析，结果表明：从任何一个状态 <em>x</em>(<em>k</em>) 生成 <em>x</em>‘ 的概率，在 <em>N</em>(<em>x</em>(<em>k</em>)) 中是均匀分布的，且新状态 <em>x</em>‘ 被接受的概率满足式（1），那么经过有限次的转换，在温度Ti 下的平衡态 xi 的分布由下式给出：</p><p><img src="https://lanyun1103.oss-cn-beijing.aliyuncs.com/typora/20200721192122.png" alt="image-20200721192122741"></p><h3 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h3><p>遗传算法（Genetic Algorithms，简称 GA）是一种基于自然选择原理和自然遗传机制的搜索（寻优）算法，它是模拟自然界中的生命进化机制，在人工系统中实现特定目标的优化。遗传算法的实质是通过群体搜索技术，根据适者生存的原则逐代进化，最终得到最优解或准最优解。它必须做以下操作：初始群体的产生、求每一个体的适应度、根据适者生存的原则选择优良个体、被选出的优良个体两两配对，通过随机交叉其染色体的基因并随机变异某些染色体的基因后生成下一代群体，按此方法使群体逐代进化，直到满足进化终止条件。其实现方法如下：</p><ol><li> 根据具体问题确定可行解域，确定一种编码方法，能用数值串或字符串表示可行解域的每一解。</li><li> 对每一解应有一个度量好坏的依据，它用一函数表示，叫做适应度函数，适应度函数应为非负函数。</li><li> 确定进化参数群体规模 <em>M</em> 、交叉概率 *p<strong>c <em>、变异概率</em> p</strong>m* 、进化终止条件。</li></ol><p><img src="https://lanyun1103.oss-cn-beijing.aliyuncs.com/typora/20200721192419.png" alt="image-20200721192419333"></p><h3 id="禁忌搜索算法"><a href="#禁忌搜索算法" class="headerlink" title="禁忌搜索算法"></a>禁忌搜索算法</h3><p>禁忌搜索算法是组合优化算法的一种，是局部搜索算法的扩展。禁忌搜索算法是人工智能在组合优化算法中的一个成功应用。禁忌搜索算法的特点是采用了禁忌技术。所谓禁忌就是禁止重复前面的工作。禁忌搜索算法用一个禁忌表记录下已经到达过的局部最优点，在下一次搜索中，利用禁忌表中的信息不再或有选择地搜索这些点。</p><p>禁忌搜索算法实现的技术问题是算法的关键。禁忌搜索算法涉及侯选集合、禁忌对象、评价函数、特赦规则、记忆频率信息等概念。</p><p>比较难以实现，美赛一般不会考到</p><h2 id="数据的统计描述和分析"><a href="#数据的统计描述和分析" class="headerlink" title="数据的统计描述和分析"></a>数据的统计描述和分析</h2><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">load shuju<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="统计中几个重要的概率分布"><a href="#统计中几个重要的概率分布" class="headerlink" title="统计中几个重要的概率分布"></a>统计中几个重要的概率分布</h3><h4 id="分布函数、密度函数和分位数"><a href="#分布函数、密度函数和分位数" class="headerlink" title="分布函数、密度函数和分位数"></a>分布函数、密度函数和分位数</h4><p><img src="https://lanyun1103.oss-cn-beijing.aliyuncs.com/typora/20200721193448.png" alt="image-20200721193448237"></p><h3 id="matlab统计工具箱中的概率分布"><a href="#matlab统计工具箱中的概率分布" class="headerlink" title="matlab统计工具箱中的概率分布"></a>matlab统计工具箱中的概率分布</h3><p>Matlab 统计工具箱中有 27 种概率分布，这里只对上面所述 4 种分布列出命令的字符：</p><p>norm 正态分布； chi2 2 <em>χ</em> 分布；</p><p>t <em>t</em> 分布 f <em>F</em> 分布</p><p>工具箱对每一种分布都提供 5 类函数，其命令的字符是：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">pdf 概率密度； cdf 分布函数； inv 分布函数的反函数；stat 均值与方差； rnd 随机数生成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当需要一种分布的某一类函数时，将以上所列的分布命令字符与函数命令字符接起来，并输入自变量（可以是标量、数组或矩阵）和参数就行了，如：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">p<span class="token operator">=</span><span class="token function">normpdf</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>mu<span class="token punctuation">,</span>sigma<span class="token punctuation">)</span> 均值 mu、标准差 sigma 的正态分布在 <span class="token operator">*</span>x<span class="token operator">*</span> 的密度函数<span class="token punctuation">(</span>mu<span class="token operator">=</span><span class="token number">0</span>，sigma<span class="token operator">=</span><span class="token number">1</span> 时可缺省<span class="token punctuation">)</span>。p<span class="token operator">=</span><span class="token function">tcdf</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token punctuation">)</span>     <span class="token operator">*</span>t<span class="token operator">*</span> 分布（自由度 n）在 x 的分布函数。x<span class="token operator">=</span><span class="token function">chi2inv</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>n<span class="token punctuation">)</span>  <span class="token operator">*</span>χ<span class="token number">2</span><span class="token operator">*</span> 分布（自由度 n）使分布函数 <span class="token function">F</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">=</span>p 的 <span class="token function">x</span><span class="token punctuation">(</span>即 p 分位数<span class="token punctuation">)</span>。<span class="token punctuation">[</span>m<span class="token punctuation">,</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">fstat</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>   <span class="token operator">*</span>F<span class="token operator">*</span> 分布（自由度 n1<span class="token punctuation">,</span>n2）的均值 m 和方差 v。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数估计的matlab实现"><a href="#参数估计的matlab实现" class="headerlink" title="参数估计的matlab实现"></a>参数估计的matlab实现</h3><p>Matlab 统计工具箱中，有专门计算总体均值、标准差的点估计和区间估计的函数。对于正态总体，命令是</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>mu<span class="token punctuation">,</span>sigma<span class="token punctuation">,</span>muci<span class="token punctuation">,</span>sigmaci<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">normfit</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>alpha<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 x 为样本（数组或矩阵），alpha 为显著性水平_α_ （alpha 缺省时设定为 0.05），返回总体均值 <em>μ</em> 和标准差_σ_ 的点估计 mu 和 sigma，及总体均值 <em>μ</em> 和标准差_σ_ 的区间估计muci 和 sigmaci。当 x 为矩阵时，x 的每一列作为一个样本。</p><p>Matlab 统计工具箱中还提供了一些具有特定分布总体的区间估计的命令，如expfit，poissfit，gamfit，你可以从这些字头猜出它们用于哪个分布，具体用法参见帮助系统</p><h3 id="假设检验的amtlab实现"><a href="#假设检验的amtlab实现" class="headerlink" title="假设检验的amtlab实现"></a>假设检验的amtlab实现</h3><p>统计推断的另一类重要问题是假设检验问题。在总体的分布函数完全未知或只知其形式但不知其参数的情况，为了推断总体的某些性质，提出某些关于总体的假设。例如，提出总体服从泊松分布的假设，又如对于正态总体提出数学期望等于 _μ_0 的假设等。假设检验就是根据样本对所提出的假设做出判断：是接受还是拒绝。这就是所谓的假设检验问题。</p><p><img src="https://lanyun1103.oss-cn-beijing.aliyuncs.com/typora/20200721194118.png" alt="image-20200721194118148"></p><h4 id="1-Z检验"><a href="#1-Z检验" class="headerlink" title="1.Z检验"></a>1.Z检验</h4><p><img src="https://lanyun1103.oss-cn-beijing.aliyuncs.com/typora/20200721194131.png" alt="image-20200721194131510"></p><p>在 Matlab 中 <em>Z</em> 检验法由函数 ztest 来实现，命令为</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>h<span class="token punctuation">,</span>p<span class="token punctuation">,</span>ci<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">ztest</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>mu<span class="token punctuation">,</span>sigma<span class="token punctuation">,</span>alpha<span class="token punctuation">,</span>tail<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-t检验"><a href="#2-t检验" class="headerlink" title="2.t检验"></a>2.t检验</h4><p><img src="https://lanyun1103.oss-cn-beijing.aliyuncs.com/typora/20200721194239.png" alt="image-20200721194239869"></p><p>在 Matlab 中_t_ 检验法由函数 ttest 来实现，命令为</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>h<span class="token punctuation">,</span>p<span class="token punctuation">,</span>ci<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">ttest</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>mu<span class="token punctuation">,</span>alpha<span class="token punctuation">,</span>tail<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-两个正态总体均值差的检验"><a href="#3-两个正态总体均值差的检验" class="headerlink" title="3.两个正态总体均值差的检验"></a>3.两个正态总体均值差的检验</h4><p>还可以用_t_ 检验法检验具有相同方差的 2 个正态总体均值差的假设。在 Matlab 中由函数 ttest2 实现，命令为：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>h<span class="token punctuation">,</span>p<span class="token punctuation">,</span>ci<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">ttest2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>alpha<span class="token punctuation">,</span>tail<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模型算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7月21日_不同的二叉搜索树</title>
      <link href="/2020/07/21/7-yue-21-ri-bu-tong-de-er-cha-sou-suo-shu/"/>
      <url>/2020/07/21/7-yue-21-ri-bu-tong-de-er-cha-sou-suo-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="7月21日每日一题"><a href="#7月21日每日一题" class="headerlink" title="7月21日每日一题"></a>7月21日每日一题</h2><p>这一题还是比较有难度的，相对于前几天的动态规划来说这题涉及数据结构和算法</p><p><img src="http://pic.lanyun1103.top/blogpic/20200721115148.png" alt="20200721110236"></p><p><img src="http://pic.lanyun1103.top/blogpic/20200721115201.png" alt="20200721110252"></p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>首先要知道二叉搜索树的概念。</p><p>二叉搜索树的左节点小于根节点，根节点小于右节点。那么这样就可以通过递归从左到右创建子树</p><h3 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h3><p>这题的递归写法：</p><p>在一个递归遍历根节点的大循环中，递归生成左子树和右子树，这里很难理解，也有可能是因为我对递归了解不多</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for a binary tree node. * public class TreeNode &#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &#123;&#125; *     TreeNode(int val) &#123; this.val = val; &#125; *     TreeNode(int val, TreeNode left, TreeNode right) &#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &#125; * &#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> <span class="token function">generateTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">generateTree</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> <span class="token function">generateTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> <span class="token class-name">ResTree</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token operator">></span>end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">ResTree</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ResTree</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//递归创建左子树和右子树，递归的特性是先执行最里面一层的下面的内容，执行完以后回到上一层继续执行。所以对于这里来说，创建左子树的最底层是创建一个节点，这个结点一层一层遍历出来，形成一个左子树，这是一种很好用的创建子树的方法。</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> lefttrees <span class="token operator">=</span> <span class="token function">generateTree</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> righttrees <span class="token operator">=</span> <span class="token function">generateTree</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//遍历抽出左子树和右子树，对于最底层来说是一个节点，没有左节点和右节点，对于倒数第二层来说，如果存在则有左右节点，如果没有左右子树那么左或右节点就是null</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> lefttree<span class="token operator">:</span>lefttrees<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span> righttree<span class="token operator">:</span>righttrees<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">TreeNode</span> curTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    curTree<span class="token punctuation">.</span>left <span class="token operator">=</span> lefttree<span class="token punctuation">;</span>                    curTree<span class="token punctuation">.</span>right <span class="token operator">=</span> righttree<span class="token punctuation">;</span>                    <span class="token class-name">ResTree</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curTree<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">ResTree</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就算有代码一层一层也难想，真羡慕理解递归的大佬</p><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3><p><img src="http://pic.lanyun1103.top/blogpic/20200721115215.png" alt="20200721111759"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+Gitee+Typora图床的几个坑</title>
      <link href="/2020/07/20/picgogiteetypora-tu-chuang-de-ji-ge-keng/"/>
      <url>/2020/07/20/picgogiteetypora-tu-chuang-de-ji-ge-keng/</url>
      
        <content type="html"><![CDATA[<h1 id="PicGo-Gitee-Typora图床的几个坑"><a href="#PicGo-Gitee-Typora图床的几个坑" class="headerlink" title="PicGo+Gitee+Typora图床的几个坑"></a>PicGo+Gitee+Typora图床的几个坑</h1><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>网上已经有很多教程了，这边说一下一些奇怪的bug和可能遇到的问题</p><h3 id="自检"><a href="#自检" class="headerlink" title="自检"></a>自检</h3><p>Typora是一个小型浏览器，也就是说是有类似chrome的检查功能的，typora使用shift+f12打开</p><p><img src="https://gitee.com/lanyun1103/picerbackup/raw/master/blogpic/20200720222943.png" alt="image-20200720222943580"></p><p>在右边和chrome一个用法</p><h3 id="Typora设置"><a href="#Typora设置" class="headerlink" title="Typora设置"></a>Typora设置</h3><p><img src="https://gitee.com/lanyun1103/picerbackup/raw/master/blogpic/20200720223041.png" alt="image-20200720223041671"></p><p>如图设置，点击验证图片上传选项可以在所有设置都准备完毕以后检查是否可以上传图片</p><h3 id="Gitee设置"><a href="#Gitee设置" class="headerlink" title="Gitee设置"></a>Gitee设置</h3><h4 id="Typora中无法访问gitee图床中的内容，报错403"><a href="#Typora中无法访问gitee图床中的内容，报错403" class="headerlink" title="Typora中无法访问gitee图床中的内容，报错403"></a>Typora中无法访问gitee图床中的内容，报错403</h4><p>创建一个仓库，需要注意的是</p><p>在创建时可以自动生成README.md文件，这样会自动形成master分支</p><p>在创建时一定要选择公开仓库，虽然这样安全性不好，你选择了私有仓库可以上传到仓库，但是你的typora是无法显示图片的。（报错403 Forbidden，也就是服务器拒绝访问，打开检查可以看到是因为没有登陆，如果设置了公开仓库那么typora就可以显示图片啦）</p><h3 id="PicGo设置"><a href="#PicGo设置" class="headerlink" title="PicGo设置"></a>PicGo设置</h3><h4 id="PicGo无法下载插件"><a href="#PicGo无法下载插件" class="headerlink" title="PicGo无法下载插件"></a>PicGo无法下载插件</h4><p>这个软件bug确实是挺多的，几个插件还有默认参数的设置比较迷，设置居然会有延迟，重启都没用。不过还是感谢这个作者，真的很好用，终于不用一个一个图上传到服务器上</p><p>需要注意的是这个软件的插件下载是真的很慢很慢，我在软件的issue中找到了作者的回复我这边总结一下</p><pre class="line-numbers language-none"><code class="language-none">如果在安装了npm后点击安装还是没有反应时，可以选择到PicGo的配置目录中手动安装配置目录是在User&#x2F;AppData&#x2F;Roaming&#x2F;PicGo在这个目录下rpm install ***（想要安装的npm包）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/lanyun1103/picerbackup/raw/master/blogpic/20200720223904.png" alt="image-20200720223904566"></p>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop命令总结</title>
      <link href="/2020/07/19/hadoop-ming-ling-zong-jie/"/>
      <url>/2020/07/19/hadoop-ming-ling-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop命令"><a href="#Hadoop命令" class="headerlink" title="Hadoop命令"></a>Hadoop命令</h1><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>在hadoop中必须使用相对路径来调用hadoop命令，例如：</p><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">hadoop&#x2F;bin hadoop fs -ls &#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看大数据实验平台说的根本不是人话，说了一堆没说到重点，原来是因为是从官网复制的机翻，真是敷衍呢。那我也复制，呵</p><h2 id="命令大全"><a href="#命令大全" class="headerlink" title="命令大全"></a>命令大全</h2><h3 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1.基本操作"></a>1.基本操作</h3><p>hadoop命令和linux命令非常相似，如果熟悉linux的话基本可以看一眼就记住</p><p>1）cat</p><p>使用方法：hadoop fs -cat URI [URI …]</p><p>将路径指定文件的内容输出到_stdout_。</p><p>示例：</p><p># hadoop fs -cat hdfs://host1:port1/file1 hdfs://host2:port2/file2</p><p># hadoop fs -cat file:///file3 /user/hadoop/file4</p><p>2）chgrp</p><p>使用方法：hadoop fs -chgrp [-R] GROUP URI [URI …]</p><p>改变文件所属的组。使用-R将使改变在目录结构下递归进行。命令的使用者必须是文件的所有者或者超级用户。</p><p>3）chmod</p><p>使用方法：hadoop fs -chmod [-R] URI [URI …]</p><p>改变文件的权限。使用-R将使改变在目录结构下递归进行。命令的使用者必须是文件的所有者或者超级用户。</p><p>4）chown</p><p>使用方法：hadoop fs -chown [-R] [OWNER][:[GROUP]] URI [URI ]</p><p>改变文件的拥有者。使用-R将使改变在目录结构下递归进行。命令的使用者必须是超级用户。</p><p>5）copyFromLocal</p><p>使用方法：hadoop fs -copyFromLocal URI</p><p>除了限定源路径是一个本地文件外，和<strong>put</strong>命令相似。</p><p>6）copyToLocal</p><p>使用方法：hadoop fs -copyFromLocal &lt; local src &gt; … &lt; hdfs dst &gt;</p><p>与put相类似</p><p>7）cp 复制</p><p>使用方法：</p><p>hadoop fs -cp &lt; hdfs file &gt; &lt; hdfs file &gt;</p><p>目标文件不能存在，否则命令不能执行，相当于给文件重命名并保存，源文件还存在</p><p>hadoop fs -cp &lt; hdfs file or dir &gt;… &lt; hdfs dir &gt;</p><p>目标文件夹要存在，否则命令不能执行</p><p>8）du 显示占用大小</p><p>使用方法：</p><p>hadoop fs -du &lt; hdsf path&gt;</p><p>显示hdfs对应路径下每个文件夹和文件的大小</p><p>hadoop fs -du -s &lt; hdsf path&gt;</p><p>显示hdfs对应路径下所有文件和的大小</p><p>hadoop fs -du - h &lt; hdsf path&gt;</p><p>显示hdfs对应路径下每个文件夹和文件的大小,文件的大小用方便阅读的形式表示，例如用64M代替67108864</p><p>9）dus</p><p>使用方法：hadoop fs -dus</p><p>显示文件的大小。</p><p>10）expunge</p><p>使用方法：hadoop fs -expunge</p><p>清空回收站。</p><p>11）get 拷贝文件到文件本地系统</p><p>使用方法：</p><p>hadoop fs -get &lt; hdfs file &gt; &lt; local file or dir&gt;</p><p>local file不能和 hdfs file名字不能相同，否则会提示文件已存在，没有重名的文件会复制到本地</p><p>hadoop fs -get &lt; hdfs file or dir &gt; … &lt; local dir &gt;</p><p>拷贝多个文件或目录到本地时，本地要为文件夹路径</p><p>注意：如果用户不是root， local 路径要为用户文件夹下的路径，否则会出现权限问题.</p><p>12）getmerge</p><p>使用方法：</p><p>hadoop fs -getmerge &lt; hdfs dir &gt; &lt; local file &gt;</p><p>将hdfs指定目录下所有文件排序后合并到local指定的文件中，文件不存在时会自动创建，文件存在时会覆盖里面的内容</p><p>hadoop fs -getmerge -nl &lt; hdfs dir &gt; &lt; local file &gt;</p><p>加上nl后，合并到local file中的hdfs文件之间会空出一行</p><p>13）ls</p><p>使用方法：</p><p>hadoop fs -ls / 列出hdfs文件系统根目录下的目录和文件</p><p>hadoop fs -ls -R / 列出hdfs文件系统所有的目录和文件</p><p>14）lsr</p><p>使用方法：hadoop fs -lsr ls命令的递归版本。类似于Unix中的ls -R。</p><p>15）mkdir</p><p>使用方法：hadoop fs -mkdir</p><p>接受路径指定的uri作为参数，创建这些目录。其行为类似于Unix的mkdir -p，它会创建路径中的各级父目录。</p><p>示例：</p><p># hadoop fs -mkdir /user/hadoop/dir1 /user/hadoop/dir2</p><p># hadoop fs -mkdir hdfs://host1:port1/user/hadoop/dir</p><p># hdfs://host2:port2/user/hadoop/dir</p><p>16）movefromLocal</p><p>使用方法：hadoop fs -moveFromLocal &lt; local src &gt; … &lt; hdfs dst &gt;</p><p>与put相类似，命令执行后源文件 local src 被删除，也可以从从键盘读取输入到hdfs file中</p><p>17）mv 本地移动文件</p><p>使用方法：</p><p>hadoop fs -mv &lt; hdfs file &gt; &lt; hdfs file &gt;</p><p>目标文件不能存在，否则命令不能执行，相当于给文件重命名并保存，源文件不存在</p><p>hadoop fs -mv &lt; hdfs file or dir &gt;… &lt; hdfs dir &gt;</p><p>源路径有多个时，目标路径必须为目录，且必须存在。</p><p>注意：跨文件系统的移动（local到hdfs或者反过来）都是不允许的</p><p>18）put 从本地文件系统中复制单个或多个源路径到目标文件系统</p><p>使用方法：</p><p>hadoop fs -put &lt; local file &gt; &lt; hdfs file &gt; hdfs file的父目录一定要存在，否则命令不会执行</p><p>hadoop fs -put &lt; local file or dir &gt;…&lt; hdfs dir &gt; hdfs dir 一定要存在，否则命令不会执行</p><p>19）rm</p><p>使用方法：hadoop fs -rm URI [URI …]</p><p>删除指定的文件。只删除非空目录和文件。请参考rmr命令了解递归删除。 示例：</p><p># hadoop fs -rm hdfs://host:port/file /user/hadoop/emptydir</p><p>20）rmr</p><p>使用方法：hadoop fs -rmr URI [URI …]</p><p>delete的递归版本。 示例：</p><p># hadoop fs -rmr /user/hadoop/dir</p><p># hadoop fs -rmr hdfs://host:port/user/hadoop/dir</p><p>21）setrep 改变副本个数</p><p>使用方法：</p><p>hadoop fs -setrep -R 3 &lt; hdfs path &gt;</p><p>改变一个文件在hdfs中的副本系数，上述命令中数字3为所设置的副本个数，-R选项可以对一个人目录下的所有目录+文件递归执行改变副本个数的操作</p><p>22）stat 返回状态</p><p>使用方法：</p><p>hdoop fs -stat [format] &lt; hdfs path &gt;</p><p>返回对应路径的状态信息</p><p>[format]可选参数有：%b（文件大小），%o（Block大小），%n（文件名），%r（副本个数），%y（最后一次修改日期和时间）</p><p>可以这样书写hadoop fs -stat %b%o%n &lt; hdfs path &gt;，不过不建议，这样每个字符输出的结果不是太容易分清楚</p><p>23）tail 显示文件末尾</p><p>使用方法：</p><p>hadoop fs -tail &lt; hdfs file &gt;</p><p>在标准输出中显示文件末尾的1KB数据</p><p>24）test 测试文件</p><p>使用方法：hadoop fs -test -[ezd] URI</p><p>选项： -e 检查文件是否存在。如果存在则返回0。 -z 检查文件是否是0字节。如果是则返回0。 -d 如果路径是个目录，则返回1，否则返回0。</p><p>示例：</p><p># hadoop fs -test -e filename</p><p>25）text 以文本输出</p><p>使用方法：hadoop fs -text</p><p>将文本文件或某些格式的非文本文件通过文本格式输出。允许的格式是zip和TextRecordInputStream。</p><p>26）touchz 创建空文件</p><p>使用方法：hadoop fs -touchz URI [URI …]</p><p>创建一个0字节的空文件。</p><p>示例：</p><p>hadoop -touchz pathname</p><p>27）count 统计</p><p>使用方法：</p><p>hadoop fs -count &lt; hdfs path &gt;</p><p>统计hdfs对应路径下的目录个数，文件个数，文件总计大小</p><p>显示为目录个数，文件个数，文件总计大小，输入路径</p><p>28）archive</p><p>hadoop archive -archiveName name.har -p &lt; hdfs parent dir &gt; &lt; src &gt;* &lt; hdfs dst &gt;</p><p>命令中参数name：压缩文件名，自己任意取；&lt; hdfs parent dir &gt; ：压缩文件所在的父目录；&lt; src &gt;：要压缩的文件名；&lt; hdfs dst &gt;：压缩文件存放路径</p><p>*示例：</p><p># hadoop archive -archiveName hadoop.har -p /user 1.txt 2.txt /des</p><p>示例中将hdfs中/user目录下的文件1.txt，2.txt压缩成一个名叫hadoop.har的文件存放在hdfs中/des目录下，如果1.txt，2.txt不写就是将/user目录下所有的目录和文件压缩成一个名叫hadoop.har的文件存放在hdfs中/des目录下</p><p>显示har的内容可以用如下命令：</p><p># hadoop fs -ls /des/hadoop.jar</p><p>显示har压缩的是那些文件可以用如下命令</p><p># hadoop fs -ls -R har:///des/hadoop.har</p><p>注意：har文件不能进行二次压缩。如果想给.har加文件，只能找到原来的文件，重新创建一个。har文件中原来文件的数据并没有变化，har文件真正的作用是减少NameNode和DataNode过多的空间浪费。</p><p>29）balancer</p><p>hdfs balancer</p><p>如果管理员发现某些DataNode保存数据过多，某些DataNode保存数据相对较少，可以使用上述命令手动启动内部的均衡过程</p><p>30）dfsadmin</p><p>hdfs dfsadmin -help</p><p>管理员可以通过dfsadmin管理HDFS，用法可以通过上述命令查看</p><p>hdfs dfsadmin -report</p><p>显示文件系统的基本数据</p><p>hdfs dfsadmin -safemode &lt; enter leave get wait &gt;</p><p>enter：进入安全模式；leave：离开安全模式；get：获知是否开启安全模式；</p><p>wait：等待离开安全模式</p><p>31）distcp</p><p>用来在两个HDFS之间拷贝数据</p><h3 id="2-HDFS-文件读写实例操作"><a href="#2-HDFS-文件读写实例操作" class="headerlink" title="2.HDFS 文件读写实例操作"></a>2.HDFS 文件读写实例操作</h3><p><strong>1）hadoop fs 与hadoop dfs 、hdfs dfs 的区别？</strong></p><p>hadoop fs涉及到一个通用的文件系统，可以指向任何的文件系统如local，HDFS等。</p><p>hadoop dfs与hdfs dfs：只能操作HDFS文件系统相关（包括与Local FS间的操作），前者已经过时了，一般使用后者。</p><p>那么什么时候用FS呢？可以在本地与hadoop分布式文件系统的交互操作中使用。</p><p><strong>2）创建一个目录</strong></p><p># hdfs dfs -mkdir -p /user //在/目录下创建user目录</p><p># hdfs dfs -mkdir -p /user/test //在/user目录下创建test目录</p><p>（上面是使用hdfs的形式进行操作，下面是使用hadoop的形式）</p><p># hadoop fs -mkdir -p /name //创建目录name</p><p># hadoop fs -mkdir -p /name/mytest //在name目录下创建mytest目录</p><p>如果出现：</p><p><img src="http://119.3.41.171:8099/bigdata/upload/ckeditor/images/1556414199624.png" alt="img"></p><p>这是权限不够，执行以下操作：</p><p>#su hdfs //换角色</p><p>#hadoop fs -chown root /user // 赋权</p><p><strong>3）怎么查看hdfs的目录结构</strong></p><p>使用hdfs dfs 查看：</p><p># hdfs dfs -ls / //查看/目录下的内容</p><p># hdfs dfs -ls /user //查看/user下的内容</p><p>使用hadoop fs查看：</p><p># hadoop fs -ls / //查看/目录下的内容</p><p># hadoop fs -ls /user //查看/user下的内容</p><p><strong>4）创建一个文件</strong></p><p># touch /opt/mydemo //在/opt目录下创建一个mydemo文本</p><p># vi /opt/mydemo //对/opt目录下的mydemo文本进行编辑</p><p>按i编辑，添加以下内容</p><p>Hello World</p><p>按Esc键然后:wq保存退出</p><p><strong>5）把这个文件放到这个目录里面</strong></p><p># hdfs dfs -put /opt/mydemo /user/test</p><p>或者</p><p>#hadoop fs -put /opt/mydemo /user/test //将/opt目录下的mydemo文件放进/user/test目录下</p><p><strong>6）读取这个文件内容</strong></p><p># hdfs dfs -cat /user/test/mydemo</p><p>或者</p><p>#hadoop fs -cat /user/test/mydemo //读取/user/test/目录下的mydemo文件里的内容</p><p><strong>7）删除这个文件</strong></p><p># hdfs dfs -rm /user/test/mydemo</p><p>或者</p><p>#hadoop fs -rm /user/test/mydemo //删除/user/test/目录下的mydemo文件</p><p><strong>8）删除文件夹</strong></p><p>#hdfs dfs -rmr /user</p><p>或者</p><p>#hadoop fs -rmr /user //删除hdfs的根目录下的demo文件夹下的所有文件//先有目录/user/test</p><p><strong>9）直接在hdfs里面创建一个文件、编写内容</strong></p><p># hdfs dfs -mkdir -p /user/test //先有目录/user/test</p><p>#hdfs dfs -touchz /user/test/mydemo</p><p>或者</p><p>#hadoop fs -touchz /user/test/mydemo</p><p>//hdfs不支持修改里面的内容，要修改，先删除，然后在本地的文件上修改过后再上传；可以增加内容</p><p><strong>10）对hdfs的文件重命名</strong></p><p># hdfs dfs -mv /user/test/mydemo /user/test/demo</p><p><strong>5.3 HDFS 恢复误删文件</strong></p><p>hadoop的hdfs中被删除文件的恢复原理和回收站原理是一样的，就是在删除hdfs文件时，被删除的文件被移动到了hdfs的.Trash文件夹中，恢复时只需将该文件夹中文件拿出即可。具体操作如下：</p><p>注意：先使用命令关闭Hadoop（/opt/hadoop/sbin/stop-all.sh），再进行以下步骤. 1）设置.Trash文件夹 　　如果需要恢复hdfs中文件，就需要设置.Trash，hadoop的.Trash默认是关闭的。具体设置如下：</p><p>cd /opt/hadoop/etc/hadoop</p><p># vi core-site.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.trash.interval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1440<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://119.3.41.171:8099/bigdata/upload/ckeditor/images/1556414199619.png" alt="img"></p><p>该配置项在core-site.xml中，fs.trash.interval代表删除的文件保留的时间，时间单位为分钟，默认为0代表不保存删除的文件。我们只需要设置该时间即可打开.Trash。</p><p>2）设置后,启动Hadoop（/opt/hadoop/sbin/start-all.sh），</p><p>删除文件会显示删除的文件被移动到了hdfs://node1:9000/user/root/.Trash/Current中，举例如下</p><p><img src="http://119.3.41.171:8099/bigdata/upload/ckeditor/images/1556414199628.png" alt="img"></p><p>3）恢复时只需要将.Trash中文件移动到我们设置的目录即可，例如将.Trash中test.txt文件移动到/user目录，</p><p><img src="http://119.3.41.171:8099/bigdata/upload/ckeditor/images/1556414199685.png" alt="img"></p><p>4）彻底删除hdfs文件 　　彻底删除hdfs文件即将.Trash中文件彻底删除，这样才能是否被删除文件所占用的hdfs空间，第2步中的删除方式hdfs不会释放空间，只是将需要删除的文件移动到了垃圾箱。.Trash其实只是hdfs中的一个目录，只要删除该文件夹中的文件即可彻底删除该文件，原理相当于删除了回收站中的文件，该文件即被彻底删除。该项一般很少用，一般hdfs空间不够用才会用到。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据与人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab_层次分析法、插值与拟合</title>
      <link href="/2020/07/19/matlab-ceng-ci-fen-xi-fa-cha-zhi-yu-ni-he/"/>
      <url>/2020/07/19/matlab-ceng-ci-fen-xi-fa-cha-zhi-yu-ni-he/</url>
      
        <content type="html"><![CDATA[<h1 id="Matlab-层次分析法、插值与拟合"><a href="#Matlab-层次分析法、插值与拟合" class="headerlink" title="Matlab_层次分析法、插值与拟合"></a>Matlab_层次分析法、插值与拟合</h1><h2 id="层次分析法"><a href="#层次分析法" class="headerlink" title="层次分析法"></a>层次分析法</h2><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>人们在进行社会的、经济的以及科学管理领域问题的系统分析中，面临的常常是一个由相互关联、相互制约的众多因素构成的复杂而往往缺少定量数据的系统。层次分析法为这类问题的决策和排序提供了一种新的、简洁而实用的建模方法。运用层次分析法建模，大体上可按下面四个步骤进行：</p><ol><li> 建立递阶层次结构模型；</li><li> 构造出各层次中的所有判断矩阵；</li><li> 层次单排序及一致性检验；</li><li> 层次总排序及一致性检验。</li></ol><h3 id="如何构建："><a href="#如何构建：" class="headerlink" title="如何构建："></a>如何构建：</h3><h4 id="思路结构："><a href="#思路结构：" class="headerlink" title="思路结构："></a>思路结构：</h4><p>应用 AHP 分析决策问题时，首先要把问题条理化、层次化，构造出一个有层次的结构模型。在这个模型下，复杂问题被分解为元素的组成部分。这些元素又按其属性及关系形成若干层次。上一层次的元素作为准则对下一层次有关元素起支配作用。这些层次可以分为三类：</p><ol><li> 最高层：这一层次中只有一个元素，一般它是分析问题的预定目标或理想结果，因此也称为目标层。</li><li> 中间层：这一层次中包含了为实现目标所涉及的中间环节，它可以由若干个层次组成，包括所需考虑的准则、子准则，因此也称为准则层。</li><li> 最底层：这一层次包括了为实现目标可供选择的各种措施、决策方案等，因此也称为措施层或方案层。</li></ol><p>递阶层次结构中的层次数与问题的复杂程度及需要分析的详尽程度有关，一般地层次数不受限制。每一层次中各元素所支配的元素一般不要超过 9 个。这是因为支配的元素过多会给两两比较判断带来困难。</p><h4 id="判断矩阵"><a href="#判断矩阵" class="headerlink" title="判断矩阵"></a>判断矩阵</h4><p>层次结构反映了因素之间的关系，但准则层中的各准则在目标衡量中所占的比重并不一定相同，在决策者的心目中，它们各占有一定的比例。也就是相当于权重的概念。</p><p>需要在定量分析时对每层因素一一对比获得权值（范围应该是1-9以及其倒数），判断矩阵应该是一个符合一致性指标的矩阵，否则不可以作为判断矩阵。</p><h4 id="一致性检验的步骤"><a href="#一致性检验的步骤" class="headerlink" title="一致性检验的步骤:"></a>一致性检验的步骤:</h4><p>1.首先判断矩阵是不是正互反矩阵，如果满足正互反矩阵并且相乘等于对角线元素的值，那么就是一个一致矩阵</p><p>2.判断正互反矩阵的最大特征值，当且仅当最大特征值=n是正互反矩阵。越不一致，与n的差值越大</p><h3 id="应用模型："><a href="#应用模型：" class="headerlink" title="应用模型："></a>应用模型：</h3><p>在应用层次分析法研究问题时，遇到的主要困难有两个：</p><p>①如何根据实际情况抽象出较为贴切的层次结构；</p><p>②如何将某些定性的量作比较接近实际定量化处理。层次分析法对人们的思维过程进行了加工整理，提出了一套系统分析问题的方法，为科学管理和决策提供了较有说服力的依据。</p><p>但层次分析法也有其局限性，主要表现在：</p><ol><li> 它在很大程度上依赖于人们的经验，主观因素的影响很大，它至多只能排除思维过程中的严重非一致性，却无法排除决策者个人可能存在的严重片面性。</li><li> 比较、判断过程较为粗糙，不能用于精度要求较高的决策问题。AHP 至多只能算是一种半定量（或定性与定量结合）的方法。在应用层次分析法时，建立层次结构模型是十分关键的一步。</li></ol><h2 id="插值和拟合"><a href="#插值和拟合" class="headerlink" title="插值和拟合"></a>插值和拟合</h2><p>插值：求过已知有限个数据点的近似函数。</p><p>拟合：已知有限个数据点，求近似函数，不要求过已知数据点，只要求在某种意义下它在这些点上的总偏差最小。</p><h3 id="一维插值"><a href="#一维插值" class="headerlink" title="一维插值"></a>一维插值</h3><h4 id="Matlab实现分段线性插值"><a href="#Matlab实现分段线性插值" class="headerlink" title="Matlab实现分段线性插值"></a>Matlab实现分段线性插值</h4><p>用 Matlab 实现分段线性插值不需要编制函数程序，Matlab 中有现成的一维插值函数 interp1。</p><p>y=interp1(x0,y0,x,’method’)</p><p>method 指定插值的方法，默认为线性插值。其值可为：</p><p>参数</p><p>用处</p><p>‘nearest’</p><p>最近项插值</p><p>‘linear’</p><p>线性插值</p><p>‘spline’</p><p>逐段 3 次样条插值</p><p>‘cubic’</p><p>保凹凸性 3 次插值</p><h4 id="Matlab实现三次样条插值"><a href="#Matlab实现三次样条插值" class="headerlink" title="Matlab实现三次样条插值"></a>Matlab实现三次样条插值</h4><p>在 Matlab 中数据点称之为断点。如果三次样条插值没有边界条件，最常用的方法，就是采用非扭结（not-a-knot）条件。这个条件强迫第 1 个和第 2 个三次多项式的三阶导数相等。对最后一个和倒数第 2 个三次多项式也做同样地处理。</p><p>Matlab 中三次样条插值也有现成的函数：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">y<span class="token operator">=</span><span class="token function">interp1</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token string">'spline'</span><span class="token punctuation">)</span>；y<span class="token operator">=</span><span class="token function">spline</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>x<span class="token punctuation">)</span>；pp<span class="token operator">=</span><span class="token function">csape</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>conds<span class="token punctuation">)</span>，y<span class="token operator">=</span><span class="token function">ppval</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二维插值"><a href="#二维插值" class="headerlink" title="二维插值"></a>二维插值</h3><h4 id="Matlab中实现网格节点插值"><a href="#Matlab中实现网格节点插值" class="headerlink" title="Matlab中实现网格节点插值"></a>Matlab中实现网格节点插值</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">z<span class="token operator">=</span><span class="token function">interp2</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>z0<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'method'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 三次样条插值</span>pp<span class="token operator">=</span><span class="token function">csape</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>z0<span class="token punctuation">,</span>conds<span class="token punctuation">,</span>valconds<span class="token punctuation">)</span>，z<span class="token operator">=</span><span class="token function">fnval</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span>y<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="曲线拟合"><a href="#曲线拟合" class="headerlink" title="曲线拟合"></a>曲线拟合</h3><h4 id="Matlab实现线性最小二乘法"><a href="#Matlab实现线性最小二乘法" class="headerlink" title="Matlab实现线性最小二乘法"></a>Matlab实现线性最小二乘法</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 输入参数 x0,y0 为要拟合的数据，m 为拟合多项式的次数，输出参数 a 为拟合多项式</span>a <span class="token operator">=</span> <span class="token function">polyfit</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token comment">% 可以得到在x点处函数a的值</span>y <span class="token operator">=</span> <span class="token function">polyval</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>matlab还有其他比较高级的函数用来计算拟合函数，不常用，不说了</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模型算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB_稳定状态模型与常微分方程求解</title>
      <link href="/2020/07/18/matlab-wen-ding-zhuang-tai-mo-xing-yu-chang-wei-fen-fang-cheng-qiu-jie/"/>
      <url>/2020/07/18/matlab-wen-ding-zhuang-tai-mo-xing-yu-chang-wei-fen-fang-cheng-qiu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="MATLAB稳定状态模型与常微分方程求解"><a href="#MATLAB稳定状态模型与常微分方程求解" class="headerlink" title="MATLAB稳定状态模型与常微分方程求解"></a>MATLAB稳定状态模型与常微分方程求解</h1><h2 id="一、稳定状态模型可以解决的问题类型"><a href="#一、稳定状态模型可以解决的问题类型" class="headerlink" title="一、稳定状态模型可以解决的问题类型"></a>一、稳定状态模型可以解决的问题类型</h2><p>虽然动态过程的变化规律一般要用微分方程建立的动态模型来描述，但是对于某些实际问题，建模的主要目的并不是要寻求动态过程每个瞬时的性态，而是研究某种意义下稳定状态的特征，特别是当时间充分长以后动态过程的变化趋势。譬如在什么情况下描述过程的变量会越来越接近某些确定的数值，在什么情况下又会越来越远离这些数值而导致过程不稳定。为了分析这种稳定与不稳定的规律常常不需要求解微分方程，而可以利用微分方程稳定性理论，直接研究平衡状态的稳定性就行了。</p><h3 id="实际模型种类"><a href="#实际模型种类" class="headerlink" title="实际模型种类"></a>实际模型种类</h3><p>资源增长模型</p><p>资源开发模型</p><p>经济效益模型</p><p>种群竞争模型</p><p>Volterra模型</p><h2 id="二、如何求解常微分方程"><a href="#二、如何求解常微分方程" class="headerlink" title="二、如何求解常微分方程"></a>二、如何求解常微分方程</h2><p>建立微分方程只是解决问题的第一步，通常需要求出方程的解来说明实际现象，并加以检验。如果能得到解析形式的解固然是便于分析和应用的，但是我们知道，只有线性常系数微分方程，并且自由项是某些特殊类型的函数时，才可以肯定得到这样解，而绝大多数变系数方程、非线性方程都是所谓“解不出来”的，即使看起来非常简单的</p><h3 id="欧拉方法"><a href="#欧拉方法" class="headerlink" title="欧拉方法"></a>欧拉方法</h3><p>Euler方法</p><h3 id="改进的Euler方法"><a href="#改进的Euler方法" class="headerlink" title="改进的Euler方法"></a>改进的Euler方法</h3><p>梯形公式</p><h3 id="龙格-库塔方法"><a href="#龙格-库塔方法" class="headerlink" title="龙格-库塔方法"></a>龙格-库塔方法</h3><p>龙格库塔方法</p><p>4阶龙格库塔方法</p><h3 id="线性多步法"><a href="#线性多步法" class="headerlink" title="线性多步法"></a>线性多步法</h3><h3 id="一阶微分方程组和高阶微分方程的数值解法"><a href="#一阶微分方程组和高阶微分方程的数值解法" class="headerlink" title="一阶微分方程组和高阶微分方程的数值解法"></a>一阶微分方程组和高阶微分方程的数值解法</h3><p>一阶解法</p><p>高阶解法：引入新变量即可</p><h3 id="Matlab解法"><a href="#Matlab解法" class="headerlink" title="Matlab解法"></a>Matlab解法</h3><h4 id="1-数值解"><a href="#1-数值解" class="headerlink" title="1.数值解"></a>1.数值解</h4><p>Matlab 的工具箱提供了几个解非刚性常微分方程的功能函数，如 ode45，ode23，ode113，其中 ode45 采用四五阶 RK 方法，是解非刚性常微分方程的首选方法，ode23采用二三阶 RK 方法，ode113 采用的是多步法，效率一般比 ode45 高。</p><h5 id="使用函数解一般常微分方程"><a href="#使用函数解一般常微分方程" class="headerlink" title="使用函数解一般常微分方程"></a>使用函数解一般常微分方程</h5><p>1.改进的欧拉方法：</p><p>在Matlab命令窗口输入： [x,y]=eulerpro(‘doty’,0,0.5,1,10) 即可求得数值解。</p><p>2.ode23，ode45，ode113的使用</p><p>Matlab的函数形式是 [t,y]=solver(‘F’,tspan,y0)</p><p>这里solver为ode45，ode23，ode113，输入参数 F 是用M文件定义的微分方程y’= <em>f</em> (<em>x</em>, <em>y</em>) 右端的函数。tspan=[t0,tfinal]是求解区间，y0是初值。</p><h5 id="刚性问题"><a href="#刚性问题" class="headerlink" title="刚性问题"></a>刚性问题</h5><p>ode15s,ode23s,ode23t,ode23tb都可以求解刚性问题</p><h5 id="高阶"><a href="#高阶" class="headerlink" title="高阶"></a>高阶</h5><p>如果设 y1=y,y2=y’,y3=y’’，可以把高阶方程降阶</p><h4 id="2-解析解"><a href="#2-解析解" class="headerlink" title="2.解析解"></a>2.解析解</h4><p>在 Matlab 中，符号运算工具箱提供了功能强大的求解常微分方程的符号运算命令dsolve。常微分方程在 Matlab 中按如下规定重新表达：</p><p>符号 D 表示对变量的求导。Dy 表示对变量 y 求一阶导数，当需要求变量的 n 阶导数时，用 Dn 表示，D4y 表示对变量 y 求 4 阶导数。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 无初边值的常微分方程的解就是通解，使用</span><span class="token function">dsolve</span><span class="token punctuation">(</span><span class="token string">' diff_equation'</span>，<span class="token string">'var'</span><span class="token punctuation">)</span><span class="token comment">%对于带初边值条件的使用</span><span class="token function">dsolve</span><span class="token punctuation">(</span><span class="token string">'diff_equation'</span>，<span class="token string">'condition1，condition2，…'</span>，<span class="token string">'var'</span><span class="token punctuation">)</span><span class="token comment">% 对于常微分方程组</span><span class="token function">dsolve</span><span class="token punctuation">(</span><span class="token string">'diff_equ1，diff_equ2，…'</span>，<span class="token string">'condition1，condition2，…'</span>，<span class="token string">'var'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模型算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络概述——前馈和反向转播</title>
      <link href="/2020/07/17/shen-jing-wang-luo-gai-shu-qian-kui-he-fan-xiang-zhuan-bo/"/>
      <url>/2020/07/17/shen-jing-wang-luo-gai-shu-qian-kui-he-fan-xiang-zhuan-bo/</url>
      
        <content type="html"><![CDATA[<h1 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h1><h2 id="一、神经网络概述"><a href="#一、神经网络概述" class="headerlink" title="一、神经网络概述"></a>一、神经网络概述</h2><p>神经网络的大局是我们如何从拥有一些数据，将其投入某种算法并希望达到最佳状态。</p><p>神经网络由神经元，这些神经元之间的连接（称为权重）和连接到每个神经元的一些偏差组成。我们区分输入层，隐藏层和输出层，我们希望每一层都可以帮助我们解决问题。</p><p>为了表示在神经网络中的更迭，迭代地使用公式来计算下一层中的每个神经元。这使我们前进，直到获得输出。</p><p>给定第一个结果，返回并调整权重和偏差，以便优化成本函数-称为反向传递。实质上是尝试调整整个神经网络，以便优化输出值。从某种意义上讲，这就是我们告诉算法性能不好或好的方法。我们通过运行数据集中的新观察值来继续尝试优化成本函数。</p><p>我们简单地遍历每个权重，例如在输出层中，然后从特定权重的原始值中减去学习率的值乘以特定权重的成本。</p><p>我们从前馈神经网络开始，然后介绍一下符号，然后对反向传播进行深入的说明，最后概述了优化程序如何帮助我们使用反向传播算法，特别是随机梯度下降。</p><h3 id="1-什么是神经网络"><a href="#1-什么是神经网络" class="headerlink" title="1.什么是神经网络"></a>1.什么是神经网络</h3><p>神经网络是一种受大脑神经元启发的算法。它旨在识别复杂数据中的模式，并且在识别音频，图像或视频中的模式时通常表现最佳。</p><p><img src="https://mlfromscratch.com/content/images/2019/12/neural-networks-3.png"></p><p>与神经元相对应的白色圆圈和黄色箭头是从一个神经元到另一个神经元的<strong>连接（具有权重）</strong>。上方的白框指示哪一层。</p><p>想法是，我们将数据输入到输入层，该输入层通过不同的连接将数据从我们的数据向前转发，从一个神经元传到网络中的另一个神经元。到达输出层后，我们希望可以得到希望的数量。 每个神经元都有一些<strong>激活</strong> -值在0到1之间，其中1是神经元可以具有的最大激活，而0是神经元可以具有的最小激活。也就是说，如果我们使用称为sigmoid的激活函数，可以获得0-1之间的返回值，即可以作为权重使用在神经网络中</p><h3 id="2-从输入层到隐藏层"><a href="#2-从输入层到隐藏层" class="headerlink" title="2.从输入层到隐藏层"></a>2.从输入层到隐藏层</h3><p>我们通过输入的数据集为我们提供了输入图层，但是随后这些图层又如何呢？发生的事情只是很多数字的偶合，无非就是基本的数学运算。我们查看输入层中的所有神经元，它们都连接到下一层（即隐藏层）中的新神经元。 <strong>请记住这一点：</strong>每个神经元都有一个激活_a_，而与新神经元相连的每个神经元都有一个权重_w_。激活次数通常为0到1之间的数字，权重为两倍，例如2.2，-1.2、0.4等。（权重可以使用随机梯度下降法）</p><p><strong>然后..<strong>可以将权重乘以激活，</strong>然后</strong>从第一权重和激活中获取下一层的单个神经元。也就是说，将_n_个权重和激活数相乘，以获得新神经元的值。 在神经元网络中前进的过程是相同的，因此命名为<strong>前馈神经网络。</strong></p><h3 id="3-激活功能"><a href="#3-激活功能" class="headerlink" title="3.激活功能"></a>3.激活功能</h3><p>还有一个<strong>激活函数</strong>，最常见的是一个S型函数，它仅将输出再次缩放为0到1之间-因此它是一个逻辑函数（sigmoid）。在MATLAB中，可以使用logsig函数（这就是sigmoid函数）</p><h3 id="4-数学方法计算权重"><a href="#4-数学方法计算权重" class="headerlink" title="4.数学方法计算权重"></a>4.数学方法计算权重</h3><p>应该了解这些术语的含义，或者能够进行以下计算：</p><ul><li>  矩阵：矩阵乘法和加法，矩阵的表示法。</li><li>  衍生品：在图表上测量坡度特定点的陡度。</li><li>  偏导数： 一个变量的导数，而其余变量不变。</li><li>  连锁规则：查找两个或多个函数的组合。</li></ul><h3 id="5-反向传播"><a href="#5-反向传播" class="headerlink" title="5.反向传播"></a>5.反向传播</h3><p>反向传播是每个神经网络的核心。首先，我们需要在反向传播和优化器之间进行区分</p><ul><li>  反向传播用于有效地计算梯度</li><li>  优化器则用于使用通过反向传播计算的梯度来训练神经网络</li></ul><p>所有反向传播对我们所做的就是计算梯度而已。</p><p><img src="https://mlfromscratch.com/content/images/2019/12/nn-complete.png"></p><p>我们总是从输出层开始，向后传播，更新每一层的权重和偏差。 <strong>这个想法很简单：</strong>调整整个网络的权重和偏差，以便我们在输出层中获得所需的输出。假设我们希望输出神经元为1.0，那么我们需要轻推权重和偏差，以使输出接近1.0。 我们只能更改权重和偏差，但是激活是这些权重和偏差的直接计算，这意味着我们可以间接调整神经网络的每个部分，以获得所需的输出-除了输入层，因为这是数据集您输入的内容。</p><h3 id="6-计算梯度"><a href="#6-计算梯度" class="headerlink" title="6.计算梯度"></a>6.计算梯度</h3><p>我们可能会想到以下问题来发现如何在反向传播算法中计算梯度的方法：我们如何衡量成本函数相对于特定权重，偏差或激活的变化？</p><p>在数学上，这就是为什么我们需要了解偏导数的原因，因为它们允许我们计算神经网络的组成部分与成本函数之间的关系</p><p>以下方程：一个方程用于权重，一个方程用于偏差，一个方程用于激活</p><p><img src="http://lanyun1103.top/wp-content/uploads/2020/07/GF0KWOBBY9VAXBJ1.png"></p><p>这些方程式只是衡量特定重量如何影响成本函数的比率，我们要对其进行优化。我们通过步进这些方程的输出方向来进行优化。真的就是（几乎）那么简单。</p><p>权重和偏差的每个偏导数都保存在_梯度向量中_，该_梯度向量的_大小与权重和偏差一样多。渐变是三角形符号∇，_n_为权重和偏差的数量：</p><h2 id="二、神经网络激活函数"><a href="#二、神经网络激活函数" class="headerlink" title="二、神经网络激活函数"></a>二、神经网络激活函数</h2><p>激活函数对于神经网络的重要性不言而喻</p><p>在计算每一层的激活值时，我们要用到激活函数，之后才能确定这些激活值究竟是多少。根据每一层前面的激活、权重和偏置，我们要为下一层的每个激活计算一个值。但在将该值发送给下一层之前，我们要使用一个激活函数对这个输出进行缩放。下一次将介绍不同的激活函数。</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop在Linux下的安装（Centos）</title>
      <link href="/2020/07/15/hadoop-zai-linux-xia-de-an-zhuang/"/>
      <url>/2020/07/15/hadoop-zai-linux-xia-de-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop安装及简介"><a href="#Hadoop安装及简介" class="headerlink" title="Hadoop安装及简介"></a>Hadoop安装及简介</h1><h2 id="Hadoop架构："><a href="#Hadoop架构：" class="headerlink" title="Hadoop架构："></a>Hadoop架构：</h2><ol><li> Hadoop Common: 这些是其他Hadoop模块所需的Java库和实用程序。这些库提供文件系统和操作系统级抽象，并包含启动Hadoop所需的Java文件和脚本。</li><li> Hadoop YARN: 这是一个用于作业调度和集群资源管理的框架。</li><li> Hadoop Distributed File System (HDFS™): 分布式文件系统，提供对应用程序数据的高吞吐量访问。</li><li> Hadoop MapReduce：这是基于YARN的用于并行处理大数据集的系统。</li></ol><p><img src="http://lanyun1103.top/wp-content/uploads/2020/07/1524814350286.jpg"></p><h2 id="固定IP："><a href="#固定IP：" class="headerlink" title="固定IP："></a>固定IP：</h2><h3 id="1-打开vmware的虚拟网络编辑器设置"><a href="#1-打开vmware的虚拟网络编辑器设置" class="headerlink" title="1.打开vmware的虚拟网络编辑器设置"></a>1.打开vmware的虚拟网络编辑器设置</h3><p><img src="http://pict.lanyun1103.top/typora/20200924132551.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_75/quality,q_70/sharpen,100/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_10,g_se,x_10,y_10" alt="image-20200924132550932"></p><h3 id="2-打开电脑的虚拟网卡配置"><a href="#2-打开电脑的虚拟网卡配置" class="headerlink" title="2.打开电脑的虚拟网卡配置"></a>2.打开电脑的虚拟网卡配置</h3><p><img src="http://pict.lanyun1103.top/typora/20200924132857.png?x-oss-process=image/auto-orient,1/interlace,1/resize,p_75/quality,q_70/sharpen,100/watermark,text_QGxhbnl1bjExMDMudG9w,color_ffaa0b,size_10,g_se,x_10,y_10" alt="image-20200924132857463"></p><h3 id="3-设置linux内网卡静态配置"><a href="#3-设置linux内网卡静态配置" class="headerlink" title="3.设置linux内网卡静态配置"></a>3.设置linux内网卡静态配置</h3><p><img src="http://pict.lanyun1103.top/typora/20200924170123.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200924170123843"></p><h3 id="4-以上完成后"><a href="#4-以上完成后" class="headerlink" title="4.以上完成后"></a>4.以上完成后</h3><pre class="line-numbers language-none"><code class="language-none">service network restartip addr &#x2F;&#x2F;查看当前的ipping www.baidu.com &#x2F;&#x2F;测试是否成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里如果不能联网，很大可能是网关设置错误，网关的概念可以在百度查询，我调了很久终于是可以联网了</p><p><img src="http://pict.lanyun1103.top/typora/20200924184413.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200924184413493"></p><h2 id="安装hadoop："><a href="#安装hadoop：" class="headerlink" title="安装hadoop："></a>安装hadoop：</h2><h3 id="一、配置主机名"><a href="#一、配置主机名" class="headerlink" title="一、配置主机名"></a>一、配置主机名</h3><p>这个很重要，我看的每个教程里面都没有说</p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">#查看当前主机名hostname#修改主机名hostnamectl <span class="token keyword">set</span><span class="token operator">-</span>hostname <span class="token punctuation">[</span>想起的主机名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>设置完成后重启并登陆，这时候就应该不是localhost.localhostdomain这个默认主机名了</p><p>在很多教程中还提到可以设置其他几个内网ip关系映射，例如</p><pre class="line-numbers language-none"><code class="language-none">192.168.0.104 slave1192.168.0.105 slave2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个在下面会说到怎么修改hosts文件中ip映射关系来省略输入ip地址。</p><h3 id="二、安装JDK"><a href="#二、安装JDK" class="headerlink" title="二、安装JDK"></a>二、安装JDK</h3><p>推荐使用wget下载国内镜像，这边给一个华为的1.8.192版本的javalinux镜像</p><p><a href="https://repo.huaweicloud.com/java/jdk/8u192-b12/jdk-8u192-linux-x64.tar.gz">https://repo.huaweicloud.com/java/jdk/8u192-b12/jdk-8u192-linux-x64.tar.gz</a></p><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><pre class="line-numbers language-none"><code class="language-none">#先消除404错误yum clean allrpm --rebuilddb#如果报错可以下载以下包yum install whichyum -y install openssh-clientsyum install taryum install wget<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="检查jdk"><a href="#检查jdk" class="headerlink" title="检查jdk"></a>检查jdk</h4><pre class="line-numbers language-none"><code class="language-none">java -version#检查系统内jdk版本号rpm -qagrep jdk#卸载jdkrpm -e nodeps java******<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h4><p>推荐到根目录的opt目录中下载</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;optwget [填写上面的镜像]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下载完成后解压并改名</p><pre class="line-numbers language-none"><code class="language-none">tar -zxvf jdk******.tar.gzmv java1.8.0_openjdk jdk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;profile#在最后添加export JAVA_HOME&#x3D;&#x2F;opt&#x2F;jdkexport PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>添加完成后Ecs :wq保存并退出</p><p>source /etc/profile 使文件生效</p><p>java -version查看是否设置成功</p><h3 id="三、配置免密互相ssh"><a href="#三、配置免密互相ssh" class="headerlink" title="三、配置免密互相ssh"></a>三、配置免密互相ssh</h3><h4 id="1-统一hosts"><a href="#1-统一hosts" class="headerlink" title="1.统一hosts"></a>1.统一hosts</h4><p>首先在几个服务器之间创建统一的hosts映射,例如以下，这一步和上面的配置主机名差不多</p><pre class="line-numbers language-none"><code class="language-none">192.168.177.61 host1192.168.177.62 host2192.168.177.63 host3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在host1服务器中（192.168.177.62）创建hosts，发送给第二个服务器（hosts2），这时候还不能用hosts2，必须用ip地址，默认会替换第二个服务器中的hosts文件，如此重复，hosts2再发给hosts3</p><pre class="line-numbers language-none"><code class="language-none">sudo scp &#x2F;etc&#x2F;hosts 192.168.177.62:&#x2F;etc&#x2F;hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pict.lanyun1103.top/typora/20200924201459.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200924201459046"></p><h4 id="2-以下创建私钥"><a href="#2-以下创建私钥" class="headerlink" title="2.以下创建私钥"></a>2.以下创建私钥</h4><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa#连续回车，不要输入东西（如果是提示是否overwrite输入y）#如此之后可以在家目录下的.ssh文件夹中查看私钥#把私钥发给其他服务器用来免密登陆ssh-copy-id [主机名]#验证是否可以使用ssh [主机名]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置成功就会和以下一样，可以在两个服务器之间来回切换</p><p><img src="http://pict.lanyun1103.top/typora/20200924201938.png?x-oss-process=image/auto-orient,1/quality,q_90/watermark,text_QGxhbnl1bjExMDMudG9w,color_ebff09,size_10,g_ne,x_10,y_10" alt="image-20200924201938938"></p><h3 id="四、安装hadoop"><a href="#四、安装hadoop" class="headerlink" title="四、安装hadoop"></a>四、安装hadoop</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;optwget http:&#x2F;&#x2F;mirror.bit.edu.cn&#x2F;apache&#x2F;hadoop&#x2F;common&#x2F;hadoop-2.7.7&#x2F;hadoop-2.7.7.tar.gz#下载完成后进行解压tar -zxvf hadoop-2.7.7.tar.gz#解压完成改名字mv hadoop-2.7.7.tar.gz hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><pre class="line-numbers language-none"><code class="language-none">vi &#x2F;etc&#x2F;profileexport HADOOP_HOME&#x3D;&#x2F;opt&#x2F;hadoop#将export PATH改成下面的形式，记住中间一定是冒号export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$HADOOP_HOME&#x2F;bin#完成后wq退出source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1）配置hadoop-env.sh</p><p>#vi hadoop-env.sh进入文件，按i编辑， 最下面添加如下信息 将export JAVA_HOME=${JAVA_HOME} 改成： export JAVA_HOME=/opt/jdk</p><p>按Esc，然后 :wq回车，即可保存退出。</p><p>2）配置core-site.xml （编辑保存方式同hadoop-env.sh）</p><p>#vi core-site.xml 在与标签中间添加如下配置：</p><p>其中，hdfs://master:9000需要注意master是否跟你的主机名一致</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://master:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/usr/hadoop/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）配置hdfs-site.xml（编辑保存方式同hadoop-env.sh）</p><p>#vi hdfs-site.xml 在与标签中间添加如下配置：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）配置mapred-site.xml （编辑保存方式同hadoop-env.sh） 添加如下配置：</p><p>这里需要注意下，文件夹里面没有这个XML，需要将mapred-site.xml.template这个文件复制，然后重命名为mapred-site.xml。</p><p>#cp mapred-site.xml.template mapred-site.xml</p><p>#vi mapred-site.xml</p><p>然后在mapred-site.xml中与标签中间，添加如下内容：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）配置yarn-site.xml（编辑保存方式同hadoop-env.sh）</p><p>master中的master是主机名，改成与自己的主机名相同 \#hostname // 查看主机名 \#vi yarn-site.xml 在与中间添加如下配置： ```xml <property> <name>yarn.resourcemanager.hostname</name> <value>master</value> </property> <property> <name>yarn.nodemanager.aux-services</name> <value>mapreduce_shuffle</value> </property> ``` 6) #vi slaves //将里面的内容删除掉，然后改成自己的主机名 ## 运行与关闭： 1）格式化HDFS文件系统 在初次安装和使用Hadoop之前，需要格式化分布式文件系统HDFS。使用如下命令进行格式化分布式文件系统： \# cd //进入/root目录 \# hdfs namenode -format //执行这条命令。使hdfs格式化 **注意：格式化在安装hadoop时只能执行一次。** 2）启动NameNode 和 DataNode 守护进程 \#cd /opt/hadoop/sbin //进入hadoop的sbin目录 \#./start-dfs.sh //启动hadoop,第一次启动需要输入yes 3）启动ResourceManager 和 NodeManager 守护进程 \# ./start-yarn.sh 4）hadoop验证 执行jps命令，有如下进程，说明Hadoop正常启动 ```xml NameNode DataNode Jps NodeManager ResourceManager SecondaryNameNode ``` 测试hadoop ``` hdfs dfs -mkdir -p /user //在hdfs中创建user目录 hdfs dfs -ls / //查看是否有user目录 hdfs dfs -mkdir -p /user/test //在user目录下创建test目录 hdfs dfs -ls /user //查看在/user是否有test ``` 如果创建目录并且可以查找到目录，则hadoop部署完成。 5）如果想停止Hadoop守护进程。 最后要停止Hadoop守护进程，命令如下： \#cd /opt/hadoop/sbin //进入hadoop的sbin目录下 \#./stop-all.sh //停止进程 ### 在浏览器中访问 管理界面：<a href="http://lanyun1:8088/">http://lanyun1:8088</a> NameNode：<a href="http://lanyun1:50070/">http://lanyun1:50070</a> HDFS:<a href="http://lanyun1:8042/">http://lanyun1:8042</a> 如果你的linux没有图形界面，可以到百度搜索如何安装相应版本的图形界面</p>]]></content>
      
      
      <categories>
          
          <category> 大数据与人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB_特征值与特征向量、稀疏矩阵</title>
      <link href="/2020/07/12/matlab-te-zheng-zhi-yu-te-zheng-xiang-liang-xi-shu-ju-zhen/"/>
      <url>/2020/07/12/matlab-te-zheng-zhi-yu-te-zheng-xiang-liang-xi-shu-ju-zhen/</url>
      
        <content type="html"><![CDATA[<p><img src="http://lanyun1103.top/wp-content/uploads/2020/07/EECPRRDJ65EW2XD-300x295.png"></p><h1 id="特征值和特征向量"><a href="#特征值和特征向量" class="headerlink" title="特征值和特征向量"></a>特征值和特征向量</h1><h2 id="一、求特征值"><a href="#一、求特征值" class="headerlink" title="一、求特征值"></a>一、求特征值</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">eig</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>求包含矩阵A的特征值的向量<span class="token punctuation">.</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span> D<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">eig</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>产生一个矩阵A的特征值在对角线上的对角矩阵D和矩阵X<span class="token punctuation">,</span>它们的列是相应的特征向量<span class="token punctuation">,</span>满足AX<span class="token operator">=</span>XD<span class="token punctuation">.</span>为了得到有更好条件特征值的矩阵要进行相似变换<span class="token punctuation">.</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>D<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">eig</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> rebalance<span class="token punctuation">)</span>不经过平衡处理求得矩阵A的特征值和特征向量<span class="token punctuation">,</span>也就是不进行平衡相似变换<span class="token function">balance</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>求平衡矩阵<span class="token punctuation">[</span>T<span class="token punctuation">,</span>B<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">balance</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>找到一个相似变换矩阵T和矩阵B<span class="token punctuation">,</span>使得它们满足B<span class="token operator">=</span>T<span class="token operator">-</span>ATB是用命令balance求得的平衡矩阵<span class="token punctuation">.</span><span class="token function">eigs</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>返回一个由矩阵A的部分特征值组成的向量<span class="token punctuation">,</span>和命令eig样<span class="token punctuation">,</span>但是不返回全部的特征值<span class="token punctuation">.</span>如果不带有参量<span class="token punctuation">,</span>则计算出最大的特征值<span class="token punctuation">.</span>当计算所有特征值时<span class="token punctuation">,</span>如果矩阵A的秩不小于<span class="token number">6</span><span class="token punctuation">,</span>则计算出<span class="token number">6</span>个特征值来<span class="token punctuation">.</span><span class="token function">eigs</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> n<span class="token punctuation">)</span>求出矩阵A的部分特征值<span class="token punctuation">.</span>在使用一个矩阵列的线性运算符时<span class="token punctuation">,</span>字符串f中包含的是M文件的文件名<span class="token punctuation">,</span>n指定问题的阶次<span class="token punctuation">.</span>用这种方法来求特征值比开始就用运算符来求要快<span class="token function">condeig</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>返回一个由矩阵A的特征值条件数组成的向量<span class="token punctuation">[</span>V<span class="token punctuation">,</span>D<span class="token punctuation">,</span>s<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">condeig</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>返回<span class="token punctuation">[</span>V<span class="token punctuation">,</span>D<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">eig</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>和s<span class="token operator">=</span><span class="token function">condeig</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、QR-QZ算法"><a href="#二、QR-QZ算法" class="headerlink" title="二、QR/QZ算法"></a>二、QR/QZ算法</h2><p>在MATLAB中，QR算法是计算矩阵所有特征值的一种有效的数学方法，也可以用命令eig来求。在用这种方法时，建议将矩阵转换成相似的上海森伯形式，</p><h3 id="QR算法"><a href="#QR算法" class="headerlink" title="QR算法"></a>QR算法</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>Q<span class="token punctuation">,</span> R<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">qr</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>产生一个m×m的酉矩阵Q和一个m×n的上三角矩阵R<span class="token punctuation">,</span>使得A<span class="token operator">=</span>QR<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="QZ算法"><a href="#QZ算法" class="headerlink" title="QZ算法"></a>QZ算法</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>C<span class="token punctuation">,</span>D<span class="token punctuation">,</span>Q<span class="token punctuation">,</span>Z<span class="token punctuation">,</span>V<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">qz</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span>得到对角线元素是广义特征值的上三角矩阵C、D和广义特征向量矩阵V<span class="token punctuation">,</span>矩阵Q和Z是变换矩阵<span class="token punctuation">,</span>使得QAZ<span class="token operator">=</span>C和QBZ<span class="token operator">=</span>D<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h1><h2 id="一、创建稀疏矩阵"><a href="#一、创建稀疏矩阵" class="headerlink" title="一、创建稀疏矩阵"></a>一、创建稀疏矩阵</h2><p>可以通过eye创建，但是sparse可以创建稀疏矩阵</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">sparse</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>由非零元素和下标建立稀疏矩阵A<span class="token punctuation">.</span>如果A已是一个稀疏矩阵<span class="token punctuation">,</span>则返回A本身<span class="token punctuation">.</span><span class="token function">sparse</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span>生成一个m×n的所有元素都是<span class="token number">0</span>的稀疏矩阵<span class="token punctuation">.</span><span class="token function">sparse</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span> a<span class="token punctuation">)</span>生成一个由长度相同的向量u<span class="token punctuation">,</span>v和a定义的稀疏矩阵<span class="token punctuation">.</span>其中u和v是整数向量<span class="token punctuation">,</span>a是一个实数或者复数向量<span class="token punctuation">.</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span>对应值a1<span class="token punctuation">,</span>如果a中有零元素<span class="token punctuation">,</span>则将这个元素排除在外稀疏矩阵的大小为<span class="token function">max</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>×<span class="token function">max</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sparse</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>a<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span>生成一个m×n的稀疏矩阵<span class="token punctuation">,</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>w<span class="token punctuation">)</span>对应值a<span class="token operator">:</span><span class="token punctuation">.</span>向量u<span class="token punctuation">,</span>v和a必须长度相同<span class="token punctuation">.</span><span class="token function">sparse</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>a<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>nzmax<span class="token punctuation">)</span>生成一个m×n的含有nzmax个非零元素的稀疏矩阵<span class="token punctuation">.</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span>对应值a<span class="token punctuation">.</span>nzmax的值必须大于或者等于向量u和v的长度<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>返回向量x中非零元素的下标<span class="token punctuation">.</span>如果x<span class="token operator">=</span>X是一个矩阵<span class="token punctuation">,</span>那么X的向量就作为一个长向量来考虑<span class="token punctuation">.</span><span class="token punctuation">[</span>u<span class="token punctuation">,</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span>返回矩阵A中非零元素的下标<span class="token punctuation">.</span><span class="token punctuation">[</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>返回矩阵A中非零元素的下标<span class="token punctuation">.</span>用向量中元素的值及u和v中相应的下标<span class="token punctuation">,</span>实际上就是向量、v和s作为命令pars的参数<span class="token punctuation">.</span><span class="token function">spconvert</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span>将一个有三列的矩阵转换成一个稀疏矩阵<span class="token punctuation">.</span>D中的第<span class="token number">1</span>列作为行的下标<span class="token punctuation">,</span>第<span class="token number">2</span>列作为列的下标<span class="token punctuation">,</span>最后一列作为元素值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、稀疏矩阵运算"><a href="#二、稀疏矩阵运算" class="headerlink" title="二、稀疏矩阵运算"></a>二、稀疏矩阵运算</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">nnz</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>求矩阵A中非零元素的个数<span class="token punctuation">.</span>它既可求满矩阵也可求稀疏矩阵<span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>画出稀疏矩阵A中非零元素的分布<span class="token punctuation">.</span>也可用在满矩阵中<span class="token punctuation">,</span>在这种情况下<span class="token punctuation">,</span>只给出非零元素的分布<span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>cstr<span class="token punctuation">,</span>size<span class="token punctuation">)</span>用指定的颜色cstr在size规定的范围内画出稀疏矩阵A中非零元素的分布<span class="token punctuation">.</span><span class="token function">nonzeros</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>按照列的顺序找出矩阵A中非零的元素<span class="token punctuation">.</span><span class="token function">spores</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span>把矩阵A中的非零元素全换为<span class="token number">1.</span><span class="token function">spalloc</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> nzman<span class="token punctuation">)</span>产生一个m×n阶只有n<span class="token operator">=</span>max个非零元素的稀疏矩阵<span class="token punctuation">.</span>这样可以有效地减少存储空间和提高运算速度<span class="token punctuation">.</span><span class="token function">nzmax</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>给出为矩阵A中非零元素分配的内存数<span class="token punctuation">.</span>不一定和<span class="token function">nnz</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>得到的数相同<span class="token operator">:</span>参见 sparse或者spa11oc<span class="token punctuation">.</span><span class="token function">issparse</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>如果矩阵A是稀疏矩阵<span class="token punctuation">,</span>则返回<span class="token number">1</span><span class="token punctuation">;</span>否则返回<span class="token number">0.</span><span class="token function">spun</span> <span class="token punctuation">(</span>fcn<span class="token punctuation">,</span> A<span class="token punctuation">)</span>用A中所有非零元素对函数fcn求值<span class="token punctuation">,</span>如果函数不是对稀疏矩阵定义的<span class="token punctuation">,</span>同样也可以求值<span class="token punctuation">.</span><span class="token function">spun</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>求稀疏矩阵A的结构秩<span class="token punctuation">.</span>对于所有的矩阵来说<span class="token punctuation">,</span>都有<span class="token function">prank</span><span class="token punctuation">(</span>A≥<span class="token function">rank</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学生管理系统_python</title>
      <link href="/2020/07/11/xue-sheng-guan-li-xi-tong-python/"/>
      <url>/2020/07/11/xue-sheng-guan-li-xi-tong-python/</url>
      
        <content type="html"><![CDATA[<h1 id="学生管理系统"><a href="#学生管理系统" class="headerlink" title="学生管理系统"></a>学生管理系统</h1><h2 id="思维导图："><a href="#思维导图：" class="headerlink" title="思维导图："></a>思维导图：</h2><p><img src="http://lanyun1103.top/wp-content/uploads/2020/07/%E5%AE%9E%E4%B9%A0%E4%BD%9C%E4%B8%9A.png"></p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p><strong>已经把所有的输出输入方法全部写到view中，在合适包中放上合适的模块，没有模块之间的互相调用导致bug的问题。</strong></p><p><strong>我使用思维导图</strong>把所有的功能写出来，并且每个功能通过测试可以使用（测试附图，肯定是可以正确运行使用的），在主函数中使用try进行错误处理。</p><p>在查找一个int和str不能在枚举类中进行比较的一个bug中，以为append进列表中的全部都是int，但是后来一步一步debug知道进去的全是str，并且可以使用sort进行比较。这是一个出现在我修改了一个学生的成绩后，无法进行排序的bug（不修改是可以的），于是将修改的成绩去掉强制转换成int也就是修改为默认input的类型str。从而问题解决。</p><p>自己写接口的时候算是把大部分自己知道的东西结合起来了。Linux,springboot,maven,java,python，本来是尝试一下可不可行，和同学开玩笑说，网上的不好用，想自己做，还真没有一开始就确定可以做出来的想法。在本地跑起来的时候也没想过能给大家一起用，放上服务器调试端口到想放弃，最终还是我自己的执念，关了电脑又想试试的感觉，最终发现是linux自带防火墙（firewall）没有开放8088端口。打开以后，世界明朗了。以至于现在这个端口还在我的服务器上开着没关。学以致用，真的是编程的精髓。</p><p><strong>这让我确定了编程语言的魅力，思考、创造、输出、反思，如果能让更多的人用上自己的代码我觉得这是一件其他行业很难体会到的成就感。</strong></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token comment"># @Time    : 2020/7/5 17:12</span><span class="token comment"># @Author  : lanyun</span><span class="token comment"># @FileName: main.py</span><span class="token comment"># @Software: PyCharm</span><span class="token comment"># @blog ：http://lanyun1103.top/</span><span class="token keyword">from</span> day72<span class="token punctuation">.</span>view <span class="token keyword">import</span> Menu<span class="token keyword">from</span> day72<span class="token punctuation">.</span>business <span class="token keyword">import</span> MainConrole<span class="token keyword">from</span> day72<span class="token punctuation">.</span>tools <span class="token keyword">import</span> FileControler<span class="token keyword">from</span> day72<span class="token punctuation">.</span>school <span class="token keyword">import</span> Student<span class="token keyword">from</span> day72<span class="token punctuation">.</span>school <span class="token keyword">import</span> Manager<span class="token keyword">from</span> day72<span class="token punctuation">.</span>school <span class="token keyword">import</span> Teacher<span class="token keyword">from</span> day72<span class="token punctuation">.</span>menu <span class="token keyword">import</span> Action<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 创建界面对象（保存信息）</span>    m <span class="token operator">=</span> MainConrole<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 创建菜单</span>    menu <span class="token operator">=</span> Menu<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 创建文件控制对象，包含各种对文件的操作</span>    conet <span class="token operator">=</span> FileControler<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 操作分类对象，对输入不同的数分类进行不同的方法</span>    acter <span class="token operator">=</span> Action<span class="token punctuation">(</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment"># 开始（创建界面）</span>        m<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        con <span class="token operator">=</span> Menu<span class="token punctuation">.</span>input_con<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 对输入数字进行判断</span>        <span class="token comment"># 输入1是管理员操作</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> con <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>                <span class="token comment"># 使用管理员登陆</span>                username <span class="token operator">=</span> Menu<span class="token punctuation">.</span>input_username<span class="token punctuation">(</span><span class="token punctuation">)</span>                password <span class="token operator">=</span> Menu<span class="token punctuation">.</span>input_password<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 进行登陆，因为是管理员，所以返回缓存中admin的信息</span>                <span class="token keyword">if</span> Manager<span class="token punctuation">.</span>login<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> m<span class="token punctuation">.</span>admin<span class="token punctuation">)</span><span class="token punctuation">:</span>                    menu<span class="token punctuation">.</span>show_admin_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment"># 进行接下来的操作分类</span>                    acter<span class="token punctuation">.</span>adminActer<span class="token punctuation">(</span>Menu<span class="token punctuation">.</span>input_con<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment"># 因为管理员操作一定是修改了信息的，所以需要更新缓存</span>                    m<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登陆失败'</span><span class="token punctuation">)</span>            <span class="token comment"># 输入2是学生操作</span>            <span class="token keyword">elif</span> con <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>                <span class="token comment"># 使用学生登陆</span>                username <span class="token operator">=</span> Menu<span class="token punctuation">.</span>input_username<span class="token punctuation">(</span><span class="token punctuation">)</span>                password <span class="token operator">=</span> Menu<span class="token punctuation">.</span>input_password<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 进行登陆，因为是学生，所以返回缓存中student的信息</span>                <span class="token keyword">if</span> Student<span class="token punctuation">.</span>login<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> m<span class="token punctuation">.</span>students<span class="token punctuation">)</span><span class="token punctuation">:</span>                    menu<span class="token punctuation">.</span>show_stu_menu<span class="token punctuation">(</span>Student<span class="token punctuation">.</span>dx_geter<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> m<span class="token punctuation">.</span>students<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                        <span class="token comment">#修改学生信息没有使用修改对象的方法，就当使用两种办法实现了修改吧，懒得改了</span>                        acter<span class="token punctuation">.</span>stuActer<span class="token punctuation">(</span>Menu<span class="token punctuation">.</span>input_con<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>students<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> m<span class="token punctuation">)</span>                        <span class="token keyword">if</span> Menu<span class="token punctuation">.</span>input_weather_continue<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'y'</span><span class="token punctuation">:</span>                            <span class="token keyword">break</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登陆失败'</span><span class="token punctuation">)</span>            <span class="token comment"># 输入3是教师操作</span>            <span class="token keyword">elif</span> con <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>                <span class="token comment"># 使用登陆</span>                username <span class="token operator">=</span> Menu<span class="token punctuation">.</span>input_username<span class="token punctuation">(</span><span class="token punctuation">)</span>                password <span class="token operator">=</span> Menu<span class="token punctuation">.</span>input_password<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 进行登陆，因为是老师，所以返回缓存中teacher的信息</span>                <span class="token keyword">if</span> Teacher<span class="token punctuation">.</span>login<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> m<span class="token punctuation">.</span>teacher<span class="token punctuation">)</span><span class="token punctuation">:</span>                    menu<span class="token punctuation">.</span>show_tea_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                        <span class="token comment">#这里使用dx_geter返回列表中符合条件的对象，避免多次查找</span>                        acter<span class="token punctuation">.</span>teaActer<span class="token punctuation">(</span>Menu<span class="token punctuation">.</span>input_con<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Teacher<span class="token punctuation">.</span>dx_geter<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> m<span class="token punctuation">.</span>teacher<span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span>                        <span class="token keyword">if</span> Menu<span class="token punctuation">.</span>input_weather_continue<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'y'</span><span class="token punctuation">:</span>                            <span class="token keyword">break</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登陆失败'</span><span class="token punctuation">)</span>            <span class="token comment"># 输入4退出，并保存信息到文件中</span>            <span class="token keyword">elif</span> con <span class="token operator">==</span> <span class="token string">'4'</span><span class="token punctuation">:</span>                m<span class="token punctuation">.</span>ender<span class="token punctuation">(</span><span class="token punctuation">)</span>            conet<span class="token punctuation">.</span>write_in_all<span class="token punctuation">(</span>m<span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="menu-py"><a href="#menu-py" class="headerlink" title="menu.py"></a>menu.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> day72<span class="token punctuation">.</span>tools <span class="token keyword">import</span> FileControler<span class="token keyword">from</span> day72 <span class="token keyword">import</span> school<span class="token keyword">from</span> day72<span class="token punctuation">.</span>school <span class="token keyword">import</span> Student<span class="token keyword">from</span> day72<span class="token punctuation">.</span>school <span class="token keyword">import</span> Teacher<span class="token keyword">from</span> day72<span class="token punctuation">.</span>business <span class="token keyword">import</span> MainConrole<span class="token keyword">from</span> day72<span class="token punctuation">.</span>view <span class="token keyword">import</span> Menu<span class="token keyword">class</span> <span class="token class-name">Action</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>school <span class="token operator">=</span> school        self<span class="token punctuation">.</span>conet <span class="token operator">=</span> FileControler<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mainct <span class="token operator">=</span> MainConrole<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>menu <span class="token operator">=</span> Menu<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 定义管理员的方法</span>    <span class="token keyword">def</span> <span class="token function">adminActer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 增加学生</span>        <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            username <span class="token operator">=</span> self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>input_username<span class="token punctuation">(</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>input_password<span class="token punctuation">(</span><span class="token punctuation">)</span>            name <span class="token operator">=</span> self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>input_name<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 添加学生这里用的是直接添加Student对象</span>            self<span class="token punctuation">.</span>conet<span class="token punctuation">.</span>stu_write_in<span class="token punctuation">(</span>Student<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 增加老师</span>        <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>            username <span class="token operator">=</span> self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>input_username<span class="token punctuation">(</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>input_password<span class="token punctuation">(</span><span class="token punctuation">)</span>            name <span class="token operator">=</span> self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>input_name<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>conet<span class="token punctuation">.</span>stu_write_in<span class="token punctuation">(</span>Teacher<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 修改密码</span>        <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">'4'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>    <span class="token keyword">def</span> <span class="token function">stuActer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">,</span> student_list<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 查看学生信息</span>        <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>output_stu_info<span class="token punctuation">(</span>student_list<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        <span class="token comment"># 查看成绩</span>        <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>output_score<span class="token punctuation">(</span>student_list<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        <span class="token comment"># 修改密码</span>        <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>            tar_psw <span class="token operator">=</span> self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>input_password<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>mainct<span class="token punctuation">.</span>change_stu_password<span class="token punctuation">(</span>username<span class="token punctuation">,</span> tar_psw<span class="token punctuation">,</span> m<span class="token punctuation">)</span>        <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">'4'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">'5'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>show_books<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 这里的参数</span>    <span class="token triple-quoted-string string">"""    @:param num 动作数    @:param user 返回的所有用户信息    @:param teacher 当前操作的教师信息    """</span>    <span class="token keyword">def</span> <span class="token function">teaActer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">,</span> teacher<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            name <span class="token operator">=</span> self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>input_name<span class="token punctuation">(</span><span class="token punctuation">)</span>            tar_score <span class="token operator">=</span> self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>input_score<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>mainct<span class="token punctuation">.</span>change_score<span class="token punctuation">(</span>name<span class="token punctuation">,</span> tar_score<span class="token punctuation">,</span> m<span class="token punctuation">)</span>        <span class="token comment"># 查询成绩功能完成</span>        <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>            <span class="token comment"># 在返回的所有信息列表中调出students的所有列表信息找出name相同的打印信息</span>            self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>output_stuinfo_bytea<span class="token punctuation">(</span>m<span class="token punctuation">.</span>students<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>mainct<span class="token punctuation">.</span>order_score<span class="token punctuation">(</span>m<span class="token punctuation">)</span>        <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>            tar_psw <span class="token operator">=</span> self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>input_password<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>mainct<span class="token punctuation">.</span>change_tea_password<span class="token punctuation">(</span>teacher<span class="token punctuation">.</span>username<span class="token punctuation">,</span> tar_psw<span class="token punctuation">,</span> m<span class="token punctuation">)</span>        <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">'4'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">'5'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>menu<span class="token punctuation">.</span>show_weather<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tools-py"><a href="#tools-py" class="headerlink" title="tools.py"></a>tools.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterator<span class="token punctuation">,</span> Iterable<span class="token keyword">from</span> day72<span class="token punctuation">.</span>school <span class="token keyword">import</span> User<span class="token keyword">from</span> day72<span class="token punctuation">.</span>school <span class="token keyword">import</span> Student<span class="token keyword">from</span> day72<span class="token punctuation">.</span>school <span class="token keyword">import</span> Manager<span class="token keyword">from</span> day72<span class="token punctuation">.</span>school <span class="token keyword">import</span> Teacher<span class="token keyword">import</span> datetime<span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">class</span> <span class="token class-name">FileControler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>student_dir <span class="token operator">=</span> <span class="token string">'info_csv/student.csv'</span>        self<span class="token punctuation">.</span>teacher_dir <span class="token operator">=</span> <span class="token string">'info_csv/teacher.csv'</span>        self<span class="token punctuation">.</span>admin_dir <span class="token operator">=</span> <span class="token string">'info_csv/admin.csv'</span>    <span class="token comment"># 写入</span>    <span class="token comment"># 这里接受一个stu对象，把stu对象添加到文件中，下面同</span>    <span class="token keyword">def</span> <span class="token function">stu_write_in</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stu<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>student_dir<span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                file_writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>                file_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>username<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>password<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>birth_year<span class="token punctuation">,</span>                                      stu<span class="token punctuation">.</span>birth_month<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>birth_day<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>score<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>numb<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'添加成功'</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不存在文件'</span><span class="token punctuation">)</span>    <span class="token comment"># 写入教师信息</span>    <span class="token keyword">def</span> <span class="token function">tea_write_in</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tea<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>teacher_dir<span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                file_writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>                file_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>tea<span class="token punctuation">.</span>username<span class="token punctuation">,</span> tea<span class="token punctuation">.</span>password<span class="token punctuation">,</span>                                     tea<span class="token punctuation">.</span>name<span class="token punctuation">,</span> tea<span class="token punctuation">.</span>salary<span class="token punctuation">,</span> tea<span class="token punctuation">.</span>classer<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'添加成功'</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不存在文件'</span><span class="token punctuation">)</span>    <span class="token comment"># 写入管理员信息</span>    <span class="token keyword">def</span> <span class="token function">admin_write_in</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> admin<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>admin_dir<span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                file_writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>                file_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>admin<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'添加成功'</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不存在文件'</span><span class="token punctuation">)</span>            <span class="token comment"># **********************************</span>    <span class="token comment"># 读出</span>    <span class="token comment"># 读出，这里接收一个student_list是当前程序初始化为[]的列表，里面什么都没有，</span>    <span class="token comment"># 所以这些方法把文件中的学生信息写入到列表中作为缓存避免多次读取</span>    <span class="token keyword">def</span> <span class="token function">stu_read_out</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> student_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>student_dir<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                file_reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>                <span class="token keyword">for</span> row <span class="token keyword">in</span> file_reader<span class="token punctuation">:</span>                    student_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Student<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不存在文件'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> student_list    <span class="token comment"># 读出教师信息</span>    <span class="token keyword">def</span> <span class="token function">tea_read_out</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> teacher_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>teacher_dir<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                file_reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>                <span class="token keyword">for</span> row <span class="token keyword">in</span> file_reader<span class="token punctuation">:</span>                    teacher_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Teacher<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不存在文件'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> teacher_list    <span class="token comment"># 读出管理员信息</span>    <span class="token keyword">def</span> <span class="token function">admin_read_out</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> admin_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>admin_dir<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                file_reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>                <span class="token keyword">for</span> row <span class="token keyword">in</span> file_reader<span class="token punctuation">:</span>                    admin_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Manager<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> FileExistsError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不存在文件'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> admin_list    <span class="token comment"># **********************</span>    <span class="token comment"># 写入缓存中的所有信息到文件中（覆盖重写文件中的所有内容）</span>    <span class="token keyword">def</span> <span class="token function">write_in_all</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始写入文件'</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>student_dir<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp1<span class="token punctuation">:</span>            fpwriter1 <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>fp1<span class="token punctuation">)</span>            <span class="token keyword">for</span> stu <span class="token keyword">in</span> m<span class="token punctuation">.</span>students<span class="token punctuation">:</span>                fpwriter1<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>username<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>password<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                                    stu<span class="token punctuation">.</span>birth_year<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>birth_month<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>birth_day<span class="token punctuation">,</span>                                    stu<span class="token punctuation">.</span>score<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>numb<span class="token punctuation">)</span><span class="token punctuation">)</span>            fp1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>teacher_dir<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp2<span class="token punctuation">:</span>            fpwriter2 <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>fp2<span class="token punctuation">)</span>            <span class="token keyword">for</span> tea <span class="token keyword">in</span> m<span class="token punctuation">.</span>teacher<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>tea<span class="token punctuation">.</span>username<span class="token punctuation">)</span>                fpwriter2<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">(</span>tea<span class="token punctuation">.</span>username<span class="token punctuation">,</span> tea<span class="token punctuation">.</span>password<span class="token punctuation">,</span> tea<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                                    tea<span class="token punctuation">.</span>salary<span class="token punctuation">,</span> tea<span class="token punctuation">.</span>classer<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment"># **************************</span>            fp2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Timer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>shengxiao <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'鼠'</span><span class="token punctuation">,</span> <span class="token string">'牛'</span><span class="token punctuation">,</span> <span class="token string">'虎'</span><span class="token punctuation">,</span> <span class="token string">'兔'</span><span class="token punctuation">,</span> <span class="token string">'龙'</span><span class="token punctuation">,</span> <span class="token string">'蛇,'</span><span class="token punctuation">,</span> <span class="token string">'马'</span><span class="token punctuation">,</span> <span class="token string">'羊'</span><span class="token punctuation">,</span> <span class="token string">'猴,'</span><span class="token punctuation">,</span> <span class="token string">'鸡'</span><span class="token punctuation">,</span> <span class="token string">'狗'</span><span class="token punctuation">,</span> <span class="token string">'猪'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>zodiac_name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'摩羯座'</span><span class="token punctuation">,</span> <span class="token string">'水瓶座'</span><span class="token punctuation">,</span> <span class="token string">'双鱼座'</span><span class="token punctuation">,</span>                            <span class="token string">'白羊座'</span><span class="token punctuation">,</span> <span class="token string">'金牛座'</span><span class="token punctuation">,</span> <span class="token string">'双子座'</span><span class="token punctuation">,</span>                            <span class="token string">'巨蟹座'</span><span class="token punctuation">,</span> <span class="token string">'狮子座'</span><span class="token punctuation">,</span> <span class="token string">'处女座'</span><span class="token punctuation">,</span>                            <span class="token string">'天枰座'</span><span class="token punctuation">,</span> <span class="token string">'天蝎座'</span><span class="token punctuation">,</span> <span class="token string">'射手座'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>zodiac_day <span class="token operator">=</span> <span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_zodiac_name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> self<span class="token punctuation">.</span>zodiac_day<span class="token punctuation">:</span>            <span class="token keyword">if</span> month <span class="token operator">==</span> <span class="token number">12</span> <span class="token keyword">and</span> day <span class="token operator">></span> <span class="token number">22</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>zodiac_name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> month <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">and</span> day <span class="token operator">&lt;=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>zodiac_name<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">elif</span> month <span class="token operator">==</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">and</span> day <span class="token operator">></span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>zodiac_name<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>            i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">get_sx</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>shengxiao<span class="token punctuation">[</span><span class="token punctuation">(</span>year <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">is_birthday_dx</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>birth_year<span class="token punctuation">,</span> user<span class="token punctuation">.</span>birth_month<span class="token punctuation">,</span> user<span class="token punctuation">.</span>birth_day<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>                datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>year<span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>month<span class="token punctuation">,</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">get_yunshi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>zodiac<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token string">'zodiac='</span>        data <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>zodiac<span class="token punctuation">)</span>        url <span class="token operator">=</span> <span class="token string">"http://39.96.61.226:8088/test/getys"</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 迭代器</span><span class="token keyword">class</span> <span class="token class-name">WeatherInterator</span><span class="token punctuation">(</span>Iterator<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cities<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cities <span class="token operator">=</span> cities        self<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">getWeather</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> city<span class="token punctuation">)</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://wthrcdn.etouch.cn/weather_mini?city='</span> <span class="token operator">+</span> city<span class="token punctuation">)</span>        data <span class="token operator">=</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'forecast'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token string">'&#123;0&#125;:&#123;1&#125;,&#123;2&#125;,&#123;3&#125;,&#123;4&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'low'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'high'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'fengxiang'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>index <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>cities<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopIteration        city <span class="token operator">=</span> self<span class="token punctuation">.</span>cities<span class="token punctuation">[</span>self<span class="token punctuation">.</span>index<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>index <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>getWeather<span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token comment"># 可迭代对象</span><span class="token keyword">class</span> <span class="token class-name">WeatherIterable</span><span class="token punctuation">(</span>Iterable<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cities<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cities <span class="token operator">=</span> cities    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> WeatherInterator<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cities<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Requester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> isbn<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">"http://search.dangdang.com?key="</span>        self<span class="token punctuation">.</span>isbn <span class="token operator">=</span> isbn        self<span class="token punctuation">.</span>agent <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36'</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url <span class="token operator">+</span> self<span class="token punctuation">.</span>isbn<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>agent<span class="token punctuation">)</span>        content <span class="token operator">=</span> response<span class="token punctuation">.</span>text        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>        <span class="token comment"># 初始化一个最小值</span>        names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        address <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        price <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> tag <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'line'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                names<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                address<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                price<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'search_now_price'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'¥'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> names<span class="token punctuation">,</span>address<span class="token punctuation">,</span>price<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="view-py"><a href="#view-py" class="headerlink" title="view.py"></a>view.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> day72<span class="token punctuation">.</span>tools <span class="token keyword">import</span> Timer<span class="token punctuation">,</span> WeatherIterable<span class="token punctuation">,</span> Requester<span class="token keyword">import</span> datetime<span class="token keyword">class</span> <span class="token class-name">Menu</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>timer <span class="token operator">=</span> Timer<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>main_menu <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'管理员登陆'</span><span class="token punctuation">,</span>            <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'学生登录'</span><span class="token punctuation">,</span>            <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'教师登陆'</span><span class="token punctuation">,</span>            <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">'退出'</span>        <span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>admin_menu <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'增加学生'</span><span class="token punctuation">,</span>            <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'增加老师'</span><span class="token punctuation">,</span>            <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'修改密码'</span><span class="token punctuation">,</span>            <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">'退出'</span>        <span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>student_menu <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'显示个人信息'</span><span class="token punctuation">,</span>            <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'显示成绩'</span><span class="token punctuation">,</span>            <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'修改密码'</span><span class="token punctuation">,</span>            <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">'退出'</span><span class="token punctuation">,</span>            <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">'查找书籍'</span>        <span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>teacher_menu <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'录入成绩'</span><span class="token punctuation">,</span>            <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'查看学生成绩'</span><span class="token punctuation">,</span>            <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'修改密码'</span><span class="token punctuation">,</span>            <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">'退出'</span><span class="token punctuation">,</span>            <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">'查看天气'</span>        <span class="token punctuation">&#125;</span>    <span class="token comment"># 这里只是一个入口函数，调用main_menu显示一个简单的界面</span>    <span class="token keyword">def</span> <span class="token function">show_main_menu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Welcome!'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> um<span class="token punctuation">,</span> va <span class="token keyword">in</span> self<span class="token punctuation">.</span>main_menu<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'* %s ------- %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>um<span class="token punctuation">)</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> va<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">show_stu_menu</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stu<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">'Welcome'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> um<span class="token punctuation">,</span> va <span class="token keyword">in</span> self<span class="token punctuation">.</span>student_menu<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'* %s ------- %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>um<span class="token punctuation">)</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> va<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>is_birthday_dx<span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'今天是你的生日，生日快乐'</span><span class="token punctuation">)</span>        <span class="token comment"># 输出信息</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'姓名：%s，年龄：%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">int</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>birth_year<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 输出属相</span>        shuxiang <span class="token operator">=</span> self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>get_sx<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>birth_year<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>shuxiang<span class="token punctuation">)</span>        <span class="token comment"># 星座功能</span>        zodiac <span class="token operator">=</span> self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>get_zodiac_name<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>birth_month<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>birth_day<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>zodiac<span class="token punctuation">)</span>        yunshi <span class="token operator">=</span> self<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>get_yunshi<span class="token punctuation">(</span>zodiac<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>yunshi<span class="token punctuation">[</span><span class="token string">'yunshi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">show_tea_menu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> um<span class="token punctuation">,</span> va <span class="token keyword">in</span> self<span class="token punctuation">.</span>teacher_menu<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'* %s ------- %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>um<span class="token punctuation">)</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> va<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">show_admin_menu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> um<span class="token punctuation">,</span> va <span class="token keyword">in</span> self<span class="token punctuation">.</span>admin_menu<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'* %s ------- %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>um<span class="token punctuation">)</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> va<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 输入用户名</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">input_username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入用户名\n'</span><span class="token punctuation">)</span>    <span class="token comment"># 输入密码</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">input_password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入密码\n'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">input_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入姓名\n'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">input_score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入成绩\n'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">input_con</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入操作：\n'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">input_weather_continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'是否继续操作(y/n):\n'</span><span class="token punctuation">)</span>    <span class="token comment"># 输出成绩</span>    <span class="token keyword">def</span> <span class="token function">output_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> student_list<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> stu <span class="token keyword">in</span> student_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span>username<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'分数是%s'</span> <span class="token operator">%</span> stu<span class="token punctuation">.</span>score<span class="token punctuation">)</span>    <span class="token comment"># 输出学生信息</span>    <span class="token keyword">def</span> <span class="token function">output_stu_info</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> student_list<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> stu <span class="token keyword">in</span> student_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span>username<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你的姓名是%s，出生日期为%s，%s，%s，分数为%s，学号为%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>birth_year<span class="token punctuation">,</span>                                                             stu<span class="token punctuation">.</span>birth_month<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>birth_day<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>score<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>numb<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 教师通过姓名查询成绩</span>    <span class="token keyword">def</span> <span class="token function">output_stuinfo_bytea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> student_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'查询成绩，请输入需要查询谁的成绩'</span><span class="token punctuation">)</span>        name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入需要查询的学生姓名'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> stu <span class="token keyword">in</span> student_list<span class="token punctuation">:</span>            <span class="token keyword">if</span> stu<span class="token punctuation">.</span>name <span class="token operator">==</span> name<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s的成绩是%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">,</span> stu<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 退出界面</span>    <span class="token keyword">def</span> <span class="token function">show_end</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始退出'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'信息保存到列表中'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">show_ordered_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> score <span class="token keyword">in</span> score_list<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第%s名是 %s分 '</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 输入isbn号码</span>    <span class="token keyword">def</span> <span class="token function">input_isbn</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        isbn <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入需要查询的isbn'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> isbn    <span class="token comment"># 输出查询到的最佳书籍</span>    <span class="token keyword">def</span> <span class="token function">show_books</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        isbn <span class="token operator">=</span> self<span class="token punctuation">.</span>input_isbn<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> Requester<span class="token punctuation">(</span>isbn<span class="token punctuation">)</span>        <span class="token punctuation">(</span>names<span class="token punctuation">,</span> address<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        min_price <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>        indexer <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>price<span class="token punctuation">,</span> min_price<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最便宜的是%s元，书名：%s，地址：%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>min_price<span class="token punctuation">)</span><span class="token punctuation">,</span> names<span class="token punctuation">[</span>indexer<span class="token punctuation">]</span><span class="token punctuation">,</span> address<span class="token punctuation">[</span>indexer<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 定义显示天气模块</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">show_weather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> WeatherIterable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">,</span> <span class="token string">'合肥'</span><span class="token punctuation">,</span> <span class="token string">'马鞍山'</span><span class="token punctuation">,</span> <span class="token string">'南京'</span><span class="token punctuation">,</span> <span class="token string">'香港'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>business.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> day72<span class="token punctuation">.</span>view <span class="token keyword">import</span> Menu<span class="token keyword">from</span> day72<span class="token punctuation">.</span>tools <span class="token keyword">import</span> FileControler<span class="token punctuation">,</span>Requester<span class="token keyword">class</span> <span class="token class-name">MainConrole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>teacher <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>admin <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>menu_view <span class="token operator">=</span> Menu<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>filer <span class="token operator">=</span> FileControler<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>students <span class="token operator">=</span> self<span class="token punctuation">.</span>filer<span class="token punctuation">.</span>stu_read_out<span class="token punctuation">(</span>self<span class="token punctuation">.</span>students<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>teacher <span class="token operator">=</span> self<span class="token punctuation">.</span>filer<span class="token punctuation">.</span>tea_read_out<span class="token punctuation">(</span>self<span class="token punctuation">.</span>teacher<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>admin <span class="token operator">=</span> self<span class="token punctuation">.</span>filer<span class="token punctuation">.</span>admin_read_out<span class="token punctuation">(</span>self<span class="token punctuation">.</span>admin<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>menu_view<span class="token punctuation">.</span>show_main_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">ender</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>menu_view<span class="token punctuation">.</span>show_end<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 修改学生密码</span>    <span class="token keyword">def</span> <span class="token function">change_stu_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> tar_psw<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> stu <span class="token keyword">in</span> m<span class="token punctuation">.</span>students<span class="token punctuation">:</span>            <span class="token keyword">if</span> username <span class="token operator">==</span> stu<span class="token punctuation">.</span>username<span class="token punctuation">:</span>                stu<span class="token punctuation">.</span>password <span class="token operator">=</span> tar_psw                <span class="token comment"># 修改入文件</span>                self<span class="token punctuation">.</span>filer<span class="token punctuation">.</span>write_in_all<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token comment"># 修改教师密码</span>    <span class="token keyword">def</span> <span class="token function">change_tea_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> tar_psw<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> tea <span class="token keyword">in</span> m<span class="token punctuation">.</span>teacher<span class="token punctuation">:</span>            <span class="token keyword">if</span> username <span class="token operator">==</span> tea<span class="token punctuation">.</span>username<span class="token punctuation">:</span>                tea<span class="token punctuation">.</span>password <span class="token operator">=</span> tar_psw                <span class="token comment"># print('修改成功')</span>                <span class="token comment"># 修改入文件</span>                self<span class="token punctuation">.</span>filer<span class="token punctuation">.</span>write_in_all<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">change_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> stu <span class="token keyword">in</span> m<span class="token punctuation">.</span>students<span class="token punctuation">:</span>            <span class="token keyword">if</span> stu<span class="token punctuation">.</span>name <span class="token operator">==</span> name<span class="token punctuation">:</span>                stu<span class="token punctuation">.</span>score <span class="token operator">=</span> score                self<span class="token punctuation">.</span>filer<span class="token punctuation">.</span>write_in_all<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token comment">#成绩排序</span>    <span class="token keyword">def</span> <span class="token function">order_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        score_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> stu <span class="token keyword">in</span> m<span class="token punctuation">.</span>students<span class="token punctuation">:</span>            score_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>stu<span class="token punctuation">.</span>score<span class="token punctuation">)</span>        score_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        score_list<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>menu_view<span class="token punctuation">.</span>show_ordered_score<span class="token punctuation">(</span>score_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="school-py"><a href="#school-py" class="headerlink" title="school.py"></a>school.py</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> <span class="token string">''</span>    password <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>username <span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>password <span class="token operator">=</span> password    <span class="token comment"># #注册</span>    <span class="token comment"># def commit(self,username,password):</span>    <span class="token comment">#     con = day72.tools.FileControler()</span>    <span class="token comment">#     con.stu_write_in(username)</span>    <span class="token comment">#登陆，登陆功能获得缓存中的信息进行比对</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>userlist<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> info <span class="token keyword">in</span> userlist<span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token operator">==</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>username<span class="token punctuation">,</span>info<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登陆成功，欢迎您%s'</span> <span class="token operator">%</span> username<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">dx_geter</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">,</span>userlist<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> info <span class="token keyword">in</span> userlist<span class="token punctuation">:</span>            <span class="token keyword">if</span> username <span class="token operator">==</span> info<span class="token punctuation">.</span>username<span class="token punctuation">:</span>                <span class="token keyword">return</span> info<span class="token triple-quoted-string string">"""Student，有几个必须的参数@:param username 用户名@:param password 密码@:param name 真名其他的都是使用默认参数，可以通过其他函数进行修改"""</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> name<span class="token punctuation">,</span> birth_year<span class="token operator">=</span><span class="token number">1980</span><span class="token punctuation">,</span> birth_month<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> birth_day<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>numb<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>name <span class="token operator">=</span> name            self<span class="token punctuation">.</span>birth_year <span class="token operator">=</span> birth_year            self<span class="token punctuation">.</span>birth_month <span class="token operator">=</span> birth_month            self<span class="token punctuation">.</span>birth_day <span class="token operator">=</span> birth_day            self<span class="token punctuation">.</span>score <span class="token operator">=</span> score            self<span class="token punctuation">.</span>numb <span class="token operator">=</span> numb        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'input error'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你是%s同学，生日：%s年%s月%s日，得分为%s，学号为%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                                                self<span class="token punctuation">.</span>birth_year<span class="token punctuation">,</span>self<span class="token punctuation">.</span>birth_month<span class="token punctuation">,</span>self<span class="token punctuation">.</span>birth_day<span class="token punctuation">,</span>                                                 self<span class="token punctuation">.</span>score<span class="token punctuation">,</span>self<span class="token punctuation">.</span>numb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Teacher类，有几个必须的参数@:param username 用户名@:param password 密码@:param name 真名"""</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span>name<span class="token punctuation">,</span> salary <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> classer <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>salary <span class="token operator">=</span> salary            self<span class="token punctuation">.</span>classer <span class="token operator">=</span> classer            self <span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'input error'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你是%s教师，欢迎您，您是%s教师'</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>classer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你是%s管理员'</span><span class="token operator">%</span> self<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口："><a href="#接口：" class="headerlink" title="接口："></a>接口：</h2><h3 id="创建接口流程："><a href="#创建接口流程：" class="headerlink" title="创建接口流程："></a>创建接口流程：</h3><p>对于需要接受参数的，现在因为有spring boot这个框架，在本地或者服务器搭建起来就很简单。</p><p>本地创建maven项目</p><p>pom.xml导入配置，设置controler内逻辑代码</p><p>设置tomcat开放端口（默认8080）后就可以在本地尝试可不可以运行</p><p>在服务器端运行也很简单，需要在服务器安装tomcat</p><p>在ssh使用命令</p><pre class="line-numbers language-none"><code class="language-none">java -jar ***.jar &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可运行jar文件</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>20140107<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在java目录下创建</p><h4 id="controler-java"><a href="#controler-java" class="headerlink" title="controler.java"></a>controler.java</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>day0627<span class="token punctuation">.</span>controllers</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">JSONPObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>json<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMethod</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Controler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">,</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">JSONObject</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>day<span class="token operator">&lt;=</span><span class="token number">0d</span>ay<span class="token operator">></span><span class="token number">31</span>month<span class="token operator">&lt;=</span><span class="token number">0</span>month<span class="token operator">>=</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"month"</span><span class="token punctuation">,</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>            json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"day"</span><span class="token punctuation">,</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>            json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zodiac"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yunshi"</span><span class="token punctuation">,</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> json<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> starArr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"魔羯座"</span><span class="token punctuation">,</span><span class="token string">"水瓶座"</span><span class="token punctuation">,</span> <span class="token string">"双鱼座"</span><span class="token punctuation">,</span> <span class="token string">"牡羊座"</span><span class="token punctuation">,</span>                <span class="token string">"金牛座"</span><span class="token punctuation">,</span> <span class="token string">"双子座"</span><span class="token punctuation">,</span> <span class="token string">"巨蟹座"</span><span class="token punctuation">,</span> <span class="token string">"狮子座"</span><span class="token punctuation">,</span> <span class="token string">"处女座"</span><span class="token punctuation">,</span> <span class="token string">"天秤座"</span><span class="token punctuation">,</span> <span class="token string">"天蝎座"</span><span class="token punctuation">,</span> <span class="token string">"射手座"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ys <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">"今天你要面临的选择很难，直击你的内心，尽量要求别太高吧。你可能会发现有些小伙伴跟你交往的目的不纯。"</span><span class="token punctuation">,</span>                <span class="token string">"你内心很清楚，对于跟人的相处，你打心底是排斥的，所以别给自己找借口。今天你可能不太想出门，哪怕之前就约好了小伙伴或者同学。"</span><span class="token punctuation">,</span>                <span class="token string">"你们在今天就是想要挑衅别人的战斗欲，最好在搞事情之前考量一下自己的实际能力。学生们今天可能做什么都要跟人比一比。"</span><span class="token punctuation">,</span>                <span class="token string">"相信今天你的好运气，而且会有长辈会一直帮助你的！所以今天要加油啊！做好自己该做的事情，若是有什么不能肯定的，就求助于家长吧!"</span><span class="token punctuation">,</span>                <span class="token string">"越难越能够提升你们坚持下去的动力，今天你有那么点战无不胜的精神。学生们今天不要过于担心，你会攻克难关获取胜利的。"</span><span class="token punctuation">,</span>                <span class="token string">"今天难免随大流，但建议保持你们的个人特色，记得别精分就行了。多听听小伙伴的话吧，对你有益处的。"</span><span class="token punctuation">,</span>                <span class="token string">"平静的生活可能有点难，还不如鼓足勇气把该做的事情都做了。如果少了点安全感没关系，要相信你比你自己想的更优秀。"</span><span class="token punctuation">,</span>                <span class="token string">"别养成一些坏习惯了，不过如果遇到阻碍，用一些创新的方法也不是太大的问题。尽量让自己靠谱一点吧，别丢三落四。"</span><span class="token punctuation">,</span>                <span class="token string">"太容易被周围的人所影响了，你的想法也容易走偏，今天要保持清醒。今天要记得，别跟别人比，你只要做好你自己就可以了。"</span><span class="token punctuation">,</span>                <span class="token string">"今天的无力感可能会比较强，哪怕你忙的没有办法分身，但是这个过程多半不太美好，今天你需要乐观一点。当遇到什么打动你内心的事，还是要注意一下自己是否有能力去做这件事情。"</span><span class="token punctuation">,</span>                <span class="token string">"今天你们想事情可能有些偏颇，你其实并没有明确的目标，别想得太美好了。学生们有点缺乏耐心，让你做事有点草率不会去考虑后果。"</span><span class="token punctuation">,</span>                <span class="token string">"今天的你很懂得把握机会，所以今天其实是一个很适合你为自己努力的日子，加油干吧。很多事情你都可以搞定，所以不管在学习上遇到什么问题都别怕，别自己吓自己。"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">DayArr</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 两个星座分割日</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> month<span class="token punctuation">;</span>        <span class="token comment">// 所查询日期在分割日之前，索引-1，否则不变</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">&lt;</span> <span class="token class-name">DayArr</span><span class="token punctuation">[</span>month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 返回索引指向的星座string</span>        <span class="token class-name">String</span> zodiac <span class="token operator">=</span> starArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> ystoday <span class="token operator">=</span> ys<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"month"</span><span class="token punctuation">,</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>        json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"day"</span><span class="token punctuation">,</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>        json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zodic"</span><span class="token punctuation">,</span>zodiac<span class="token punctuation">)</span><span class="token punctuation">;</span>        json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yunshi"</span><span class="token punctuation">,</span>ystoday<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> json<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"getys"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getys</span><span class="token punctuation">(</span><span class="token class-name">String</span> zodiac<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JSONObject</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ys <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">"今天你要面临的选择很难，直击你的内心，尽量要求别太高吧。你可能会发现有些小伙伴跟你交往的目的不纯。"</span><span class="token punctuation">,</span>                <span class="token string">"你内心很清楚，对于跟人的相处，你打心底是排斥的，所以别给自己找借口。今天你可能不太想出门，哪怕之前就约好了小伙伴或者同学。"</span><span class="token punctuation">,</span>                <span class="token string">"你们在今天就是想要挑衅别人的战斗欲，最好在搞事情之前考量一下自己的实际能力。学生们今天可能做什么都要跟人比一比。"</span><span class="token punctuation">,</span>                <span class="token string">"相信今天你的好运气，而且会有长辈会一直帮助你的！所以今天要加油啊！做好自己该做的事情，若是有什么不能肯定的，就求助于家长吧!"</span><span class="token punctuation">,</span>                <span class="token string">"越难越能够提升你们坚持下去的动力，今天你有那么点战无不胜的精神。学生们今天不要过于担心，你会攻克难关获取胜利的。"</span><span class="token punctuation">,</span>                <span class="token string">"今天难免随大流，但建议保持你们的个人特色，记得别精分就行了。多听听小伙伴的话吧，对你有益处的。"</span><span class="token punctuation">,</span>                <span class="token string">"平静的生活可能有点难，还不如鼓足勇气把该做的事情都做了。如果少了点安全感没关系，要相信你比你自己想的更优秀。"</span><span class="token punctuation">,</span>                <span class="token string">"别养成一些坏习惯了，不过如果遇到阻碍，用一些创新的方法也不是太大的问题。尽量让自己靠谱一点吧，别丢三落四。"</span><span class="token punctuation">,</span>                <span class="token string">"太容易被周围的人所影响了，你的想法也容易走偏，今天要保持清醒。今天要记得，别跟别人比，你只要做好你自己就可以了。"</span><span class="token punctuation">,</span>                <span class="token string">"今天的无力感可能会比较强，哪怕你忙的没有办法分身，但是这个过程多半不太美好，今天你需要乐观一点。当遇到什么打动你内心的事，还是要注意一下自己是否有能力去做这件事情。"</span><span class="token punctuation">,</span>                <span class="token string">"今天你们想事情可能有些偏颇，你其实并没有明确的目标，别想得太美好了。学生们有点缺乏耐心，让你做事有点草率不会去考虑后果。"</span><span class="token punctuation">,</span>                <span class="token string">"今天的你很懂得把握机会，所以今天其实是一个很适合你为自己努力的日子，加油干吧。很多事情你都可以搞定，所以不管在学习上遇到什么问题都别怕，别自己吓自己。"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//        "魔羯座","水瓶座", "双鱼座", "牡羊座",</span><span class="token comment">//       "金牛座", "双子座", "巨蟹座", "狮子座", "处女座", "天秤座", "天蝎座", "射手座" &#125;;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>zodiac<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"摩羯座"</span><span class="token operator">:</span>                json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yunshi"</span><span class="token punctuation">,</span>ys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"水瓶座"</span><span class="token operator">:</span>                json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yunshi"</span><span class="token punctuation">,</span>ys<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"双鱼座"</span><span class="token operator">:</span>                json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yunshi"</span><span class="token punctuation">,</span>ys<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"白羊座"</span><span class="token operator">:</span>                json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yunshi"</span><span class="token punctuation">,</span>ys<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"金牛座"</span><span class="token operator">:</span>                json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yunshi"</span><span class="token punctuation">,</span>ys<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"双子座"</span><span class="token operator">:</span>                json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yunshi"</span><span class="token punctuation">,</span>ys<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"巨蟹座"</span><span class="token operator">:</span>                json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yunshi"</span><span class="token punctuation">,</span>ys<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"狮子座"</span><span class="token operator">:</span>                json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yunshi"</span><span class="token punctuation">,</span>ys<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"处女座"</span><span class="token operator">:</span>                json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yunshi"</span><span class="token punctuation">,</span>ys<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"天秤座"</span><span class="token operator">:</span>                json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yunshi"</span><span class="token punctuation">,</span>ys<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"天蝎座"</span><span class="token operator">:</span>                json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yunshi"</span><span class="token punctuation">,</span>ys<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"射手座"</span><span class="token operator">:</span>                json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yunshi"</span><span class="token punctuation">,</span>ys<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> json<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab创建矩阵、矩阵操作</title>
      <link href="/2020/07/11/matlab-chuang-jian-ju-zhen-ju-zhen-cao-zuo/"/>
      <url>/2020/07/11/matlab-chuang-jian-ju-zhen-ju-zhen-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="Matlab矩阵"><a href="#Matlab矩阵" class="headerlink" title="Matlab矩阵"></a>Matlab矩阵</h1><h2 id="一、建立新矩阵"><a href="#一、建立新矩阵" class="headerlink" title="一、建立新矩阵"></a>一、建立新矩阵</h2><h3 id="创建矩阵指令"><a href="#创建矩阵指令" class="headerlink" title="创建矩阵指令"></a>创建矩阵指令</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">ones</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>建立一个n×n的<span class="token number">1</span>矩阵<span class="token punctuation">.</span><span class="token function">ones</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>…<span class="token punctuation">,</span>p<span class="token punctuation">)</span>   建立一个m×n×…×p的<span class="token number">1</span>矩阵<span class="token punctuation">.</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>   建立一个和矩阵A同样大小的<span class="token number">1</span>矩阵<span class="token function">zeros</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>建立一个n×n的<span class="token number">0</span>矩阵<span class="token punctuation">.</span><span class="token function">zeros</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span>   建立一个m×n…×p的<span class="token number">0</span>矩阵<span class="token punctuation">.</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>  建立一个和矩阵A同样大小的<span class="token number">0</span>矩阵<span class="token punctuation">.</span><span class="token function">eye</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  建立一个n×n的单位矩阵<span class="token punctuation">.</span>注意ye命令只能用来建立二维矩阵<span class="token punctuation">.</span><span class="token function">eye</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>   建立一个m×n的单位矩阵<span class="token punctuation">.</span>注意eye命令只能用来建立二维矩阵<span class="token punctuation">.</span><span class="token function">eye</span><span class="token punctuation">(</span><span class="token function">size</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>   建立一个和矩阵A同样大小的单位矩阵<span class="token function">diag</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>     生成一个由矩阵A主对角线元素组成的列向量<span class="token punctuation">.</span>主对角线总是从矩阵左上角开始<span class="token punctuation">.</span>对于方阵来说它结束于矩阵的右下角<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="随机数指令"><a href="#随机数指令" class="headerlink" title="随机数指令"></a>随机数指令</h3><p>随机数和随机矩阵</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">rand        产生在<span class="token number">0</span><span class="token operator">~</span><span class="token number">1</span>之间均匀分布的随机数<span class="token punctuation">;</span>每调用一次给一个新的数值<span class="token punctuation">.</span>rand<span class="token operator">+</span> <span class="token number">i</span>     rand产生一个复数随机数   <span class="token function">rand</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span>    产生一个n×n的矩阵<span class="token punctuation">,</span>其元素为<span class="token number">0</span><span class="token operator">~</span><span class="token number">1</span>之间均匀分布的随机数<span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>…<span class="token punctuation">,</span>p<span class="token punctuation">)</span>   产生一个m×n×…×p的矩阵<span class="token punctuation">,</span>其元素为<span class="token number">0</span><span class="token operator">~</span><span class="token number">1</span>之间均匀分布的随机数rand        产生零均值、单位方差的正态分布随机数<span class="token function">randn</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span>   产生一个×n的矩阵<span class="token punctuation">,</span>其元素为零均值、单位方差的正态分布随机数<span class="token function">randn</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>·…<span class="token punctuation">,</span>p<span class="token punctuation">)</span>     产生一个m×n×…×p的矩阵<span class="token punctuation">,</span>其元素为零均值、单位方差的正态分布随机数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随机数种子</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">rand</span><span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">)</span>     返回一个有<span class="token number">35</span>个元素的向量<span class="token punctuation">,</span>其中包含随机状态发生器的当前状态<span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span>       设置随机种子发生器的状态为s<span class="token function">rand</span><span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>   设置随机种子发生器为它的原始状态<span class="token function">rand</span><span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span>       设置随机种子发生器为它的第种状态<span class="token punctuation">,</span><span class="token number">j</span>为整数<span class="token function">rand</span><span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>clock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     使用 clock命令<span class="token punctuation">(</span>见命令集<span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>使得随机种子发生器在每个不同时刻都设置为一种不同的状态<span class="token function">rand</span><span class="token punctuation">(</span><span class="token string">'seed'</span><span class="token punctuation">,</span>arg<span class="token punctuation">)</span>      使用 MATLAB4中的随机种子发生器<span class="token punctuation">,</span>见帮助可以得到更多的信息<span class="token function">randn</span><span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">)</span>        返回一个有两个元素的向量<span class="token punctuation">,</span>其中包含正态随机种子发生器的状态<span class="token function">randn</span><span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">,</span>arg<span class="token punctuation">)</span>    根据arg设置正态随机种子发生器<span class="token punctuation">,</span>见rand<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、矩阵变换"><a href="#二、矩阵变换" class="headerlink" title="二、矩阵变换"></a>二、矩阵变换</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">reshape</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    生成一个m×n×…×p维的矩阵<span class="token punctuation">,</span>它的元素以线性索引的顺序<span class="token punctuation">(</span>见图<span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>从矩阵A中取来<span class="token punctuation">.</span>如果矩阵A中没有m×n×p个元素<span class="token punctuation">,</span>将返回一个错误信息<span class="token function">repmat</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token punctuation">[</span>m n<span class="token punctuation">...</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> 创建一个和矩阵A有相同元素的m×n×…×p块的多维矩阵p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">repmat</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">[</span>m n<span class="token punctuation">...</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> 创建一个m×n×…×p的多维矩阵<span class="token punctuation">,</span>所有元素的值都为标量使用该命令要比用命令x<span class="token operator">*</span><span class="token function">Ones</span><span class="token punctuation">(</span><span class="token punctuation">[</span>mn…<span class="token punctuation">]</span><span class="token punctuation">)</span>来创建同一个大矩阵的速度要快<span class="token function">cat</span><span class="token punctuation">(</span>dim<span class="token punctuation">,</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span>    将矩阵A和B组合成一个dim维的多维矩阵<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、创建空矩阵"><a href="#三、创建空矩阵" class="headerlink" title="三、创建空矩阵"></a>三、创建空矩阵</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、生成向量和子矩阵"><a href="#四、生成向量和子矩阵" class="headerlink" title="四、生成向量和子矩阵"></a>四、生成向量和子矩阵</h2><h3 id="通过矩阵创建向量"><a href="#通过矩阵创建向量" class="headerlink" title="通过矩阵创建向量"></a>通过矩阵创建向量</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token number">i</span> <span class="token operator">:</span> k   创建从<span class="token number">i</span>开始、步长为<span class="token number">1</span>、到k结束的数字序列，即 <span class="token number">i</span> <span class="token punctuation">,</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">i</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">,</span> k。如果<span class="token number">i</span><span class="token operator">></span>k，M AT L A B则返回一个空矩阵，也就是 <span class="token punctuation">[</span><span class="token punctuation">]</span>。数字<span class="token number">i</span>和k不必是整数，该序列的最后一个数是小于或等于 k。<span class="token number">i</span> <span class="token operator">:</span> <span class="token number">j</span> <span class="token operator">:</span> k   创建从<span class="token number">i</span>开始、步长为<span class="token number">1</span>、到k结束的数字序列，即 <span class="token number">i</span><span class="token punctuation">,</span> <span class="token number">i</span><span class="token operator">+</span><span class="token number">j</span><span class="token punctuation">,</span> <span class="token number">i</span><span class="token operator">+</span> <span class="token number">2j</span><span class="token punctuation">,</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">,</span> k。对于<span class="token number">j</span><span class="token operator">=</span> <span class="token number">0</span>，则返回一个空矩阵。数字 <span class="token number">i</span>、<span class="token number">j</span>和k不必是整数，该序列的最后一个数是小于或等于k。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="直接创建向量"><a href="#直接创建向量" class="headerlink" title="直接创建向量"></a>直接创建向量</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">linspace</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>   在区间<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b上创建一个有<span class="token number">100</span>个元素的向量<span class="token punctuation">,</span>这<span class="token number">100</span>个数把整个区间线性分隔<span class="token punctuation">.</span><span class="token function">linspace</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>n<span class="token punctuation">)</span> 在区间<span class="token punctuation">[</span>a<span class="token punctuation">,</span>b上创建一个有n个元素的向量<span class="token punctuation">.</span>这个命令和冒号表示形式相近<span class="token punctuation">,</span>但是它直接定义了数据的个数<span class="token punctuation">.</span>还有logspace，通过多数创建等间隔向量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="创建子矩阵"><a href="#创建子矩阵" class="headerlink" title="创建子矩阵"></a>创建子矩阵</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">方法同上<span class="token function">A</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span>  返回二维矩阵A中第<span class="token number">j</span>列列向量<span class="token punctuation">.</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span>  返回二维矩阵A中第<span class="token number">i</span>行行向量<span class="token punctuation">.</span>以及步长方法创建<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、特殊矩阵"><a href="#五、特殊矩阵" class="headerlink" title="五、特殊矩阵"></a>五、特殊矩阵</h2><p>希尔伯特矩阵</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">hilb</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>     生成一个n×n的希尔伯特矩阵<span class="token punctuation">.</span><span class="token function">invhilb</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  生成一个n×n的希尔伯特矩阵的逆矩阵<span class="token punctuation">,</span>其元素都为整数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Matlab矩阵操作"><a href="#Matlab矩阵操作" class="headerlink" title="Matlab矩阵操作"></a>Matlab矩阵操作</h1><h2 id="一、转置与共轭"><a href="#一、转置与共轭" class="headerlink" title="一、转置与共轭"></a>一、转置与共轭</h2><pre class="line-numbers language-matlba" data-language="matlba"><code class="language-matlba">&#39;  输出转置矩阵.&#39; 仅转置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、运算"><a href="#二、运算" class="headerlink" title="二、运算"></a>二、运算</h2><p>加法</p><p>乘法</p><p>除法</p><p>乘方</p><h2 id="三、关系运算符"><a href="#三、关系运算符" class="headerlink" title="三、关系运算符"></a>三、关系运算符</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">&lt;</span> 小于<span class="token operator">&lt;</span> <span class="token operator">=</span> 小于等于<span class="token operator">></span> 大于<span class="token operator">></span> <span class="token operator">=</span> 大于等于<span class="token operator">=</span> <span class="token operator">=</span> 等于<span class="token operator">~</span> <span class="token operator">=</span> 不等于<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、逻辑运算符"><a href="#四、逻辑运算符" class="headerlink" title="四、逻辑运算符"></a>四、逻辑运算符</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">&amp;</span> 与  或 <span class="token operator">~</span> 非xor 异或<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、逻辑函数"><a href="#五、逻辑函数" class="headerlink" title="五、逻辑函数"></a>五、逻辑函数</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 返回一个x中包含非零元素的下标的向量<span class="token punctuation">.</span>如果所有的元素都是零<span class="token punctuation">,</span>那么返回一个空矩阵<span class="token punctuation">,</span>即<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> 返回一个长的列向量<span class="token punctuation">,</span>表示A中包含非零元素的下标向量下述命令更可取<span class="token punctuation">[</span>u<span class="token punctuation">,</span>v<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>   返回向量u和v<span class="token punctuation">,</span>它们包含A中的非零元素的下标<span class="token punctuation">,</span>即A中元素<span class="token punctuation">(</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span>为非零<span class="token punctuation">[</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> 返回包含A中非零元素的下标向量u和v以及一个包含对应非零元素的向量<span class="token punctuation">.</span>A中元素<span class="token punctuation">(</span><span class="token number">2</span>w<span class="token punctuation">)</span>为非零并且能在b中找到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同路径II(动态规划)——每日一题0706</title>
      <link href="/2020/07/06/bu-tong-lu-jing-ii-dong-tai-gui-hua-mei-ri-yi-ti-0706/"/>
      <url>/2020/07/06/bu-tong-lu-jing-ii-dong-tai-gui-hua-mei-ri-yi-ti-0706/</url>
      
        <content type="html"><![CDATA[<h1 id="不同路径II"><a href="#不同路径II" class="headerlink" title="不同路径II"></a>不同路径II</h1><p>以前对动态规划没有了解，现在看看这题</p><p><img src="http://lanyun1103.top/wp-content/uploads/2020/07/7FLIOO4STH0EFEE.png"></p><p>第一反应想到的是dfs，但是粗略看了一下题解，dfs很可能超时，因为会做很多没必要的回退。</p><h2 id="动态规划思路"><a href="#动态规划思路" class="headerlink" title="动态规划思路"></a>动态规划思路</h2><p>动态规划的思路：通过计算前一次的结果和改变的量（也可以是之前计算出的量），计算出本次的量，原理很简单。</p><h2 id="本体思路"><a href="#本体思路" class="headerlink" title="本体思路"></a>本体思路</h2><p>通过二维数组dp，储存到达(i,j)位置的路径数量。 那么通过题目知道，到达(i,j)的只有可能是两个点(i-1,j),(i,j-1)。 也就可以知道：到达(i,j)点的路径数量，是到(i-1,j)和(i,j-1)这两个点的路径数量之和。 可以得到以下方程</p><p><img src="http://lanyun1103.top/wp-content/uploads/2020/07/57CVXCHRP3JYUFAP2VJ.png"></p><p>其次，本题包含障碍物信息，那么在动态规划的过程中需要对下一个点的状态进行判断 0代表可以通行，1代表有障碍物</p><p>对第一行和第一列进行初始化为1，很显然，这是因为到达第一行和第一列的方法只有顺着边走</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePathsWithObstacles</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> obstacleGrid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> obstacleGrid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//0代表可以通行，1代表有障碍物</span>        <span class="token comment">//初始化dp二维数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//对内部进行规划，一层一层遍历</span>        <span class="token comment">//这里使用状态转移方程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯法_生成括号问题（Java）</title>
      <link href="/2020/07/02/hui-su-fa-sheng-cheng-gua-hao-wen-ti-java/"/>
      <url>/2020/07/02/hui-su-fa-sheng-cheng-gua-hao-wen-ti-java/</url>
      
        <content type="html"><![CDATA[<h1 id="回溯法（Java）"><a href="#回溯法（Java）" class="headerlink" title="回溯法（Java）"></a>回溯法（Java）</h1><p>写了一题比较简单的回溯题目，当然第一眼看到题目里面建议使用回溯算法是比较懵的。那么接下来讲一下回溯法的原理，并说明怎么做。</p><p><img src="http://lanyun1103.top/wp-content/uploads/2020/07/DYM7KC879NWG4BU6DFM.png"></p><hr><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p><strong>_回溯法_（探索与_回溯法_）是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为_回溯法_，</strong></p><h2 id="算法用处"><a href="#算法用处" class="headerlink" title="算法用处"></a>算法用处</h2><p>回溯法基本有几个用处</p><ol><li> 有没有解</li><li> 求所有解</li><li> 求最优解</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>那么回溯法其实用代码实现的话，基本都可以使用图或者数的结构来表示。</p><p>学过二叉树的都知道树的结构，从本题来说，有两个分支，当然可以写成一个二叉树。</p><p>回溯算法的代码内部实现步骤是：在一次一次的判断（满足题目条件）中，通过创建子树（满足条件的，符合题目要求的）来得到所有的可能。</p><h2 id="本题思路"><a href="#本题思路" class="headerlink" title="本题思路"></a>本题思路</h2><p><img src="https://pic.leetcode-cn.com/a9944722e9307ade27ab98e36e3f29e4f5acd242007ae46c50e01ead122b9d45-image.png"></p><p>借用<a href="https://leetcode-cn.com/problems/generate-parentheses/solution/ru-men-ji-bie-de-hui-su-fa-xue-hui-tao-lu-miao-don/">大佬的图片</a></p><p>从这个二叉树可以看出来回溯的条件：</p><ul><li>  左括号＞右括号（反过来说，右括号剩余的大于左括号）</li><li>  左括号和右括号剩余 &gt; 0</li></ul><p>那么知道这些条件以后就可以写出来一个回溯算法的关键条件</p><ul><li>  右括号剩余的 &gt; 左括号剩余的，可以添加右括号（继续创建右子树继续判断）</li><li>  左括号 &gt; 0，可以继续添加左括号（继续创建左子树继续判断）</li><li>  左括号右括号同时等于0时停止</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token class-name">String</span> curStr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 左右括号都不剩余了，递归终止</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果左括号还剩余的话，可以拼接左括号</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> curStr <span class="token operator">+</span> <span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">></span> left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果右括号剩余多于左括号剩余的话，可以拼接右括号</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> curStr <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL_安全、维护</title>
      <link href="/2020/06/30/mysql-an-quan-wei-hu/"/>
      <url>/2020/06/30/mysql-an-quan-wei-hu/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="一、安全设置（管理员、用户）："><a href="#一、安全设置（管理员、用户）：" class="headerlink" title="一、安全设置（管理员、用户）："></a>一、安全设置（管理员、用户）：</h2><h3 id="1-查看当前所有用户："><a href="#1-查看当前所有用户：" class="headerlink" title="1.查看当前所有用户："></a>1.查看当前所有用户：</h3><p>mysql所有用户的信息储存在mysql库中的user表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">use mysql;select user from user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-创建一个用户"><a href="#2-创建一个用户" class="headerlink" title="2.创建一个用户"></a>2.创建一个用户</h3><p>可以创建一个带密码的，也可以不带密码</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create user lanyun identified by &#39;password&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-删除用户"><a href="#3-删除用户" class="headerlink" title="3.删除用户"></a>3.删除用户</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop user lanyun;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-设置权限"><a href="#4-设置权限" class="headerlink" title="4.设置权限"></a>4.设置权限</h3><p>需要在grants后面的参数</p><ul><li>  授予的权限</li><li>  被授予访问权限的数据库或表</li><li>  用户名</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查看用户权限show grants for lanyun;#有一个权限USAGE ON *.*。USAGE表 示根本没有权限#如何增加权限：grant select on test.* to lanyun;#修改过后查看用户权限，会发现多了一行↓#GRANT SELECT ON &#96;test&#96;.* TO &#96;lanyun&#96;@&#96;%&#96;#如何撤销权限revoke select on test.* from lanyun;#此时再查看会发现添加过的权限消失了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-修改密码"><a href="#5-修改密码" class="headerlink" title="5.修改密码"></a>5.修改密码</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#前面的set password是更新口令，后面的password是加密函数set password for lanyun &#x3D; password(&#39;new password&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、数据库维护"><a href="#二、数据库维护" class="headerlink" title="二、数据库维护"></a>二、数据库维护</h2><h3 id="1-备份"><a href="#1-备份" class="headerlink" title="1.备份"></a>1.备份</h3><ul><li>  使用命令行实用程序mysqldump转储所有数据库内容到某个外部文件。在进行常规备份前这个实用程序应该正常运行，以便能正确地备份转储文件。</li><li>  可用命令行实用程序mysqlhotcopy从一个数据库复制所有数据（并非所有数据库引擎都支持这个实用程序）。</li><li>  可以使用MySQL的BACKUP TABLE或SELECT INTO OUTFILE转储所有数据到某个外部文件。这两条语句都接受将要创建的系统文件名，此系统文件必须不存在，否则会出错。数据可以用RESTORETABLE来复原。</li></ul><h3 id="2-数据维护"><a href="#2-数据维护" class="headerlink" title="2.数据维护"></a>2.数据维护</h3><p>对表进行检查</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">analyze table stu;check table stu;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Table</p><p>Op</p><p>Msg_Type</p><p>Msg_text</p><p>test.stu</p><p>analyze</p><p>status</p><p>OK</p><h3 id="3-诊断启动"><a href="#3-诊断启动" class="headerlink" title="3.诊断启动"></a>3.诊断启动</h3><p>在排除系统启动问题时，首先应该尽量用手动启动服务器。</p><p>MySQL服务器自身通过在命令行上执行mysqld启动。下面是几个重要的mysqld命令行选项</p><ul><li>  --help显示帮助——一个选项列表；</li><li>  --safe-mode装载减去某些最佳配置的服务器；</li><li>  --verbose显示全文本消息（为获得更详细的帮助消息与–help联合使用）；</li><li>  --version显示版本信息然后退出。</li></ul><h3 id="4-查看日志"><a href="#4-查看日志" class="headerlink" title="4.查看日志"></a>4.查看日志</h3><ul><li>  错误日志。它包含启动和关闭问题以及任意关键错误的细节。此日志通常名为hostname.err，位于data目录中。此日志名可用–log-error命令行选项更改。</li><li>  查询日志。它记录所有MySQL活动，在诊断问题时非常有用。此日志文件可能会很快地变得非常大，因此不应该长期使用它。此日志通常名为hostname.log，位于data目录中。此名字可以用–log命令行选项更改</li><li>  二进制日志。它记录更新过数据（或者可能更新过数据）的所语句。此日志通常名为hostname-bin，位于data目录内。此名字可以用–log-bin命令行选项更改。注意，这个日志文件是MySQL 5中添加的，以前的MySQL版本中使用的是更新日志</li><li>  缓慢查询日志。顾名思义，此日志记录执行缓慢的任何查询。这个日志在确定数据库何处需要优化很有用。此日志通常名为hostname-slow.log ，位于 data 目录中。此名字可以用–log-slow-queries命令行选项更改。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL_事务处理</title>
      <link href="/2020/06/29/mysql-shi-wu-chu-li/"/>
      <url>/2020/06/29/mysql-shi-wu-chu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-事务处理"><a href="#MySQL-事务处理" class="headerlink" title="MySQL_事务处理"></a>MySQL_事务处理</h1><h2 id="为何使用："><a href="#为何使用：" class="headerlink" title="为何使用："></a>为何使用：</h2><p>事务处理（transaction processing）可以用来维护数据库的完整性，它保证成批的MySQL操作要么完全执行，要么完全不执行</p><p>如果一段mysql语句在执行过程中出错，那么事务处理语句可以很好的回退之前造成的影响。</p><h2 id="一、强制回退："><a href="#一、强制回退：" class="headerlink" title="一、强制回退："></a>一、强制回退：</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#开始语句START TRANSACTIONDELETE FROM ...;SELECT * FROM ...;#退回语句ROLLBACK;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实是很好理解的哦，从开始语句开始就属于mysql事务，这个事务可以回滚到事务开始之前。如果想查看这个用法的具体行为，可以使用</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM ...;#开始语句START TRANSACTIONDELETE FROM ...;SELECT * FROM ...;#退回语句ROLLBACK;SELECT * FROM ...;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，删除之前的表不是空表，删除后是空的，回退过后，表又是有数据的了。</p><p><strong>ROLLBACK只能在一个事务处理内使用（在执行一条START TRANSACTION命令之后）</strong></p><h2 id="二、主动提交："><a href="#二、主动提交：" class="headerlink" title="二、主动提交："></a>二、主动提交：</h2><p>事务处理块中，提交不会隐含地进行。为进行明确的提交，使用COMMIT语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">START TRANSACTIONDELETE FROM ...;DELETE FORM ...;COMMIT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果其中的一个语句发生错误，那么不会执行下面的COMMIT命令。</p><h2 id="三、保留点——限制回退范围："><a href="#三、保留点——限制回退范围：" class="headerlink" title="三、保留点——限制回退范围："></a>三、保留点——限制回退范围：</h2><p>对于简单的mysql语句可以使用以上比较简单的回退、提交，但是对于比较复杂的mysql语句，则需要使用保留点，来进行部分回退。</p><p>例如，如果发生错误，只需要返回到某行命令之前即可，不需要回退到更前面的命令（如果存在的话）。</p><p>这些占位符称为保留点。为了创建占位符，可如下使用SAVEPOINT语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SAVEPOINT delete1;ROLLBACK TO delete1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么可以回到delete1的保存结点处</p><p>一般来说保留点越多越好，可以精确地回到某一个位置</p><h3 id="设置提交："><a href="#设置提交：" class="headerlink" title="设置提交："></a>设置提交：</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET autocommit &#x3D; 0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>取消自动提交</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何加速IDEA的MAVEN包依赖下载速度</title>
      <link href="/2020/06/29/ru-he-jia-su-idea-de-maven-bao-yi-lai-xia-zai-su-du/"/>
      <url>/2020/06/29/ru-he-jia-su-idea-de-maven-bao-yi-lai-xia-zai-su-du/</url>
      
        <content type="html"><![CDATA[<h1 id="如何加速IDEA的MAVEN包依赖下载速度"><a href="#如何加速IDEA的MAVEN包依赖下载速度" class="headerlink" title="如何加速IDEA的MAVEN包依赖下载速度"></a>如何加速IDEA的MAVEN包依赖下载速度</h1><h2 id="方式："><a href="#方式：" class="headerlink" title="方式："></a>方式：</h2><p>从项目中打开Maven的配置文件</p><p><img src="http://lanyun1103.top/wp-content/uploads/2020/06/GK7WMJ4@0I25O@XFPV.png"></p><p>在其中的</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>标签之间插入以下镜像</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>uk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Human Readable Name for this Mirror.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://uk.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>CN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>OSChina Central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.oschina.net/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>internal nexus repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo.maven.apache.org/maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改过后下载速度肯定飞起，大部分下载应该已经变成了从阿里镜像站下载。</p><h2 id="需要注意的："><a href="#需要注意的：" class="headerlink" title="需要注意的："></a>需要注意的：</h2><p>最好不要在idea导入、下载包的时候修改代理。不知道会造成什么资源上的问题</p>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_Swing_两种鼠标监听器</title>
      <link href="/2020/06/28/java-swing-liang-chong-shu-biao-jian-ting-qi/"/>
      <url>/2020/06/28/java-swing-liang-chong-shu-biao-jian-ting-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="鼠标监听器"><a href="#鼠标监听器" class="headerlink" title="鼠标监听器"></a>鼠标监听器</h1><p>今天看到讲课的大佬说的话 Java Swing（GUI）当然已经不是时代的热门了，现在热门是互联网。 但是学习Java Swing的目的是为了对程序的设计框架有一定了解。（大佬就是大佬，轻易地解答了我的疑惑）</p><p>所以这里对监听器的叙述不做过多讲解，只要知道这两个怎么用就可以了</p><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>给JButton添加监听器对象，这里使用匿名对象的方式添加。</p><p>这个匿名对象实现接口 or 抽象类的方法。</p><p>需要注意的点是当事件源上发生某一个动作时，它会调用事件监听器的一个方法，并在调用该方法时把事件参数对象传递进去。</p><h2 id="两种方法："><a href="#两种方法：" class="headerlink" title="两种方法："></a>两种方法：</h2><ol><li> MouseListener（接口）</li><li> MouseAdapter（抽象类）</li></ol><h2 id="一、MouseListener（接口）"><a href="#一、MouseListener（接口）" class="headerlink" title="一、MouseListener（接口）"></a>一、MouseListener（接口）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MyFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Container</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JButton</span> jButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"click here"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jButton<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getClickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseReleased</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseExited</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出来使用MouseListener创建一个监听器还是比较麻烦的，因为需要实现这个接口的所有方法，但是这也是兼容性好的一个体现</p><h2 id="二、MouseAdapter（抽象类）"><a href="#二、MouseAdapter（抽象类）" class="headerlink" title="二、MouseAdapter（抽象类）"></a>二、MouseAdapter（抽象类）</h2><p>使用MouseAdapter就比较简单，只用实现自己需要的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">jButton<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getClickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两种方法——加速对Github访问</title>
      <link href="/2020/06/26/liang-chong-fang-fa-jia-su-dui-github-fang-wen/"/>
      <url>/2020/06/26/liang-chong-fang-fa-jia-su-dui-github-fang-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="如何加速对Github的访问"><a href="#如何加速对Github的访问" class="headerlink" title="如何加速对Github的访问"></a>如何加速对Github的访问</h1><p>这个问题在晚上已经很多了</p><p>总结下来也就两种：</p><ul><li>  修改hosts</li><li>  修改dns</li></ul><h2 id="一、修改hosts"><a href="#一、修改hosts" class="headerlink" title="一、修改hosts"></a>一、修改hosts</h2><p>点击下面域名可以快速查看三个网址的 ip 地址</p><ol><li> <a href="https://github.com.ipaddress.com/">github.com</a></li><li> <a href="https://github.com.ipaddress.com/assets-cdn.github.com">assets-cdn.github.com</a></li><li> <a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net">github.global.ssl.fastly.net</a></li></ol><p>将查询的ip地址<img src="http://lanyun1103.top/wp-content/uploads/2020/06/5W68MS7VLN8PVSEQ1B0.png"></p><p>添加到电脑的hosts文件中</p><pre class="line-numbers language-none"><code class="language-none">#140.82.114.4   github.com#185.199.108.153   assets-cdn.github.com#185.199.109.153   assets-cdn.github.com#185.199.110.153   assets-cdn.github.com#185.199.111.153   assets-cdn.github.com#199.232.69.194     github.global.ssl.fastly.net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>顺便解释一下</p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>github在国内访问速度慢的原因大部分来源于dns污染</p><p>因为操作系统中Hosts文件的权限优先级高于DNS服务器，因此操作系统在访问某个域名时,会先检测HOSTS文件,然后再查询DNS服务器。</p><p>在Hosts中修改后，会跳过对DNS服务器的请求，操作系统将域名通过Hosts文件解析为在Hosts中的ip地址。</p><p>因而就有了第二种解决方案</p><h2 id="二、修改DNS"><a href="#二、修改DNS" class="headerlink" title="二、修改DNS"></a>二、修改DNS</h2><p>这个方法对笔者比较实用</p><p>修改了hosts，后对Github的访问速度不增反减</p><p>于是嫖到了另一个方法——直接修改电脑首选DNS为谷歌DNS（8.8.8.8/8.8.8.4）</p><p><img src="http://lanyun1103.top/wp-content/uploads/2020/06/OO62V92BF7Q804B8NX.png"></p><p><img src="http://lanyun1103.top/wp-content/uploads/2020/06/FZUP4G4@XL6I7D4H0TMDF.png"></p><p>这里建议修改为谷歌首选，阿里备用，谷歌毕竟是在海外可能会出现不稳定，还是得按照自己的网络情况选择最适合自己的。</p><p>如果修改DNS后访问没有变快可以ping一下DNS：</p><p>我这里的延迟还是比较低的，甚至比阿里快很多（1ms吊打，这20多ms不用我说了吧）</p><p><img src="http://lanyun1103.top/wp-content/uploads/2020/06/9WX3_CO3H7WMWHKB_XWF.png"></p><p><img src="http://lanyun1103.top/wp-content/uploads/2020/06/ORT3TVCXEA@4@H5A.png"></p><h2 id="三、懂的都懂"><a href="#三、懂的都懂" class="headerlink" title="三、懂的都懂"></a>三、懂的都懂</h2><p>你要是能翻出去那权当我上面啥都没说</p>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Graph2D（Java）_Java的图形</title>
      <link href="/2020/06/25/graph2d-java/"/>
      <url>/2020/06/25/graph2d-java/</url>
      
        <content type="html"><![CDATA[<p>集合了Java基本所有常用Graph2D方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>day0625</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>geom<span class="token punctuation">.</span></span><span class="token class-name">Ellipse2D</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>geom<span class="token punctuation">.</span></span><span class="token class-name">Line2D</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>geom<span class="token punctuation">.</span></span><span class="token class-name">Rectangle2D</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> graphDemo <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">1.2F</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Fonder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DrawFonts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Font</span> font1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fonder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateFont</span><span class="token punctuation">(</span><span class="token string">"SansSerif"</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>font1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建图形Swing界面</span>        <span class="token class-name">EventQueue</span><span class="token punctuation">.</span><span class="token function">invokeLater</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span>                <span class="token punctuation">&#123;</span>                    <span class="token class-name">JFrame</span> jFrame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DrawFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    jFrame<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"draw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    jFrame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    jFrame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Fonder</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">DrawFonts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//可以查看当前系统可以使用的字体</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fontNames <span class="token operator">=</span> <span class="token class-name">GraphicsEnvironment</span><span class="token punctuation">.</span><span class="token function">getLocalGraphicsEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getAvailableFontFamilyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> fontName<span class="token operator">:</span>                fontNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fontName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Font</span> <span class="token class-name">CreateFont</span><span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token punctuation">,</span><span class="token keyword">int</span> style<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//新建字体的方式</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>style<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DrawFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">DrawFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DrawComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DrawComponent</span> <span class="token keyword">extends</span> <span class="token class-name">JComponent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_WIDTH <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_HEIGHT <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paintComponent</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Graphics2D</span> g2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span> g<span class="token punctuation">;</span>        <span class="token comment">//设置参数</span>        <span class="token keyword">double</span> leftX <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> topY <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> width <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> height <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>        <span class="token comment">//绘制一个长方形</span>        <span class="token class-name">Rectangle2D</span> rectangle2D <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle2D<span class="token punctuation">.</span>Double</span><span class="token punctuation">(</span>leftX<span class="token punctuation">,</span> topY<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>        g2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>rectangle2D<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//绘制一个椭圆</span>        <span class="token class-name">Ellipse2D</span> ellipse2D <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ellipse2D<span class="token punctuation">.</span>Double</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置以这个长方形为框架</span>        ellipse2D<span class="token punctuation">.</span><span class="token function">setFrame</span><span class="token punctuation">(</span>rectangle2D<span class="token punctuation">)</span><span class="token punctuation">;</span>        g2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>ellipse2D<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//绘制一条直线</span>        g2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Line2D<span class="token punctuation">.</span>Double</span><span class="token punctuation">(</span>leftX<span class="token punctuation">,</span> topY<span class="token punctuation">,</span> leftX <span class="token operator">+</span> width<span class="token punctuation">,</span> topY <span class="token operator">+</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//绘制一个同心圆，半径为150</span>        <span class="token keyword">double</span> centerX <span class="token operator">=</span> rectangle2D<span class="token punctuation">.</span><span class="token function">getCenterX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> centerY <span class="token operator">=</span> rectangle2D<span class="token punctuation">.</span><span class="token function">getCenterY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> radius <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>        <span class="token comment">//可以设置参数，每次选用后，如果要改变颜色还是重复这一步</span>        g2<span class="token punctuation">.</span><span class="token function">setPaint</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//可以设置添加字符串</span>        g2<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fonder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateFont</span><span class="token punctuation">(</span><span class="token string">"SansSerif"</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g2<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span><span class="token string">"OMG"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        可以设置为桌面颜色</span><span class="token comment">//        g2.setPaint(SystemColor.desktop);</span><span class="token comment">//        设置填充颜色</span><span class="token comment">//        g2.fill(rectangle2D);</span>        <span class="token class-name">Ellipse2D</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ellipse2D<span class="token punctuation">.</span>Double</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circle<span class="token punctuation">.</span><span class="token function">setFrameFromCenter</span><span class="token punctuation">(</span>centerX<span class="token punctuation">,</span>centerY<span class="token punctuation">,</span>centerX<span class="token operator">+</span>radius<span class="token punctuation">,</span>centerY<span class="token operator">+</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span>        g2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>circle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Dimension</span> <span class="token function">getPreferredSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dimension</span><span class="token punctuation">(</span>DEFAULT_WIDTH<span class="token punctuation">,</span> DEFAULT_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web渗透（三）_XSS</title>
      <link href="/2020/06/24/web-shen-tou-san-xss/"/>
      <url>/2020/06/24/web-shen-tou-san-xss/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="XSS："><a href="#XSS：" class="headerlink" title="XSS："></a>XSS：</h2><p>XSS名为跨站脚本攻击（CSS）</p><p>向Web页面插入恶意代码，在用户浏览时，web中的script代码会被执行</p><h5 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h5><ol><li> 用户登录</li><li> 攻击者提交URL给用户</li><li> 用户请求攻击者URL</li><li> 服务器对攻击者JavaScript回应</li><li> 攻击者JS在用户浏览器执行</li><li> 用户浏览器向攻击者发送会话令牌（Cookie）</li><li> 攻击者进行对话挟持</li></ol><h4 id="反射性XSS："><a href="#反射性XSS：" class="headerlink" title="反射性XSS："></a>反射性XSS：</h4><p>非持久性</p><p><strong>通过邮件等形式将包含XSS代码发送给正常用户，用户点击时进行处理，附带有XSS代码发送给用户，用户浏览器解析执行代码</strong></p><h5 id="实战1："><a href="#实战1：" class="headerlink" title="实战1："></a>实战1：</h5><p>网页实验：</p><p>在url输入中添加恶意代码（html）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">?ks=11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在源代码中寻找11</p><p>在寻找到的地方对源代码进行本行代码闭合等操作</p><h4 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h4><h5 id="实战1：-1"><a href="#实战1：-1" class="headerlink" title="实战1："></a>实战1：</h5><p>在easyadmin个人平台上的漏洞分析：</p><p>在自己发送的帖子（可能是正文，可能是标签，标题）中隐藏xss代码</p><p>例如</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> x</span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>alert(document.cookie)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> x</span> <span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>alert(1)</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在其他人打开帖子时，浏览器运行xss代码可获取用户cookie</p><h4 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h4><p>Document Object Model</p><p>并非浏览器处理，而是用户处理相应时会触发XSS代码</p><hr><h3 id="XSS测试工具："><a href="#XSS测试工具：" class="headerlink" title="XSS测试工具："></a>XSS测试工具：</h3><p>beef（mac/linux，不支持windows）</p><p>xssor.io（xss插入网页）</p>]]></content>
      
      
      <categories>
          
          <category> hacker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web渗透（二）_SQL注入原理</title>
      <link href="/2020/06/24/web-shen-tou-er-sql-zhu-ru-yuan-li/"/>
      <url>/2020/06/24/web-shen-tou-er-sql-zhu-ru-yuan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="2-1SQL注入原理："><a href="#2-1SQL注入原理：" class="headerlink" title="2-1SQL注入原理："></a>2-1SQL注入原理：</h3><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><p>与用户交互的解释型语言，用户可输入存在恶意行为的代码</p><p>万能密码：</p><p>admin’ or 1=1 –</p><p>漏洞 注释真正密码</p><h5 id="Burpsuite万能密码："><a href="#Burpsuite万能密码：" class="headerlink" title="Burpsuite万能密码："></a>Burpsuite万能密码：</h5><p>kali中的Burpsuite</p><h5 id="Sqlmap："><a href="#Sqlmap：" class="headerlink" title="Sqlmap："></a>Sqlmap：</h5><p>检测和利用SQL注入漏洞的工具</p><h4 id="mysql5-0数据结构："><a href="#mysql5-0数据结构：" class="headerlink" title="mysql5.0数据结构："></a>mysql5.0数据结构：</h4><ul><li>schemata（数据库名）、  用来储存数据库名</li><li>tables（表名）、  用来储存数据库名和表名</li><li>columns（列名）  数据库名，表名，字段名</li></ul><h4 id="mysql命令语句"><a href="#mysql命令语句" class="headerlink" title="mysql命令语句"></a>mysql命令语句</h4><p>筛选：</p><p>SELECT 列名称 FROM 表名称 WHERE 字段1 = ‘条件1‘ AND 字段2 = ‘条件2’</p><p>插入：</p><p>INSERT INTO table name(列1，列2……)VALUES(值1，值2……)</p><p>更新：</p><p>UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值</p><p>删除：</p><p>DELETE FROM 表名称 WHERE 列名称 = 值（没有WHERE则删除整个表</p><h4 id="sqlmap安装："><a href="#sqlmap安装：" class="headerlink" title="sqlmap安装："></a>sqlmap安装：</h4><p>sql依赖Python2</p><h3 id="2-4基于报错的SQL注入"><a href="#2-4基于报错的SQL注入" class="headerlink" title="2-4基于报错的SQL注入"></a>2-4基于报错的SQL注入</h3><h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><p>根据“注入位置”数据类型类型：</p><ul><li>数字型  select * from table where id = 用户输入ID</li><li>字符型  select * from table where id = “用户输入ID”</li></ul><p>通过在URL中修改对应的ID值：可以是正常数字、大数字、字符（单引号，双引号，双单引号，括号），可以用反斜杠来探测是否存在注入点</p><h3 id="2-5不再显示错误的盲注"><a href="#2-5不再显示错误的盲注" class="headerlink" title="2-5不再显示错误的盲注"></a>2-5不再显示错误的盲注</h3><p>Blind SQL 注入攻击的一种</p><p>向数据库发送true和false，通过返回的信息判断结果</p>]]></content>
      
      
      <categories>
          
          <category> hacker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web渗透（一）</title>
      <link href="/2020/06/24/web-shen-tou-yi/"/>
      <url>/2020/06/24/web-shen-tou-yi/</url>
      
        <content type="html"><![CDATA[<h4 id="1-1：域名收集"><a href="#1-1：域名收集" class="headerlink" title="1-1：域名收集"></a>1-1：域名收集</h4><h5 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h5><p>一串用点分割的名字组成的Internet的某一台计算机或计算机组的名称</p><h5 id="浏览过程"><a href="#浏览过程" class="headerlink" title="浏览过程"></a>浏览过程</h5><h5 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h5><p>whois用来查询名的IP 和所有者信息的传输协议</p><p>服务器TCP端口43</p><p>whois.chinaz.com whois.aliyun.com</p><h5 id="备案查询"><a href="#备案查询" class="headerlink" title="备案查询"></a>备案查询</h5><p>beianbeian.com miitbeian.ggov.cn/publish/query/indexFirst.action</p><h4 id="1-2子域名："><a href="#1-2子域名：" class="headerlink" title="1-2子域名："></a>1-2子域名：</h4><p>目的：主域名可能没有漏洞</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>子域名挖掘工具</p><h4 id="1-3-web网点信息："><a href="#1-3-web网点信息：" class="headerlink" title="1-3 web网点信息："></a>1-3 web网点信息：</h4><p>CMS内容管理系统：</p><p>整站系统或文章系统。用于网站内容管理。</p><h5 id="常见cms："><a href="#常见cms：" class="headerlink" title="常见cms："></a>常见cms：</h5><p>dedecms（织梦）</p><p>phpcms</p><p>discuz</p><h6 id="cms识别工具："><a href="#cms识别工具：" class="headerlink" title="cms识别工具："></a>cms识别工具：</h6><p><a href="http://www.whatweb.bugscaner.com/look/">www.whatweb.bugscaner.com/look/</a></p><p><a href="http://www.yunsee.cn/finger.html">www.yunsee.cn/finger.html</a></p><p>御剑web指纹识别</p><p>大禹cms识别 github.com/Ms0x0/Dayu</p><h6 id="查询cms漏洞："><a href="#查询cms漏洞：" class="headerlink" title="查询cms漏洞："></a>查询cms漏洞：</h6><p>乌云漏洞</p><p>bugs.shuimugan.com</p><h5 id="敏感信息查询（服务器文件）："><a href="#敏感信息查询（服务器文件）：" class="headerlink" title="敏感信息查询（服务器文件）："></a>敏感信息查询（服务器文件）：</h5><p>御剑后台扫描工具</p><p>wwwscan命令行工具</p><p>dirb命令行工具</p><p>dirbuster 扫描工具</p><h5 id="wpscan安全扫描WordPress："><a href="#wpscan安全扫描WordPress：" class="headerlink" title="wpscan安全扫描WordPress："></a>wpscan安全扫描WordPress：</h5><p>科学上网，跳过不说</p><h4 id="1-4端口信息："><a href="#1-4端口信息：" class="headerlink" title="1-4端口信息："></a>1-4端口信息：</h4><h4 id="1-5敏感信息："><a href="#1-5敏感信息：" class="headerlink" title="1-5敏感信息："></a>1-5敏感信息：</h4><h5 id="google-hack"><a href="#google-hack" class="headerlink" title="google hack"></a>google hack</h5><h5 id="获取http响应的办法："><a href="#获取http响应的办法：" class="headerlink" title="获取http响应的办法："></a>获取http响应的办法：</h5><p>header包含服务器信息</p><p>1.浏览器审计工具</p><p>2.python-requests</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsr <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="kali漏洞搜索"><a href="#kali漏洞搜索" class="headerlink" title="kali漏洞搜索"></a>kali漏洞搜索</h5><p>searchspoilt</p><h5 id="github漏洞泄露"><a href="#github漏洞泄露" class="headerlink" title="github漏洞泄露"></a>github漏洞泄露</h5><h4 id="1-6真实IP搜索："><a href="#1-6真实IP搜索：" class="headerlink" title="1-6真实IP搜索："></a>1-6真实IP搜索：</h4><p>CDN 内容分发网络：交互时和服务器进行内容交流，服务器对不同地区返回不同数据</p><p>可用ping.chinaz.com进行ping测试，返回ip不同则存在CDN</p><h5 id="绕过CDN："><a href="#绕过CDN：" class="headerlink" title="绕过CDN："></a>绕过CDN：</h5><p>没有使用CDN可使用ip138.com获得ip所在地址</p><p>1.网站phpinfo文件：phpinfo.php</p><p>2.分站ip地址查询子域名，cdn贵</p><p>3.查询域名解析记录 viewdns.info</p><h4 id="1-7信息搜集："><a href="#1-7信息搜集：" class="headerlink" title="1-7信息搜集："></a>1-7信息搜集：</h4><p>服务器系统，数据库系统，中间件系统，边界设备</p><p>收集针对系统管理员的信息收集</p><h5 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h5><p>1.主动</p><p>直接与目标进行交互，对交互过程中的信息进行收集。（Nmap扫描，Bursuite站点地图收集）</p><p>2.被动</p><p>通过第三方引擎（google hack，shodan）（不直接交互</p><h4 id="shodan："><a href="#shodan：" class="headerlink" title="shodan："></a>shodan：</h4><p>搜索互联网上的所有设备 shodan.io</p><h5 id="指定搜索："><a href="#指定搜索：" class="headerlink" title="指定搜索："></a>指定搜索：</h5><p>port指定具体端口探测</p><p>host指定具体IP地址探测指定IP地址主机信息</p><p>city指定搜索具体城市的内容</p><h5 id="命令行使用："><a href="#命令行使用：" class="headerlink" title="命令行使用："></a>命令行使用：</h5><p>安装：</p><p>easy_install shodan</p><p>获取帮助：shodan -h</p><p>初始化：shodan init [apikey]</p><ul><li>  inurl：域名中包含的内容；</li><li>  intitle：标题中包含的内容；</li><li>  intext：页面正文的内容以及代码内的内容；</li><li>  filetype：搜索指定的类型（东侧、txt等）；</li><li>  site：限制搜索的域名；查找主站的子域名</li></ul><p>获取ip信息：shodan host [ip]</p><p>自身账户信息：shodan info</p><p>自身ip：shodan myip</p><h5 id="python-shodan使用："><a href="#python-shodan使用：" class="headerlink" title="python-shodan使用："></a>python-shodan使用：</h5><p>在命令行中打开python</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> shodanSHODAN_API <span class="token operator">=</span> <span class="token string">"[api]"</span>api <span class="token operator">=</span> shodan<span class="token punctuation">.</span>Shodan<span class="token punctuation">(</span>SHODAN_API<span class="token punctuation">)</span>result <span class="token operator">=</span> api<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'apache'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">(</span><span class="token string">'total'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>shodan帮助：developer.shodan.io/api</p><h4 id="git信息泄露"><a href="#git信息泄露" class="headerlink" title="git信息泄露"></a>git信息泄露</h4><p>下载：git clone <a href="https://github.com/lijiejie/GitHack.git">https://github.com/lijiejie/GitHack.git</a></p><p>使用：GitHack.py <a href="https://网址/.git/">https://网址/.git/</a></p>]]></content>
      
      
      <categories>
          
          <category> hacker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基数排序（Java）</title>
      <link href="/2020/06/23/ji-shu-pai-xu-java/"/>
      <url>/2020/06/23/ji-shu-pai-xu-java/</url>
      
        <content type="html"><![CDATA[<h1 id="基数排序（Java）"><a href="#基数排序（Java）" class="headerlink" title="基数排序（Java）"></a>基数排序（Java）</h1><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>基数排序听起来挺让人一头雾水，其实原理很简单，就是</p><ul><li>  按照个位数放入桶中，依次按照桶的顺序放回到原数组中</li><li>  按照十位数放入桶中，依次按照通的顺序放回到原数组中</li><li>  …</li></ul><p>如此循环，可以得到一个顺序的数组</p><p>桶排序的算法都非常巧妙</p><h2 id="优点：算法稳定，算法较快"><a href="#优点：算法稳定，算法较快" class="headerlink" title="优点：算法稳定，算法较快"></a>优点：算法稳定，算法较快</h2><p>和快速排序有的一拼（因为快排不稳定）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>algorithm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RadixSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">80000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">80000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> before <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Radix</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> before<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 基数排序是一个非常稳定，非常快的算法，基于桶排序     *     * @param arr 需要排序的数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Radix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//这里需要计算出数组中最大的元素长度，来判断需要循环的次数</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token punctuation">(</span>max <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建二维数组作为十个桶，储存数字的基数</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//每个桶中当前的储存的数量</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> eachBucketCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> maxLength<span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">,</span> n <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//count记录循环次数，第一次循环个位，第二次循环十位。。</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> indexOfElement <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>                bucket<span class="token punctuation">[</span>indexOfElement<span class="token punctuation">]</span><span class="token punctuation">[</span>eachBucketCount<span class="token punctuation">[</span>indexOfElement<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                eachBucketCount<span class="token punctuation">[</span>indexOfElement<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//把桶里面的所有数据放回到原数组中</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>eachBucketCount<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> eachBucketCount<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//对桶中数据数量清零</span>                eachBucketCount<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//输出排序后的数组</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约瑟夫环（Java）</title>
      <link href="/2020/06/22/yue-se-fu-huan-java/"/>
      <url>/2020/06/22/yue-se-fu-huan-java/</url>
      
        <content type="html"><![CDATA[<h1 id="约瑟夫环"><a href="#约瑟夫环" class="headerlink" title="约瑟夫环"></a>约瑟夫环</h1><p>这题其实在大一某一节c语言课就写出来了，当时也没怎么想，也就是一个循环链表+跳跃结点+链接节点的事儿，那是个我还有女朋友的日子。</p><h2 id="基本步骤："><a href="#基本步骤：" class="headerlink" title="基本步骤："></a>基本步骤：</h2><p>基本就是创建一个循环链表，在这个链表中循环剔除第k-1个结点，比较简单。</p><p>只是自己写循环链表的话，各种判断比较麻烦。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>algorithm</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jossf</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CircleLinkedList</span> circleLinkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CircleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circleLinkedList<span class="token punctuation">.</span><span class="token function">addBoy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circleLinkedList<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circleLinkedList<span class="token punctuation">.</span><span class="token function">countBoy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 循环链表 * */</span><span class="token keyword">class</span> <span class="token class-name">CircleLinkedList</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Boy</span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 添加小孩的数量，遍历加入到循环链表中     * @param num   需要插入的结点数量     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBoy</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"wrong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Boy</span> curBoy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Boy</span> boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                first <span class="token operator">=</span> boy<span class="token punctuation">;</span>                first<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>                curBoy <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                curBoy<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span>                boy<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>                curBoy <span class="token operator">=</span> boy<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 遍历输出链表     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建临时结点，用来遍历（只是保证first结点不改变而已）</span>        <span class="token class-name">Boy</span> curBoy <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>curBoy<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curBoy<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            curBoy <span class="token operator">=</span> curBoy<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 核心算法     * 用来计算     * @param startNo   从几号开始报好     * @param countNum  报几个号出去一个人     * @param nums      报过号后还剩多少人     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countBoy</span><span class="token punctuation">(</span><span class="token keyword">int</span> startNo<span class="token punctuation">,</span> <span class="token keyword">int</span> countNum<span class="token punctuation">,</span> <span class="token keyword">int</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token keyword">null</span>  startNo <span class="token generics"><span class="token punctuation">&lt;</span> 1  startNo <span class="token punctuation">></span></span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fault"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//helper指向环形链表尾节点，用来将环形链表首尾相连</span>        <span class="token class-name">Boy</span> helper <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token comment">//helper移动到环形链表尾部</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> first<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            helper <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//first和helper同时向前移动startNo格，用于设置开始结点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> startNo<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//重点</span>        <span class="token comment">//往前进countNum-1格后，输出当前first的格的值，将first往前移动一格，尾节点helper连接到first</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>helper <span class="token operator">==</span> first<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> countNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                helper <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>first<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//往前进一步</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//尾指针指向下一个</span>            helper<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>first<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Boy类，作为循环链表的结点 */</span><span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Boy</span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Boy</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">Boy</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL（五）_列操作、数据类型、表约束操作</title>
      <link href="/2020/06/22/mysql-wu-lie-cao-zuo-shu-ju-lei-xing-biao-yue-shu-cao-zuo/"/>
      <url>/2020/06/22/mysql-wu-lie-cao-zuo-shu-ju-lei-xing-biao-yue-shu-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="一、修改数据库列"><a href="#一、修改数据库列" class="headerlink" title="一、修改数据库列"></a>一、修改数据库列</h2><h3 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table ... change column ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="改类型或约束"><a href="#改类型或约束" class="headerlink" title="改类型或约束"></a>改类型或约束</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table ... modify column ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加新列"><a href="#添加新列" class="headerlink" title="添加新列"></a>添加新列</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table ... add column ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table ... drop column ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table ... rename to ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h2><h3 id="数字："><a href="#数字：" class="headerlink" title="数字："></a>数字：</h3><p>整数：</p><p>Name</p><p>Byte</p><p>TinyInt</p><p>1</p><p>SmallInt</p><p>2</p><p>MediumInt</p><p>3</p><p>Int/Integer</p><p>4</p><p>BigInt</p><p>8</p><p>小数：</p><p>Name</p><p>Byte</p><p>float(M,D)</p><p>4</p><p>double(M,D)</p><p>8</p><p>DEC(M,D)</p><p>M+2</p><ol><li> 无符号数字：＋unsigned 限定词</li><li> 超界默认为最大届值</li><li> ZEROFILL 对不满8的int填充0，例如123 -&gt; 00000123</li></ol><h3 id="字符："><a href="#字符：" class="headerlink" title="字符："></a>字符：</h3><p>短：</p><p>Name</p><p>char</p><p>varchar</p><p>长：</p><p>text 长文本</p><p>blob 长二进制</p><h3 id="日期："><a href="#日期：" class="headerlink" title="日期："></a>日期：</h3><ul><li>  date</li><li>  <strong>datetime</strong> 时间范围广，占用内存大</li><li>  <strong>timestamp</strong> 时间范围小，占用小，精确，与时区有关</li><li>  time</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into stuff value(now(),now());<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、创建表时约束"><a href="#三、创建表时约束" class="headerlink" title="三、创建表时约束"></a>三、创建表时约束</h2><h3 id="列约束"><a href="#列约束" class="headerlink" title="列约束"></a>列约束</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#主键primary key #非空not null#满足条件check(... or ...)#唯一unique#默认default#外键foreign key() references()#*********#查看某个表中的所有索引：包括主键，外键，唯一show index from ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表约束"><a href="#表约束" class="headerlink" title="表约束"></a>表约束</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">constraint pl primary key()constraint uq unique()......#基本同上用法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="tips-主键与唯一的区别"><a href="#tips-主键与唯一的区别" class="headerlink" title="tips:主键与唯一的区别"></a>tips:主键与唯一的区别</h4><p>主键：唯一，且不可空（一个表最多一个）</p><p>唯一：唯一，但可空 （只能有一个NULL，一个表可以有很多个UNIQUE）</p><h2 id="四、修改表约束"><a href="#四、修改表约束" class="headerlink" title="四、修改表约束"></a>四、修改表约束</h2><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名 modify column 字段名 字段类型 新约束alter table 表名 add [constraint 约束名] 约束类型（字段名） [外键引用]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#添加表约束alter table .. modify column ... #添加表默认约束alter table ... modify column ... default ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="列级约束："><a href="#列级约束：" class="headerlink" title="列级约束："></a>列级约束：</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table ... modify column seat int unique;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="表级约束："><a href="#表级约束：" class="headerlink" title="表级约束："></a>表级约束：</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table ... add unique(seat);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加外键例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table ... add constraint ...(名字，可加可不加) foreign key() references();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、删除表约束："><a href="#五、删除表约束：" class="headerlink" title="五、删除表约束："></a>五、删除表约束：</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#删除非空约束alter table ... modify column ... ... null;#删除默认约束alter table ... modify column ... int;#删除主键alter table ... drop primary key;#删除唯一alter table ... drop index ...#删除外键alter table ... drop foreign key ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、标识列"><a href="#六、标识列" class="headerlink" title="六、标识列"></a>六、标识列</h2><h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><p>在<strong>键（key）</strong>之后添加 auto_increment 表示</p><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>自增值，不用手动插入值</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table ...(    id int primary key auto_increment,    name varchar(20))#查看自增列参数show variables like &#39;%auto_increment%&#39;#设置步长set auto_increment_increment &#x3D; 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li>  <strong>mysql无法修改auto_increment的offset参数，但是可以给自增列初值，这样就是代替修改偏移量。</strong></li><li>  一个表只能有一个标识列</li><li>  并不是所有数据类型都可以作为自增列</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单具有记录功能的Java打卡小程序（Java Swing）</title>
      <link href="/2020/06/20/jian-dan-ju-you-ji-lu-gong-neng-de-java-da-qia-xiao-cheng-xu-java-swing/"/>
      <url>/2020/06/20/jian-dan-ju-you-ji-lu-gong-neng-de-java-da-qia-xiao-cheng-xu-java-swing/</url>
      
        <content type="html"><![CDATA[<h2 id="Java打卡"><a href="#Java打卡" class="headerlink" title="Java打卡"></a>Java打卡</h2><p>功能很简单，输入文字即可保存到设定目录下的文件中。</p><p>delete删除文件中所有数据。其他功能以后继续完善吧，swing还没学完。</p><p>更新后的具有打开文档、打卡、删除、显示今天日期等功能。算是结合了所有Java Swing基本操作的一个小程序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>javaExamination</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleDiary</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">createUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Frame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">"recorder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Frame</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">JLabel</span> welcome <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"开始你的一天学习吧,今天是"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy.MM.dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JButton</span> jButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"打卡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JTextField</span> jTextField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JButton</span> <span class="token keyword">open</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"打开日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JButton</span> delete <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"删除文件所有数据，不要点啊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置文件目录</span>    <span class="token class-name">String</span> fileDir <span class="token operator">=</span> <span class="token string">"D:\\record.txt"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JFrame</span> jFrame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置为布局</span>        container<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        welcome<span class="token punctuation">.</span><span class="token function">setAlignmentX</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//加入组件</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>welcome<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        welcome<span class="token punctuation">.</span><span class="token function">setPreferredSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dimension</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        welcome<span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span><span class="token class-name">SwingConstants</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jTextField<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jButton<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>EAST<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>delete<span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">open</span><span class="token punctuation">,</span><span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>WEST<span class="token punctuation">)</span><span class="token punctuation">;</span>        delete<span class="token punctuation">.</span><span class="token function">setPreferredSize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dimension</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加监听器</span>        jButton<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        delete<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelAct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">open</span><span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Action</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">DelAct</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Open</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ioException<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BufferedWriter</span> bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileDir<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>time <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> jTextField<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BufferedWriter</span> bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileDir<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF_8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span>Desktop</span><span class="token punctuation">.</span><span class="token function">getDesktop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>赫夫曼树（Java）</title>
      <link href="/2020/06/19/he-fu-man-shu-java/"/>
      <url>/2020/06/19/he-fu-man-shu-java/</url>
      
        <content type="html"><![CDATA[<h1 id="赫夫曼树"><a href="#赫夫曼树" class="headerlink" title="赫夫曼树"></a>赫夫曼树</h1><h2 id="心得："><a href="#心得：" class="headerlink" title="心得："></a>心得：</h2><p>这是一个用来求最佳权路径的数据结构</p><p>个人觉得赫夫曼树涉及的用处肯定很多，是一个不难，但是必须得了解的结构。</p><p>以后的算法原理、步骤放在代码中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>algorithm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 赫夫曼树的原理：排序后，一步一步将最小的两个节点的放在子树，而两个节点权值之和作为他们两个的父节点 * 这个父节点与其他节点再次排序，重复以上 * 这里使用ArrayList&lt;Node>，使用重写compareTo()方法对集合进行排序 * 使用preOrder()进行结果检验 * 经过测试可以直接使用 * * @author lanyun * lanyun1103.top * @version 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HulfmanTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> root <span class="token operator">=</span> <span class="token function">createHuffmanTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 创建赫夫曼树     *     * @param arr 数组     * @return 返回根节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">createHuffmanTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//不断遍历排序</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"node = "</span> <span class="token operator">+</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Node</span> leftNode <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Node</span> rightNode <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Node</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">.</span>value <span class="token operator">+</span> rightNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> leftNode<span class="token punctuation">;</span>            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> rightNode<span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//完成后将节点重新排序</span>            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token class-name">Node</span> left<span class="token punctuation">;</span>    <span class="token class-name">Node</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"value = "</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Node</span> com<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">-</span> com<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_代理模式</title>
      <link href="/2020/06/18/java-dai-li-mo-shi/"/>
      <url>/2020/06/18/java-dai-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java代理模式"><a href="#Java代理模式" class="headerlink" title="Java代理模式"></a>Java代理模式</h1><h2 id="一、代理模式区分"><a href="#一、代理模式区分" class="headerlink" title="一、代理模式区分"></a>一、代理模式区分</h2><ul><li>  静态代理</li><li>  动态代理</li><li>  如果目标对象的接口有<strong>很多方法</strong>的话，得一一实现。</li><li>  代理对象的生成，是利用JDKAPI，<strong>动态地在内存中构建代理对象</strong>(需要我们指定创建 <strong>代理对象/目标对象 实现的接口的类型</strong>)，并且会<strong>默认实现接口的全部方法</strong>。</li></ul><h2 id="二、代理作用"><a href="#二、代理作用" class="headerlink" title="二、代理作用"></a>二、代理作用</h2><p>如果一个Javaer类实现了一个Programmer接口，且这个类需要一个代理类来帮助实现类的行为，这个时候：</p><h3 id="静态代理："><a href="#静态代理：" class="headerlink" title="静态代理："></a>静态代理：</h3><p>通过创建另一个实现接口的类（Javer1），在这个类中创建 Javaer 类，并重写接口方法（和Javaer类重写内容相同），在调用时直接调用Javer1的对象。</p><h3 id="动态代理："><a href="#动态代理：" class="headerlink" title="动态代理："></a>动态代理：</h3><p>Java提供了一个Proxy类，调用它的newInstance方法可以生成某个对象的代理对象,该方法需要三个参数：</p><ul><li>  参数一：生成代理对象使用哪个类装载器【一般我们使用的是被代理类的装载器】</li><li>  参数二：生成哪个对象的代理对象，通过接口指定【指定要被代理类的接口】</li><li>  参数三：生成的代理对象的方法里干什么事【实现handler接口，我们想怎么实现就怎么实现】</li><li>  所有通过动态代理<strong>实现的方法全部</strong>通过<code>invoke()</code>调用</li></ul><h3 id="动态代理代码"><a href="#动态代理代码" class="headerlink" title="动态代理代码"></a>动态代理代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span></span><span class="token class-name">ProxyPac</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Javaer</span> javaer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Javaer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//代理模式</span>        <span class="token class-name">Programmer</span> programmer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Programmer</span><span class="token punctuation">)</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>javaer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    javaer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args1<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果是调用coding方法，那么水军就要点赞了</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"coding"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>javaer<span class="token punctuation">,</span> args1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是水军，我来点赞了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 如果不是调用coding方法，那么调用原对象的方法</span>                    <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>javaer<span class="token punctuation">,</span> args1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        programmer<span class="token punctuation">.</span><span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Javaer</span> <span class="token keyword">implements</span> <span class="token class-name">Programmer</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"coding\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Programmer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序（Java）</title>
      <link href="/2020/06/18/gui-bing-pai-xu-java/"/>
      <url>/2020/06/18/gui-bing-pai-xu-java/</url>
      
        <content type="html"><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>嗐，这个算法真的很简单了（不知道评论区一个算法学一天的是不是真的没有基础就开始看算法）。算是一个典型的分治算法，分治到极点的一个算法</p><p>归并排序把原数组在一次次递归中，分成单个元素，并在merge中一个一个合并。</p><p>原理是：在一次次回溯中，每一次回溯都先将左右子串调整到原来的1/2，回溯到最低层后一层层向外merge。 每一次merge都使用双指针方法对左、右字串同时遍历，选择比较小的添加入temp[]。 直到递归结束，temp中得到的是有序的数组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>algorithm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Merge_sort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">1235</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//这个方法很重要</span>    <span class="token comment">//原理是：在一次次回溯中，每一次回溯都先将左右子串调整到原来的1/2，回溯到最低层后一层层向外merge</span>    <span class="token comment">//每一次merge都使用双指针方法对左、右字串同时遍历，选择比较小的添加入temp[]。</span>    <span class="token comment">//直到递归结束，temp中得到的是有序的数组。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">//先拆分</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//后合并</span>            <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @param nums  排序数组     * @param left  左边有序数列索引     * @param mid   中间索引     * @param right 右边索引     * @param temp  中转数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                t<span class="token operator">++</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                t<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//左边的数组没有遍历完</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            t<span class="token operator">++</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//右边的数组没有遍历完</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            t<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//赋值给原数组</span>        t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tempLeft <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tempLeft <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>tempLeft<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>            t<span class="token operator">++</span><span class="token punctuation">;</span>            tempLeft<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据处理（numpy+matplotlib)</title>
      <link href="/2020/06/16/python-shu-ju-chu-li-numpymatplotlib/"/>
      <url>/2020/06/16/python-shu-ju-chu-li-numpymatplotlib/</url>
      
        <content type="html"><![CDATA[<h1 id="Python数据处理（numpy-matplotlib"><a href="#Python数据处理（numpy-matplotlib" class="headerlink" title="Python数据处理（numpy+matplotlib)"></a>Python数据处理（numpy+matplotlib)</h1><h2 id="设置坐标显示和曲线的参数"><a href="#设置坐标显示和曲线的参数" class="headerlink" title="设置坐标显示和曲线的参数"></a>设置坐标显示和曲线的参数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">1</span>y2<span class="token operator">=</span> x<span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">1</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment">#坐标范围</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">#修改坐标显示</span>new_ticks <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>new_ticks<span class="token punctuation">)</span><span class="token comment">#plt.yticks(new_ticks)</span><span class="token comment">#坐标名</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token comment">#调整坐标轴</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#设置上、右坐标轴为无线条</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span><span class="token comment">#设置底、左坐标轴为默认x、y轴</span>ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">'bottom'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">'left'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'bottom'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#设置曲线参数：标注</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'up'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'/^2'</span><span class="token punctuation">)</span>l1<span class="token operator">=</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'up'</span><span class="token punctuation">)</span>l2<span class="token operator">=</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'/^2'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>handles<span class="token operator">=</span><span class="token punctuation">[</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">]</span><span class="token punctuation">,</span>labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'me'</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token punctuation">,</span>loc <span class="token operator">=</span> <span class="token string">'best'</span><span class="token punctuation">)</span><span class="token comment">#设置曲线颜色，粗细，格式</span><span class="token comment">#plt.plot(x,y1,color='red',lw=1.0,linestyle='--')</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置图像标注"><a href="#设置图像标注" class="headerlink" title="设置图像标注"></a>设置图像标注</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>y1 <span class="token operator">=</span> x<span class="token operator">*</span>xy2 <span class="token operator">=</span> x<span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">1</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y1<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y2<span class="token punctuation">)</span>x0 <span class="token operator">=</span> <span class="token number">1</span>y0 <span class="token operator">=</span> x0<span class="token operator">*</span>x0<span class="token operator">+</span><span class="token number">1</span><span class="token comment">#设置到x轴的垂直线</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span>color <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span>x0<span class="token punctuation">,</span>x0<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>y0<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'k--'</span><span class="token punctuation">,</span>lw <span class="token operator">=</span> <span class="token string">'2.5'</span><span class="token punctuation">)</span><span class="token comment">#设置标注的两种方法</span>plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">r'$2x=1=%s$'</span><span class="token operator">%</span>y0<span class="token punctuation">,</span>xy <span class="token operator">=</span> <span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">)</span><span class="token punctuation">,</span>xycoords<span class="token operator">=</span><span class="token string">'data'</span><span class="token punctuation">,</span>xytext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>textcoords<span class="token operator">=</span><span class="token string">"offset points"</span><span class="token punctuation">,</span>             fontsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>arrowprops <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>arrowstyle <span class="token operator">=</span> <span class="token string">'->'</span><span class="token punctuation">,</span>connectionstyle<span class="token operator">=</span><span class="token string">'arc3,rad = .2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>text <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">r'$this is description of figure$'</span>          <span class="token punctuation">,</span>fontdict<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'size'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npn <span class="token operator">=</span> <span class="token number">1024</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>Y <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>T <span class="token operator">=</span> np<span class="token punctuation">.</span>arctan2<span class="token punctuation">(</span>Y<span class="token punctuation">,</span>X<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="figure动画展示"><a href="#figure动画展示" class="headerlink" title="figure动画展示"></a>figure动画展示</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> animation <span class="token keyword">as</span> ani<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npfig<span class="token punctuation">,</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span><span class="token number">0.01</span><span class="token punctuation">)</span>line<span class="token punctuation">,</span> <span class="token operator">=</span> ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">animate</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    line<span class="token punctuation">.</span>set_ydata<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token operator">+</span>i<span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> line<span class="token punctuation">,</span><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    line<span class="token punctuation">.</span>set_ydata<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> line<span class="token punctuation">,</span>anin <span class="token operator">=</span> ani<span class="token punctuation">.</span>FuncAnimation<span class="token punctuation">(</span>fig<span class="token operator">=</span>fig<span class="token punctuation">,</span>func<span class="token operator">=</span>animate<span class="token punctuation">,</span>frames<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>init_func<span class="token operator">=</span>init<span class="token punctuation">,</span>interval<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>blit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈（Java）</title>
      <link href="/2020/06/15/zhan-java/"/>
      <url>/2020/06/15/zhan-java/</url>
      
        <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p><img src="http://lanyun1103.top/wp-content/uploads/2020/06/@XFTBS1ZVT3A_Q7.png"></p><p>还是很简单的，想起来原理后几分钟敲出来了（备注都懒得写） 虽然Java内置Stack类，但是还是自己写一下比较靠谱</p><p>这可比C++简单多啦（躲起来）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>algorithm</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stackk</span> stackk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stackk</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stackk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stackk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stackk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stackk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stackk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stackk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stackk<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Stackk</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Stackk</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>        stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> maxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"满啦\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> pop <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"空空如也\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空哒\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack[%d] = %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础（三）_分组、连接、子、组合查询</title>
      <link href="/2020/06/14/mysql-ji-chu-san/"/>
      <url>/2020/06/14/mysql-ji-chu-san/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL基础（三）"><a href="#MySQL基础（三）" class="headerlink" title="MySQL基础（三）"></a>MySQL基础（三）</h1><p><img src="http://lanyun1103.top/wp-content/uploads/2020/06/5C@YS97YD14RZ@AI.png"></p><h2 id="一、分组查询"><a href="#一、分组查询" class="headerlink" title="一、分组查询"></a>一、分组查询</h2><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><p>select 分组函数，列 from 表 【where】 group by 分组列表 order by 子句</p><p>每个工种最高工资</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT MAX (salary),job_id FROM employees GROUP BY job_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查询每个领导的最高工资</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT MAX (salary),manager_id FROM employees WHERE commission_pct Is NOT NULL GROUP BY manager id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加比较复杂的筛选条件："><a href="#添加比较复杂的筛选条件：" class="headerlink" title="添加比较复杂的筛选条件："></a>添加比较复杂的筛选条件：</h3><p>重点：区别分组前筛选和分组后筛选</p><p>对分组的结果进行筛选</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#选择分组数据大于2的数SELECT COUNT (*)， department id FROM employees GROUP BY department id WHERE COUNT(*)&gt;2#选择salary大于12000的数据SELECT MAX(salary),job_id FROM employees WHERE commission_pct Is NOT NULL GROUP BY job_id HAVING MAX（salary）&gt;12000；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按照多个字段分组："><a href="#按照多个字段分组：" class="headerlink" title="按照多个字段分组："></a>按照多个字段分组：</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT AVG(salary),department_id,job_id FROM employees GROUP BY job_id, department_id：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="添加排序："><a href="#添加排序：" class="headerlink" title="添加排序："></a>添加排序：</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#按照salary排序SELECT AVG(salary)， department id, job id FROM employees GROUP BY job_id, department_id ORDER BY AVG(salary);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、连接查询"><a href="#二、连接查询" class="headerlink" title="二、连接查询"></a>二、连接查询</h2><h3 id="1-两个表之间对应关系（等值连接）："><a href="#1-两个表之间对应关系（等值连接）：" class="headerlink" title="1.两个表之间对应关系（等值连接）："></a>1.两个表之间对应关系（等值连接）：</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT NAME, boy Name FROM boys, beauty WHERE beauty.boyfriend_id &#x3D; boys.id：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以添加分组 可以添加其他筛选条件 可以加排序</p><h3 id="2-非等值连接："><a href="#2-非等值连接：" class="headerlink" title="2.非等值连接："></a>2.非等值连接：</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT salary, grade_level FROM employees e, job_grades gBETWEEN g.lowest_sal AND g.highest_sal ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-自连接："><a href="#3-自连接：" class="headerlink" title="3.自连接："></a>3.自连接：</h3><p>把一个表当成两个表用</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT e.employee_id,e.last_name, m.employee_id, m.last_name FROM employees e, employees m WHERE e.manager_id &#x3D; m.employee_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、sql199语法"><a href="#三、sql199语法" class="headerlink" title="三、sql199语法"></a>三、sql199语法</h2><h3 id="1-自连接"><a href="#1-自连接" class="headerlink" title="1.自连接"></a>1.自连接</h3><p>自然连接将表中具有相同名称的列自动进行匹配，自然连接不必指定任何同等连接条件也不能认为指定哪些列需要被匹配，自然连接得到的结果表中，两表中名称相同的列只出现一次。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from employee natural join department;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-内连接（inner-join）-产生的结果是A和B的交集（相同列里面的相同值）"><a href="#2-内连接（inner-join）-产生的结果是A和B的交集（相同列里面的相同值）" class="headerlink" title="2.内连接（inner join）:产生的结果是A和B的交集（相同列里面的相同值）"></a>2.内连接（inner join）:产生的结果是A和B的交集（相同列里面的相同值）</h3><p>内连接查询能将左表和右表中能关联起来的数据连接后返回，返回的结果就是两个表中所有相匹配的数据。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last name,department_name FROM employees e INNER JOIN departments_d ON e.department_id &#x3D; d.department_id;select * from TableA as A inner join TableB B on A.PK &#x3D; B.PK;select * from TableA as A inner join TableB B on A.PK &gt; B.PK;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-外连接（outer-join）"><a href="#3-外连接（outer-join）" class="headerlink" title="3.外连接（outer join）"></a>3.外连接（outer join）</h3><p>内连接是要显示两张表的内存，而外连接不要求如此，外连接可以依据连接表保留左表，右表或全部表的行为而分为左外连接右外连接和全连接。 select * from TableA as A left(right/full) join TableB as B on A.PA = B.PK;</p><p>Full Join:产生的结果是A和B的并集（如果没有相同的值会用null作为值）</p><p>Left Join:产生表B的完全集，而A表中匹配的则有值（没有匹配的则以null值取代） SELECT column_name(s) FROM table_name1 LEFT JOIN table_name2 ON table_name1.column_name=table_name2.column_name</p><p>Right Join:产生表A的完全集，而B表中匹配的则有值（没有匹配的则以null值取代）</p><h3 id="4-交叉连接（cross-join）"><a href="#4-交叉连接（cross-join）" class="headerlink" title="4.交叉连接（cross join）"></a>4.交叉连接（cross join）</h3><p>又称笛卡尔连接，交叉连接返回两个集合的笛卡尔积。 select * from TableA cross join Tab</p><h2 id="四、子查询"><a href="#四、子查询" class="headerlink" title="四、子查询"></a>四、子查询</h2><p>出现在其他语句中的select语句。意思是可以放在其他语句中（不仅仅可以在查询语句中）</p><h2 id="五、组合查询"><a href="#五、组合查询" class="headerlink" title="五、组合查询"></a>五、组合查询</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#组合查询，一次性运行几个select单独语句SELECT vend_ id, prod_id, prod_price FROM products WHERE prod_price &lt;&#x3D;5UNION SELECT vend_id, prod _id, prod_ price FROM products WHERE vend id IN （1001， 1002）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意事项</p><ul><li>  UNION必须由两条或两条以上的 SELECT语句组成，语句之间用关键字 UNION分隔（因此，如果组合4条 SELECT语句，将要使用3个UNION关键字）。</li><li>  UNION中的每个査询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）。</li><li>  列数据类型必须兼容：类型不必完全相同，但必须是DBMS可以急含地转换的类型（例如，不同的数值类型或不同的日期类型）。</li><li>  UNION自动取消重复的行，如要显示重复的行，可以使用UNION ALL</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java打卡小程序（非常简陋）</title>
      <link href="/2020/06/13/java-da-qia-xiao-cheng-xu-fei-chang-jian-lou/"/>
      <url>/2020/06/13/java-da-qia-xiao-cheng-xu-fei-chang-jian-lou/</url>
      
        <content type="html"><![CDATA[<h2 id="Java打卡"><a href="#Java打卡" class="headerlink" title="Java打卡"></a>Java打卡</h2><p>功能很简单，输入文字即可保存到设定目录下的文件中。</p><p>delete删除文件中所有数据。其他功能以后继续完善吧，swing还没学完。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>javaExamination</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ActionListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleDiary</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">createUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Frame</span> frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token string">"recorder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Frame</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">JButton</span> jButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"打卡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JTextField</span> jTextField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextField</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JButton</span> delete <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> fileDir <span class="token operator">=</span> <span class="token string">"D:\\record.txt"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JFrame</span> jFrame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Container</span> container <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jButton<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jTextField<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>delete<span class="token punctuation">)</span><span class="token punctuation">;</span>        jButton<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        delete<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelAct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Action</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">DelAct</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BufferedWriter</span> bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileDir<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>time <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> jTextField<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BufferedWriter</span> bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileDir<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础（二）_排序查询、函数</title>
      <link href="/2020/06/12/mysql-ji-chu-er/"/>
      <url>/2020/06/12/mysql-ji-chu-er/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL基础二"><a href="#MySQL基础二" class="headerlink" title="MySQL基础二"></a>MySQL基础二</h1><h2 id="一、排序查询-ORDER："><a href="#一、排序查询-ORDER：" class="headerlink" title="一、排序查询 ORDER："></a>一、排序查询 ORDER：</h2><p>order by 数据以某列从高到低（默认）排序</p><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><ul><li>  asc升序</li><li>  desc降序</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*通过成绩排序*&#x2F;select * from student order by grade desc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、常用函数"><a href="#二、常用函数" class="headerlink" title="二、常用函数"></a>二、常用函数</h2><h3 id="1-字符函数"><a href="#1-字符函数" class="headerlink" title="1.字符函数"></a>1.字符函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">字符串长度select LENGTH(&#39;sam&#39;)&gt; 4字符串拼接select concat(&#39;sam&#39;,&#39;jack&#39;)&gt; samjack大小写select upper&#x2F;lower(&#39;john&#39;)&gt; JOHN分割select substr(&#39;awdjiojwdao&#39;,6)&gt; ojwdaoselect substr(&#39;awdjiojwdao&#39;,1,3)&gt; awd字符串匹配select instr(&#39;12312345&#39;,&#39;12345&#39;)&gt; 4去空格select trim(&#39;     hihihi &#39;);&gt; hihihi去其他字符(a)select trim(&#39;a&#39; from &#39;aaahihihi &#39;);&gt; hihihi指定字符填充指定长度select lpad&#x2F;rpad(&#39;myname&#39;,3,&#39;sam&#39;);&gt; sammyname&gt; mynamesam替换select replace (&#39;我我我你你你&#39;,&#39;我&#39;,&#39;你&#39;);&gt; 你你你你你你<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数学函数"><a href="#2-数学函数" class="headerlink" title="2.数学函数"></a>2.数学函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">四舍五入select round(-1.22)&gt; -1select round(-1.22,1)&gt; -1.2向上&#x2F;下取整ceil&#x2F;floor截断select truncate(1,69999,1)&gt; 1.6取余与%基本相同mod  a-a&#x2F;b*b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-日期函数"><a href="#3-日期函数" class="headerlink" title="3.日期函数"></a>3.日期函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">时间+日期select now();日期select curdata();时间select curtime();获取指定日期年select year(now());select month(now());select monthname(now());将日期格式的字符转换成指定格式的日期str_to_date();select str_to_date(&#39;1999-2-2&#39;,&#39;%Y-%c-%d&#39;);将日期转换成字符date_format();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>符号</p><p>意义</p><p>%Y</p><p>四位的年份</p><p>%y</p><p>2为的年份</p><p>%m</p><p>月份(01，…)</p><p>%c</p><p>月份(1,…)</p><p>%d</p><p>日</p><p>%H</p><p>小时（24）</p><p>%h</p><p>小时（12）</p><p>%i</p><p>分钟</p><p>%s</p><p>秒</p><h3 id="4-流程控制"><a href="#4-流程控制" class="headerlink" title="4.流程控制"></a>4.流程控制</h3><h4 id="if函数"><a href="#if函数" class="headerlink" title="if函数"></a>if函数</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select if(10&gt;5,&#39;大&#39;,&#39;小&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="case函数"><a href="#case函数" class="headerlink" title="case函数"></a>case函数</h4><p>mysql中</p><p>case(要判断的字段或表达式) when常量1then要显示的值1或语句1; when常量2then要显示的值2或语句2； else要显示的值n或语句n； end</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT salary, CASE WHEN salary&gt;20000 THEN AWHEN salary&gt;15000 THEN B WHEN salary&gt;10000 THEN C ELSE D END AS 工资级别FROM employees<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="以下为分组函数"><a href="#以下为分组函数" class="headerlink" title="以下为分组函数"></a>以下为分组函数</h3><p>（统计函数，聚合函数，组函数）即输出一个值</p><h3 id="1-几个基本数学函数"><a href="#1-几个基本数学函数" class="headerlink" title="1.几个基本数学函数"></a>1.几个基本数学函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">sum()avg()min()max()count()select sum(salary) from employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意参数支持类型，以及是否忽略null值</strong></p><h3 id="2-count函数用法（统计行数）"><a href="#2-count函数用法（统计行数）" class="headerlink" title="2.count函数用法（统计行数）"></a>2.count函数用法（统计行数）</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">统计salary行数select count(salary) from employees;统计所有行数select count(*) from employees;加一列，统计所有行数select count(1) from employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="效率："><a href="#效率：" class="headerlink" title="效率："></a>效率：</h4><p>MYISAM储存引擎下count(*)效率高；</p><p>INNODB储存引擎下count(*)与count(1)差不多；</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP模式匹配算法（Java）</title>
      <link href="/2020/06/12/kmp-mo-shi-pi-pei-suan-fa-java/"/>
      <url>/2020/06/12/kmp-mo-shi-pi-pei-suan-fa-java/</url>
      
        <content type="html"><![CDATA[<h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><p>难点在在于对next数组的构建中对前缀和后缀的匹配的理解。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>javaExamination</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> KMP <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> arr <span class="token operator">=</span> <span class="token string">"BBCABCAB ABCDAB"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> tar <span class="token operator">=</span> <span class="token string">"ABCDAB"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token function">kmpNext</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">kmpSear</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> tar<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kmpSear</span><span class="token punctuation">(</span><span class="token class-name">String</span> arr1<span class="token punctuation">,</span> <span class="token class-name">String</span> arr2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//从0开始遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> arr2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//按照部分匹配表向前寻找</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> arr2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> arr2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//如果找到了，那么肯定是i点到j点组成的闭区间的字符串匹配成功，所以返回i-j+1就是当前位置。</span>                <span class="token comment">//或者说，找到的时候，i肯定是在匹配成功的字符串的最后一个index，j因为是匹配字符串的长度，所以末尾位置-匹配字符串的长度+1就是匹配字符串在字符串中出现的位置。</span>                <span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">kmpNext</span><span class="token punctuation">(</span><span class="token class-name">String</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//开始搜索</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//i为后面的结点，j为前面的结点，如果i点和j点的值不一样，那么j向前寻找和i一样的值。这个涉及前后缀的寻找，之后画个图表示</span>            <span class="token comment">//核心点</span>            <span class="token comment">//如果不等于，那么j按照部分匹配表向前寻找，找到0或者找到相等为止</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> arr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> arr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra最短路径计算（Java）</title>
      <link href="/2020/06/12/dijkstra-zui-duan-lu-jing-ji-suan-java/"/>
      <url>/2020/06/12/dijkstra-zui-duan-lu-jing-ji-suan-java/</url>
      
        <content type="html"><![CDATA[<h2 id="Djstra最短路径算法"><a href="#Djstra最短路径算法" class="headerlink" title="Djstra最短路径算法"></a>Djstra最短路径算法</h2><p>这算是一个比较难的算法，很难描述</p><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>可以用来计算一个点到其他点之间的最短路径，速度很快。和弗洛伊德算法不同的是：弗洛伊德算法计算<strong>所有</strong>点之间的最短距离。</p><p>基本思路：</p><ol><li> 更新点 index 到其他点之间的距离。</li><li> 从 坐标0 开始向后for循环更新 ：坐标0到其他点的距离。并改变 点index 经过 坐标0到新点的距离。</li></ol><p>还不是很了解其中的各个过程，过段时间仔细看看。</p><p>代码可以运行，并且答案正确。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>javaExamination</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DjstraMapSearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> point <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Graph2</span> graph2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph2</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> dist<span class="token punctuation">)</span><span class="token punctuation">;</span>        graph2<span class="token punctuation">.</span><span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph2<span class="token punctuation">.</span><span class="token function">dsj</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph2<span class="token punctuation">.</span><span class="token function">showDJ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置图</span><span class="token keyword">class</span> <span class="token class-name">Graph2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> point<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">;</span>    <span class="token class-name">VisistedPoint</span> vv<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Graph2</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> point<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>point <span class="token operator">=</span> point<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>matrix <span class="token operator">=</span> matrix<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * show the Graph     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> links <span class="token operator">:</span>                matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>links<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * the main dsj function     *     * @param index the start point's index     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dsj</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VisistedPoint</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>length<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//update the distance of index to the point around and pre point</span>        <span class="token function">update</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> point<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> vv<span class="token punctuation">.</span><span class="token function">updateArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">update</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Recursive update the distance between the index point to the other points     * @param index     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            len <span class="token operator">=</span> vv<span class="token punctuation">.</span><span class="token function">getDis</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> matrix<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vv<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> len <span class="token operator">&lt;</span> vv<span class="token punctuation">.</span><span class="token function">getDis</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//更新前驱节点和距离</span>                vv<span class="token punctuation">.</span><span class="token function">updatePre</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                vv<span class="token punctuation">.</span><span class="token function">updateDis</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * show the result     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showDJ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vv<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * the class is about the Point which has been visited * and the method which a point can use */</span><span class="token keyword">class</span> <span class="token class-name">VisistedPoint</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> already_arr<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre_visited<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist<span class="token punctuation">;</span>    <span class="token comment">/**     * init the index point     * @param length     * @param index     */</span>    <span class="token keyword">public</span> <span class="token class-name">VisistedPoint</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>already_arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pre_visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//初始化这个起始结点已经被访问过</span>        already_arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//Init the Point.Each of them can't be reached</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span> <span class="token number">65535</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Set the distance of start point to itself</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dist<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//</span>        <span class="token keyword">return</span> already_arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * update the distance between two points     *     * @param index the point need to update     * @param len     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateDis</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dist<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * update the point[pre]'s pre point to point[index]     *     * @param index     * @param pre     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updatePre</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> pre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pre_visited<span class="token punctuation">[</span>pre<span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * get the distance (start) -> (index)     *     * @param index     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDis</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> dist<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * update the next point need to recursive     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> already_arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>already_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                min <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//set a new start point</span>                index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        already_arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * show the result     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> already_arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span>                pre_visited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span>                dist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的前、中、后序遍历（Java）</title>
      <link href="/2020/06/10/shu-de-qian-zhong-hou-xu-bian-li-java/"/>
      <url>/2020/06/10/shu-de-qian-zhong-hou-xu-bian-li-java/</url>
      
        <content type="html"><![CDATA[<h2 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>javaExamination</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryTree</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//create a tree in main function</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Tree</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BinaryHeroNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryHeroNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BinaryHeroNode</span> node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryHeroNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"jjiji"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BinaryHeroNode</span> node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryHeroNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"jacaweq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BinaryHeroNode</span> node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryHeroNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"sam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>node2<span class="token punctuation">)</span><span class="token punctuation">;</span>        node2<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>node3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用根节点进行遍历</span>        root<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用树进行遍历</span>        tree<span class="token punctuation">.</span><span class="token function">setRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从结果来看是一样的，但是从树来说更方便，更方便管理</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 设置树 */</span><span class="token keyword">class</span> <span class="token class-name">Tree</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BinaryHeroNode</span> root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> setRoot <span class="token punctuation">(</span><span class="token class-name">BinaryHeroNode</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">midOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">midOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lastOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">lastOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 结点类，设置结点信息，结点方法 */</span><span class="token keyword">class</span> <span class="token class-name">BinaryHeroNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BinaryHeroNode</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BinaryHeroNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">BinaryHeroNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">BinaryHeroNode</span> <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeft</span><span class="token punctuation">(</span><span class="token class-name">BinaryHeroNode</span> left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">BinaryHeroNode</span> <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRight</span><span class="token punctuation">(</span><span class="token class-name">BinaryHeroNode</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"[no"</span> <span class="token operator">+</span> no <span class="token operator">+</span> <span class="token string">"name = "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">midOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lastOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找（Java）</title>
      <link href="/2020/06/10/er-fen-cha-zhao-java/"/>
      <url>/2020/06/10/er-fen-cha-zhao-java/</url>
      
        <content type="html"><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>即拿即用Java代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>javaExamination</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HalfSear</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> half <span class="token operator">=</span> <span class="token class-name">Half</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>half<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">Half</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> finalVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span> midindex <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>midindex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> finalVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//右边进行递归</span>            <span class="token keyword">return</span> <span class="token class-name">Half</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> midindex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> finalVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>midindex<span class="token punctuation">]</span> <span class="token operator">></span> finalVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//左边进行递归</span>            <span class="token keyword">return</span> <span class="token class-name">Half</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> midindex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> finalVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> midindex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺时针输出矩阵（Java）</title>
      <link href="/2020/06/09/shun-shi-zhen-shu-chu-ju-zhen-java/"/>
      <url>/2020/06/09/shun-shi-zhen-shu-chu-ju-zhen-java/</url>
      
        <content type="html"><![CDATA[<h2 id="顺时针输出矩阵"><a href="#顺时针输出矩阵" class="headerlink" title="顺时针输出矩阵"></a>顺时针输出矩阵</h2><p><img src="http://lanyun1103.top/wp-content/uploads/2020/06/jianzhi_29_fig1.png"></p><p>看了leetcode官方的图以后就一目了然了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>leetcode</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token operator">==</span>nullmatrix<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>matrix<span class="token punctuation">.</span>length <span class="token operator">*</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left_board <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right_board <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> down <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//一圈一圈的循环输出，直到左右、上下边界交叉</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left_board <span class="token operator">&lt;=</span> right_board <span class="token operator">&amp;&amp;</span> up <span class="token operator">&lt;=</span> down<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> left_board<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> right_board<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                order<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>up<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> up <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> down<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                order<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right_board<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left_board <span class="token operator">&lt;</span> right_board <span class="token operator">&amp;&amp;</span> up <span class="token operator">&lt;</span> down<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> right_board <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> left_board<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    order<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>down<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> down<span class="token punctuation">;</span> i <span class="token operator">></span> up<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    order<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>up<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            left_board<span class="token operator">++</span><span class="token punctuation">;</span>            right_board<span class="token operator">--</span><span class="token punctuation">;</span>            up<span class="token operator">++</span><span class="token punctuation">;</span>            down<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> order<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制转换（Java）</title>
      <link href="/2020/06/09/jin-zhi-zhuan-huan-java/"/>
      <url>/2020/06/09/jin-zhi-zhuan-huan-java/</url>
      
        <content type="html"><![CDATA[<p><img src="http://lanyun1103.top/wp-content/uploads/2020/06/345F7B135IRQ3APVAF4.png"></p><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>这个没意思，2进制和8进制对于代码的要求很低，按照这个原理就可以，很基础的题目。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>javaExamination</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackI</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入需要转换什么进制:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> type <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入需要转换多少位的数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入需要转换的数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//压入栈</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    temp <span class="token operator">+=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    temp <span class="token operator">+=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//其他进制转换也是这个道理，10进制以上需要在switch里面加入对ABCDEF的判断，不写了洗洗睡了</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弗洛伊德最短路径查找（Java）</title>
      <link href="/2020/06/09/fu-luo-yi-de-zui-duan-lu-jing-cha-zhao-java/"/>
      <url>/2020/06/09/fu-luo-yi-de-zui-duan-lu-jing-cha-zhao-java/</url>
      
        <content type="html"><![CDATA[<h2 id="弗洛伊德算法"><a href="#弗洛伊德算法" class="headerlink" title="弗洛伊德算法"></a>弗洛伊德算法</h2><p>算是图中比较简单的一种算法</p><p>思路基本为：</p><ul><li>  第一层循环对中间结点进行遍历，即——遍历寻找以k点为中间结点的路径</li><li>  第二、三层循环对起、终结点进行遍历，寻找经过k的最短路径，如果比之前的路路径短，则将原来（初始）的条件替换成新的路径长度（dist）。并修改最短路径信息（pre）。</li><li>  输出这里是个比较烦人的，做不到对齐，懒得做了。嗐。。。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>javaExamination</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FolydMapSearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> point <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>length<span class="token punctuation">,</span> dist<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用算法查找前："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">graph<span class="token punctuation">.</span></span>Floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查找后:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">InitMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> point<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> point<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>point <span class="token operator">=</span> point<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dist <span class="token operator">=</span> dist<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> dist<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dist<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>point<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"               "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dist<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token class-name">N</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> point<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"到"</span> <span class="token operator">+</span> point<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">")   不可达  "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> point<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"到"</span> <span class="token operator">+</span> point<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">")的距离为"</span> <span class="token operator">+</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//对中间顶点遍历，遍历从k经过的顶点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> dist<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dist<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> dist<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    len <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">;</span>                        pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>希尔排序（Java）</title>
      <link href="/2020/06/08/xi-er-pai-xu-java/"/>
      <url>/2020/06/08/xi-er-pai-xu-java/</url>
      
        <content type="html"><![CDATA[<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>这里只有算法，没有调试，即拿即用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>javaExamination</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HillSort</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 对arr进行交换希尔排序     *     * @param arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">HillSortInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//插入希儿排序比较简单，只需要对数组一个一个切割，对每一个小数组里面进行交换排序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>                        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对arr进行插入希尔排序     * gap代表间隔     * 尚硅谷的代码真的很垃圾了，这个姓韩的老师第几个元素都说不清楚     *     * @param arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">HillSortQ</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> gap <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//从第gap+1个元素开始，向后一个一个遍历</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//储存位置</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token comment">//储存j位置的值</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">//向前遍历，寻找插入的点（temp > j前面gap距离的点 ）</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>                    j <span class="token operator">-=</span> gap<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//如果找到位置，就插入到这个位置</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础（一）_连接、选择、查找数据库</title>
      <link href="/2020/06/07/mysql-ji-chu-yi/"/>
      <url>/2020/06/07/mysql-ji-chu-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p><img src="http://lanyun1103.top/wp-content/uploads/2020/06/QQ%E6%88%AA%E5%9B%BE20200607235412.png"></p><h2 id="一、使用"><a href="#一、使用" class="headerlink" title="一、使用"></a>一、使用</h2><h3 id="1-连接"><a href="#1-连接" class="headerlink" title="1.连接"></a>1.连接</h3><p>为了连接到 MySQL，需要以下信息</p><ul><li>  主机名（计算机名）——如果连接到本地 MySQL服务器，为localhost；</li><li>  端口（如果使用默认端口3306之外的端口）；</li><li>  一个合法的用户名；</li><li>  用户口令（如果需要）。</li></ul><h3 id="2-选择数据库"><a href="#2-选择数据库" class="headerlink" title="2.选择数据库"></a>2.选择数据库</h3><p>例如，为了使用 crashcourse数据库，应该输入以下内容</p><p>USE crashcourse</p><p><strong>记住，必须先使用UsE打开数据库，才能读取其中的数据。</strong></p><h3 id="3-读出数据库和表"><a href="#3-读出数据库和表" class="headerlink" title="3.读出数据库和表"></a>3.读出数据库和表</h3><p>数据库、表、列、用户、权限等的信息被存储在数据库和表中（ MySQL使用 MySQL来存储这些信息）。不过，内部的表一般不直接访问。可用MySQL的SHOW命令来显示这些信息（ MySQL从内部表中提取这些信息）。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW DATABASES;返回可用数据库的一个列表。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW TABLES;返回当前选择的数据库内可用表的列表。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>SHOW can do some other things, for example checking ERRORS or GRANTS.</p><h2 id="二、查找数据"><a href="#二、查找数据" class="headerlink" title="二、查找数据"></a>二、查找数据</h2><h3 id="1-基础语句"><a href="#1-基础语句" class="headerlink" title="1.基础语句"></a>1.基础语句</h3><p>SELECT语句，它的用途是从一个或多个表中检索信息</p><p>为了使用SELECT检索表数据，必须至少给出两条信息——想选择什么，以及从什么地方选择。</p><h3 id="2-如何检索"><a href="#2-如何检索" class="headerlink" title="2.如何检索"></a>2.如何检索</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT prod_name FROM products<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述语句利用 SELECT语句从 products表中检索一个名为prod name的列。所需的列名在 SELECT关键字之后给出，FROM关键字指出从其中检索数据的表名。</p><p>注意：</p><ol><li> 多条SQL语句必须以分号（；）分隔</li><li> SQL语句不区分大小写</li><li> 在处理SQL语句时，其中所有空格都被忽略</li></ol><h3 id="3-检索多列"><a href="#3-检索多列" class="headerlink" title="3.检索多列"></a>3.检索多列</h3><p>要想从一个表中检索多个列，使用相同的SELECT语句。唯一的不同是必须在SELECT关键字后给出多个列名，列名之间必须以逗号分隔</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT prod_id, prod_name, prod _price FROM productsSELECT CONCAT(prod_id,prod_name,prod_price) FROM products&#x2F;*连接字符串*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>+号只能用于数值运算，与java不同，不能用于字符串连接</p><h3 id="4-检索所有"><a href="#4-检索所有" class="headerlink" title="4.检索所有"></a>4.检索所有</h3><p>这可以通过在实际列名的位置使用星号（*）通配符来达到</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT x FROM products<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-检索不同行"><a href="#5-检索不同行" class="headerlink" title="5.检索不同行"></a>5.检索不同行</h3><p>使用DISTINCT关键字，顾名思义，此关键字指示MySQL只返回不同的值</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT DISTINCT vend id FROM products<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-限制结果行数"><a href="#6-限制结果行数" class="headerlink" title="6.限制结果行数"></a>6.限制结果行数</h3><p>LIMIT 5指示MySQL返回不多于5行</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT prod_ name FROM products LIMIT 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>LIMIT 5, 5指示MySQL返回从行5开始的5行。第一个数为开始位置，第二个数为要检索的行数</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT prod_ name FROM products LIMIT 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-完全限定的表名"><a href="#7-完全限定的表名" class="headerlink" title="7.完全限定的表名"></a>7.完全限定的表名</h3><p>从 products 数据表中选取 prod_name 列</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT products. prod_name FROM products<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-结果使用别名筛选"><a href="#8-结果使用别名筛选" class="headerlink" title="8.结果使用别名筛选"></a>8.结果使用别名筛选</h3><p>输出时使用别名</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last_name As 姓, first_name AS 名 FROM employees；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、条件查找"><a href="#三、条件查找" class="headerlink" title="三、条件查找"></a>三、条件查找</h2><h3 id="1-WHERE条件查询"><a href="#1-WHERE条件查询" class="headerlink" title="1.WHERE条件查询"></a>1.WHERE条件查询</h3><p>WHERE关键字筛选符合条件的信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT prod_name FROM products WHERE prod_price&gt;10000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>包含条件运算符 &gt; &lt; =</p><p>包含逻辑运算符</p><p>&amp;&amp; !</p><p>包含模糊运算符:</p><ul><li>  like</li><li>  is null</li><li>  is not null</li><li>  between and</li><li>  in</li><li>  &lt;=&gt; 安全等于，可以判断NULL和普通的数值</li><li>  &lt;&gt; 安全不等于</li></ul><p>通配符：</p><p>% 任意多个字符</p><p>_ 任意单个字符</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*查询名字中带有a的人名*&#x2F;SELECT prod_name FROM products LIKE &#39;%a%&#39;&#x2F;**&#x2F;SELECT prod_price FROM products BETWEEN 100 AND 120<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序（Java）</title>
      <link href="/2020/06/06/dui-pai-xu-java/"/>
      <url>/2020/06/06/dui-pai-xu-java/</url>
      
        <content type="html"><![CDATA[<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>用了大佬的代码</p><p><a href="https://www.cnblogs.com/chengxiao/p/6129630.html"></a><a href="https://www.cnblogs.com/chengxiao/p/6129630.html">https://www.cnblogs.com/chengxiao/p/6129630.html</a></p><p>可算是终于理解了</p><h2 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h2><ol><li> 对于一个无序的二叉树，首先把他调整为大顶堆使用 adjustHeap()</li><li> 调整完成后这时二叉树是一个大顶堆，把他的[0]位调整到最后 heapSort()，，调整后二叉树可能不是大顶堆，于是递归进行重新调整 adjustHeap()，并且length–，视为最后一个元素与数组断开联系；</li><li> 如此重复第二步，直到最后面的、需要调整的节点的index的值为0</li><li> 如此循环，得到顺序的二叉树。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 堆排序演示 * * @author Lvan */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">heapSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 创建     * @param arr 待排序列     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建堆（初始化堆），产生一个大顶堆</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//从第一个非叶子结点从下至上，从右至左调整结构</span>            <span class="token comment">//这里比较难以理解，i的初始值是最后一个非叶子节点，即从最后一个非叶子节点开始往上创建大顶堆</span>            <span class="token comment">//原因是大顶堆的创建是从上往下遍历的，如果这里从0结点开始从上往下遍历，可能会导致遍历过的子树因为下面的结点创建大顶堆的过程而不满足大顶堆的条件。</span>            <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//交换堆顶元素与末尾元素 + 调整堆结构 </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//将堆顶元素与末尾元素进行交换</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token comment">//因为把最后面的元素放到了最上面，所以从上到下，从左到右，重新对堆进行调整</span>            <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 调整堆     * @param arr 待排序列     * @param parent 父节点     * @param length 待排序列尾元素索引     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adjustHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将temp作为父节点</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//左孩子</span>        <span class="token keyword">int</span> lChild <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> parent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>lChild <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//右孩子</span>            <span class="token keyword">int</span> rChild <span class="token operator">=</span> lChild <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// 如果有右孩子结点，并且右孩子结点的值大于左孩子结点，则选取右孩子结点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rChild <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>lChild<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>rChild<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lChild<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 如果父结点的值已经大于孩子结点的值，则直接结束</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">>=</span> arr<span class="token punctuation">[</span>lChild<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 把孩子结点的值赋给父结点</span>            arr<span class="token punctuation">[</span>parent<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>lChild<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//选取孩子结点的左孩子结点,继续向下筛选</span>            parent <span class="token operator">=</span> lChild<span class="token punctuation">;</span>            lChild <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> lChild <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        arr<span class="token punctuation">[</span>parent<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八皇后算法（Java）</title>
      <link href="/2020/06/06/ba-huang-hou-suan-fa-java/"/>
      <url>/2020/06/06/ba-huang-hou-suan-fa-java/</url>
      
        <content type="html"><![CDATA[<h2 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h2><p>经典的回溯问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        test test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test1<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**    *    *   回溯母体    */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">check</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//判断第n个皇后可以放在第几列</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>顺序查找（Java）</title>
      <link href="/2020/06/05/shun-xu-cha-zhao-java/"/>
      <url>/2020/06/05/shun-xu-cha-zhao-java/</url>
      
        <content type="html"><![CDATA[<h3 id="一堆算法题里面冒出一个顺序查找"><a href="#一堆算法题里面冒出一个顺序查找" class="headerlink" title="一堆算法题里面冒出一个顺序查找"></a>一堆算法题里面冒出一个顺序查找</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>javaExamination</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShunSear</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> tar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> tar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">231</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">search</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序算法（Java）</title>
      <link href="/2020/06/05/kuai-su-pai-xu-suan-fa-java/"/>
      <url>/2020/06/05/kuai-su-pai-xu-suan-fa-java/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>下面针对尚硅谷课程中出现的代码进行逐行分析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//从主函数获得 数组数据  最左坐标，左右坐标</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token comment">//保存参数</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token punctuation">(</span>right<span class="token operator">+</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//使用取中位数方法获得pivot</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>        <span class="token comment">//temp后面用于交换数组元素</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;</span>pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                l<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//寻找pivot左边的元素大于pivot的数，找到后停止，否则一直l++；</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">></span>pivot<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//寻找pivot右边的元素小于pivot的数，找到后停止，否则一直r++；</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//这一个条件可能发生在两边已经有序的情况下，这种时候是两边都找不到对应的情况，退出循环</span>            temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token comment">//交换数组元素——左边大于pivot的元素 与 右边小于pivot的元素 进行交换</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">==</span>pivot<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                l<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>pivot<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">/**             尚硅谷这个代码真的很难理解这一块，这个老师什么都没有解释，            自己写了半天，用了两个例子&#123;1,2,3,2,1,2,4&#125;，&#123;1,2,3,2,1,1,4&#125;，debug中了解到如果不加入这两个判断，那么l和r都指向一个值(假设是x，这个x==pivot时)，那么nums[l] nums[r]就会无限重复互相交换值，所以加入这个判断是为了将l和r的指向错开，不加很大概率会进入死循环。            **/</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            l<span class="token operator">++</span><span class="token punctuation">;</span>            r<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//避免l，r相等，错开lr</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>left<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">></span>l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//两个递归，对左右分别继续进行快速排序</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">421</span><span class="token punctuation">,</span><span class="token number">421</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">312</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> cur <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lingo_储存罐模型</title>
      <link href="/2020/06/04/lingo-chu-cun-guan-mo-xing/"/>
      <url>/2020/06/04/lingo-chu-cun-guan-mo-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>储存罐注入 5 艘油船抵达了一个化工厂。这些油船中装有液体载荷，这些液体不允许混合： 1200 吨苯，700 立方米丁醇，1000 立方米丙醇，450 立方米苯乙烯，1200 立方米四氢呋喃（THF）。在此化工厂里有九个不同大小的存储罐。有一些存储罐已经装有一些液体。下表列出了每储存罐的属性（单位为吨）。应将这些船中装载的液体分别装载到哪个储存罐中才能使未使用的储存罐容量最大（问题1），或怎样才能使保留未用的储存罐数目最多？</p><p><img src="http://lanyun1103.top/wp-content/uploads/2020/06/QQ%E6%88%AA%E5%9B%BE20200604112922.png"></p><h3 id="解析思路："><a href="#解析思路：" class="headerlink" title="解析思路："></a>解析思路：</h3><p>首先要知道已经放了液体的罐子不能再放入其他液体，那么2和7首先应该排除，并且减去相应的液体体积。 使用用 表示已经用了的罐子，用@bin做一个0-1变量（限制x）,其中 的下标表示第i个液体装进第j个储存罐。 并且一个由于罐子里面只能装一种液体，所以使用第j个罐子这一列 必须小于等于1来表示。了解这个以后接下来就比较简单，两题的思路基本一致，难点在于对 的限制。 准备工作 对模型进行参数设定，设置两个用来表示液体体积和储存罐容积的列表；和两个用来创建二维列表的wid和len，创建x二维列表。然后对v和c在data中进行赋值。</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>对第j个储存罐不能装不同样液体的限制 这一步对j不做限制，所以即是对1&lt;=j&lt;=7做7次内部循环，每一次循环表示 不能大于1，意思很显然就是j这个罐子不能两次用于加入液体: （想了很久才想出来怎么描述）</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>这一步对 这个二维向量使用@bin进行限制—— 向量是一个0-1向量，</p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>对总重量进行描述，即所有已经放入液体的储存罐容积总和必须大于等于所有的液体的体积 （想了一下 作为0-1变量如果储存罐不满会怎么样，可能会大于所有的容积，但是这一步不需要，因为储存罐放不了其他的液体）</p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>其实对描述需要求得的变量就变得非常简单，那么就是所有的罐子容积加起来的容积，减去已经用了的储存罐的容积，就是剩下来的那个储存罐的容积</p><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>第二问：思路和第一问基本一致，只需要求 的最小值即可</p><h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><p>通过结果得知，最优解为I,j的排列有17,26,32,34,41,53。即1液体放入7罐子，即2液体放入6罐子，3液体放入2罐子，即3液体再放入4罐子，4液体放入1罐子，5液体放入3罐子。所以剩下的罐子为5罐子，容积刚好和结果一样为600立方米。 第二问和第一问基本相同，不赘述。</p><h3 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h3><pre class="line-numbers language-none"><code class="language-none">第一问：model:sets:weight &#x2F;1..5&#x2F; :v;cap &#x2F;1..7&#x2F; :c;wid&#x2F;1..5&#x2F;:;len&#x2F;1..7&#x2F;:;link(wid,len):x;endsetsdata:v &#x3D; 900,700,1000,450,700;c &#x3D; 500,400,800,600,600,800,900;enddata@for(link:@bin(x));@for(cap(j):@sum(weight(i):x(i,j)) &lt;&#x3D; 1);@for(weight(i):@sum(cap(j):c(j)*x(i,j)) &gt;&#x3D; v(i));MAX &#x3D; @sum(len(i):c(i))-@sum(link(i,j):c(j)*x(i,j));End第二问：model:sets:weight &#x2F;1..5&#x2F; :v;cap &#x2F;1..7&#x2F; :c;wid&#x2F;1..5&#x2F;:;len&#x2F;1..7&#x2F;:;link(wid,len):x;endsetsdata:v &#x3D; 900,700,1000,450,700;c &#x3D; 500,400,800,600,600,800,900;enddata@for(weight(i):@sum(cap(j):c(j)*x(i,j)) &gt;&#x3D; v(i));@for(cap(j):@sum(weight(i):x(i,j)) &lt;&#x3D; 1);@for(link:@bin(x));MAX &#x3D; 7-@sum(link(i,j):x(i,j));end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果不在博客放出来了，现在网上没有任何关于这道题的lingo代码，这算是第一个公开的吧</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表（HashMap）（Java）</title>
      <link href="/2020/06/03/java-ha-xi-biao/"/>
      <url>/2020/06/03/java-ha-xi-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="哈希表（散列表）"><a href="#哈希表（散列表）" class="headerlink" title="哈希表（散列表）"></a>哈希表（散列表）</h2><p>可算是写出来了</p><p>只做了简单的添加和查找，算是满足了期末大作业的要求吧</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>其实理解了就比较简单了，根本的原理其实就是用一个数组管理链表，按照特定的方法把数据放在某个数组中。 因为默认是放在第一个，所以如果数组很大，那么可以通过直接访问地址直接取出元素。即使数组很小，那么也可以通过遍历链表快速的找出元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace<span class="token punctuation">.</span>algorithm</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashTableDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashTab</span> hashTab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashTab</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashTab<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashTab<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"sam"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashTab<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"jac"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashTab<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"jac"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashTab<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"jac"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashTab<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"jac"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashTab<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"jac"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashTab<span class="token punctuation">.</span><span class="token function">findStu</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashTab<span class="token punctuation">.</span><span class="token function">findStu</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashTab<span class="token punctuation">.</span><span class="token function">findStu</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashTab<span class="token punctuation">.</span><span class="token function">findStu</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashTab<span class="token punctuation">.</span><span class="token function">findStu</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HashTab</span><span class="token punctuation">&#123;</span>    <span class="token comment">//哈希表的代码</span>    <span class="token keyword">private</span> <span class="token class-name">LinkedList</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">LinkedListArray</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token class-name">Size</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HashTab</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">Size</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">LinkedListArray</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">[</span><span class="token class-name">Size</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">this<span class="token punctuation">.</span></span>Size</span> <span class="token operator">=</span> <span class="token class-name">Size</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Size</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LinkedListArray</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Student</span> stu<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过取模法得到结点应该插入到哪一条链表</span>        <span class="token keyword">int</span> stuLinkedListNo <span class="token operator">=</span> <span class="token function">hashMoSec</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对某一条链表进行add操作</span>        <span class="token class-name">LinkedListArray</span><span class="token punctuation">[</span>stuLinkedListNo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//对哈希表遍历每一条链表输出</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Size</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">LinkedListArray</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//散列函数采用取模法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashMoSec</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id <span class="token operator">%</span> <span class="token class-name">Size</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findStu</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> stuLinkedListNo <span class="token operator">=</span> <span class="token function">hashMoSec</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token class-name">LinkedListArray</span><span class="token punctuation">[</span>stuLinkedListNo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findStu</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>student <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"在第%d链表找到了雇员%d:%s\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>stuLinkedListNo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token punctuation">&#123;</span>    <span class="token comment">//链表的代码</span>    <span class="token keyword">private</span> <span class="token class-name">Student</span> head<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Student</span> stu<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            head <span class="token operator">=</span> stu<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Student</span> curStudent <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curStudent<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            curStudent <span class="token operator">=</span> curStudent<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        curStudent<span class="token punctuation">.</span>next <span class="token operator">=</span> stu<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前链表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始排列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> curStu <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curStu<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            curStu <span class="token operator">=</span> curStu<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"遍历完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">findStu</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表是空的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Student</span> curStu <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curStu<span class="token punctuation">.</span>id<span class="token operator">==</span>id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curStu<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                curStu <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            curStu <span class="token operator">=</span> curStu<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> curStu<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java贪心算法——背包问题</title>
      <link href="/2020/06/01/java-tan-xin-suan-fa-bei-bao-wen-ti/"/>
      <url>/2020/06/01/java-tan-xin-suan-fa-bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><img src="http://lanyun1103.top/wp-content/uploads/2020/06/QQ%E6%88%AA%E5%9B%BE20200601200552.png"></p><h1 id="贪心算法实现背包问题（非0-1背包）"><a href="#贪心算法实现背包问题（非0-1背包）" class="headerlink" title="贪心算法实现背包问题（非0-1背包）"></a>贪心算法实现背包问题（非0-1背包）</h1><p>本代码实现自己输入参数，还是比较。。。嗐。。基础的</p><p>思路就是算出性价比从高到低（我这个代码排序反了所以后面下标也是反着用的），然后依照排序前的下标得出放入物体的先后次序。</p><p>目前还没有改良如果性价比相同情况下存在两个重量不相等的物品如何存放。</p><p>就这样吧，儿童节写了个比较孩子气的题目hhh</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">workplace</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test2<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//自定义参数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入背包载重量："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入有几个物体："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化两个大小为n的数组存放重量和价值</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入物体重量："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入对应价值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//计算性价比</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ifv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> indexs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ifv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1.0</span><span class="token operator">/</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            indexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//记录性价比的下标，和性价比同时进行排序</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span> temp<span class="token punctuation">;</span>        <span class="token keyword">int</span> indexer<span class="token punctuation">;</span>        <span class="token comment">//对性价比和下标同时排序，此时性价比最高的在ifv中下标是0</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ifv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>ifv<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    temp <span class="token operator">=</span> ifv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    ifv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ifv<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    ifv<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    indexer <span class="token operator">=</span> indexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    indexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>indexs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    indexs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> indexer<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span> maxValues <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>weights<span class="token punctuation">[</span>indexs<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                maxValues <span class="token operator">+=</span> values<span class="token punctuation">[</span>indexs<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加入了重量为 "</span> <span class="token operator">+</span> weights<span class="token punctuation">[</span>indexs<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" 的物品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加入了价值为 "</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>indexs<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" 的物品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">M</span> <span class="token operator">-=</span> weights<span class="token punctuation">[</span>indexs<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总价值为"</span> <span class="token operator">+</span> maxValues<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        test2 demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://lanyun1103.top/wp-content/uploads/2020/06/QQ%E5%9B%BE%E7%89%8720200601201002.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在html中使用LaTeX公式</title>
      <link href="/2020/05/31/ru-he-zai-html-zhong-shi-yong-latex-gong-shi/"/>
      <url>/2020/05/31/ru-he-zai-html-zhong-shi-yong-latex-gong-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="在html中插入LaTeX的script标签"><a href="#在html中插入LaTeX的script标签" class="headerlink" title="在html中插入LaTeX的script标签"></a>在html中插入LaTeX的script标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>MathJax TeX Test Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/x-mathjax-config<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">            MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>tex2jax<span class="token operator">:</span> <span class="token punctuation">&#123;</span>inlineMath<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'$'</span><span class="token punctuation">,</span><span class="token string">'$'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'\\('</span><span class="token punctuation">,</span><span class="token string">'\\)'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span>            <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">            </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        When $a \ne 0$, there are two solutions to \(ax^2 + bx + c = 0\) and they are        $$x = &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;.$$        $$ y^2 = x^2+2$$        $$ y \over x $$    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 注意这里的script还得对mathjax进行一些配置，否则无法在网页中显示一些行中公式 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官网的地址是 <a href="https://www.mathjax.org/"></a><a href="https://www.mathjax.org/">https://www.mathjax.org/</a></p><p>如何使用基本在这个位置 <a href="https://www.mathjax.org/#gettingstarted"></a><a href="https://www.mathjax.org/#gettingstarted">https://www.mathjax.org/#gettingstarted</a></p><p>如果看不懂可以先翻译再看</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX常用公式（自用）</title>
      <link href="/2020/05/31/latex-chang-yong-gong-shi-zi-yong/"/>
      <url>/2020/05/31/latex-chang-yong-gong-shi-zi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h1><h2 id="一些比较常用的latex公式语句"><a href="#一些比较常用的latex公式语句" class="headerlink" title="一些比较常用的latex公式语句"></a>一些比较常用的latex公式语句</h2><p>本博客不支持latex代码 只能把代码放在这里</p><pre class="line-numbers language-none"><code class="language-none">%导言区\documentclass&#123;report&#125;\usepackage&#123;ctex&#125;\usepackage&#123;amssymb&#125;\usepackage&#123;amsmath&#125;\author&#123;lanyun&#125;\date&#123;\today&#125;%引入ctex弘包，包含了大部分常用%amssymb包含逻辑——因为、所以%amsmath包含一些必要的数学，包括多重积分等等等\title&#123;Myfirst&#125;\author&#123;lanyun&#125;\date&#123;\today&#125;\begin&#123;document&#125;    \chapter&#123;数学公式&#125;    \section&#123;行内公式&#125;    \subsection&#123;美元符号&#125;    $3x^2+5&#x3D;3$    \subsection&#123;小括号&#125;    \(3x^2+5&#x3D;3\)    \subsection&#123;math环境&#125;    \begin&#123;math&#125;        3x^2+5&#x3D;3    \end&#123;math&#125;    \section&#123;上下标&#125;    $3x^&#123;20&#125;+5&#x3D;3$    \section&#123;希腊字母&#125;    \section&#123;数学函数&#125;    $\log$    $\sin$    $\cos$    $\arccos$    $\ln$    \section&#123;分式&#125;    $$ \frac&#123;3&#125;&#123;4&#125; $$    $$ 3 \over 4 $$    \section&#123;极限&#125;     $$     \lim_&#123;x \to \infty&#125; \frac &#123;1&#125;&#123;n(n+1)&#125;     $$     $$     \lim_&#123;n \to \infty&#125;x_n     $$    \section&#123;微分和导数&#125;、    $$ dt $$    $$ \mathrm&#123;d&#125;y&#x2F;\mathrm&#123;d&#125;x $$    $$     dt,     \mathrm&#123;d&#125;t,     \partial t,     \nabla\psi    $$    $$    \int_&#123;-N&#125;^&#123;N&#125; e^x\, &#123;\rm d&#125;x    $$    $$    \iint_&#123;D&#125;^&#123;W&#125; \, \mathrm&#123;d&#125;x\,\mathrm&#123;d&#125;y    $$    $$    \iiint_&#123;E&#125;^&#123;V&#125; \, \mathrm&#123;d&#125;x\,\mathrm&#123;d&#125;y\,\mathrm&#123;d&#125;z    $$    \section&#123;根号&#125;    $$    \surd,     \sqrt&#123;2&#125;,    \sqrt[n]&#123;&#125;,     \sqrt[3]&#123;\frac&#123;x^3+y^3&#125;&#123;2&#125;&#125;    $$    \section&#123;运算符&#125;    $$    +, -, \pm, \mp,    $$    $$    \times, \div, &#x2F;, \backslash    $$    $$    \cdot, * \ast, \star, \circ, \bullet    $$       \section&#123;逻辑符号&#125;    $$    \forall, \exists    $$    $$    \therefore,\because    $$    \section&#123;箭头&#125;    $$    \Rightarrow, \nRightarrow, \Longrightarrow    $$    $$    \Leftarrow, \nLeftarrow, \Longleftarrow    $$    $$    \Leftrightarrow, \nLeftrightarrow, \Longleftrightarrow \iff    $$    \section&#123;导数&#125;    $$    x&#39;, x^\prime    $$    \section&#123;向量&#125;    $$    \overleftarrow&#123;a b&#125;, \overrightarrow&#123;a b&#125;    $$    \section&#123;求和&#x2F;累积&#125;    $$    \sum_&#123;k&#x3D;1&#125;^N k^2, \prod_&#123;i&#x3D;1&#125;^N x_i    $$\end&#123;document&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习日历_521</title>
      <link href="/2020/05/26/xue-xi-ri-li-521/"/>
      <url>/2020/05/26/xue-xi-ri-li-521/</url>
      
        <content type="html"><![CDATA[<h2 id="常微分方程"><a href="#常微分方程" class="headerlink" title="常微分方程"></a>常微分方程</h2><ol><li> 线性方程组的复值解</li><li> 常系数其次方程组的基本解矩阵</li></ol><h2 id="matlab和常微分方程结合的使用"><a href="#matlab和常微分方程结合的使用" class="headerlink" title="matlab和常微分方程结合的使用"></a>matlab和常微分方程结合的使用</h2><ol><li> 学习simbiology(matlab插件)： 大概是知道了怎么用，应该对igem作用是很明显的，去年不知道为什么没有用这个很简单的东西</li><li> 生物学上几个比较常用的公式： 希尔公式（s曲线，对于反应平衡来说很重要） MM公式</li><li> 画了几个常微分方程的模型 大概了解： 简单的常微分方程可以通过ode45/ode23求解可以得到<strong>数值解</strong>，ode45(f,span,v)； f是必须方程，如果是方程组通过脚本文件（.m）创建返回方程组的函数，因为方程组必须是向量形式；span是范围；v是自变量（默认是t） 比较复杂的符号函数常微分方程（组）通过dsolve求解可以得到<strong>解析解</strong>，使用方法dsolve(e1,e2,…,en,c1,c2,…cn,v) e1-en是方程，可以用单引号括起来；c1-cn是初始条件；v是自变量 解析解的范围比较广，是所有满足常微分方程的解的集合一般通过公式计算； 数值解就是一个值，满足常微分方程，一般通过一些所给的条件求得； 高阶微分方程化为低阶再进行；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Matlab_符号计算</title>
      <link href="/2020/05/18/matlab-fu-hao-ji-suan/"/>
      <url>/2020/05/18/matlab-fu-hao-ji-suan/</url>
      
        <content type="html"><![CDATA[<h1 id="符号计算"><a href="#符号计算" class="headerlink" title="符号计算"></a>符号计算</h1><h2 id="一、符号微积分"><a href="#一、符号微积分" class="headerlink" title="一、符号微积分"></a>一、符号微积分</h2><h3 id="求极限"><a href="#求极限" class="headerlink" title="求极限"></a>求极限</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">limit</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>x<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token comment">%求f关于x在a的极限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="求导"><a href="#求导" class="headerlink" title="求导"></a>求导</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">diff</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token comment">%求f的导数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">int</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token comment">%求f的不定积分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">int</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>x<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment">%求f的定积分，ab为下上限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、级数"><a href="#二、级数" class="headerlink" title="二、级数"></a>二、级数</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">symsum</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>v<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token comment">%s是一个级数的通项；v是求和变量，v省略使用系统默认；nm是v的初值和末值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="泰勒级数"><a href="#泰勒级数" class="headerlink" title="泰勒级数"></a>泰勒级数</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">taylor</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>v<span class="token punctuation">,</span>a<span class="token punctuation">,</span>Name<span class="token punctuation">,</span>Value<span class="token punctuation">)</span><span class="token comment">%f按变量v在a点展开为泰勒级数；a默认0；name和value是选项设置，成对使用（名和值）。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三、求解"><a href="#三、求解" class="headerlink" title="三、求解"></a>三、求解</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">solve</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token function">solve</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token function">solve</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">,</span>sn<span class="token punctuation">,</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">,</span>vn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="常微分方程求解"><a href="#常微分方程求解" class="headerlink" title="常微分方程求解"></a>常微分方程求解</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">dsolve</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>c<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token comment">%v方程中的自变量；c是初值（不给则求通解）</span><span class="token function">dsolve</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">,</span>en<span class="token punctuation">,</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span><span class="token punctuation">...</span>cn<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token comment">%求解常微分方程组</span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token string">'Dx=4*x-2*y'</span><span class="token punctuation">,</span><span class="token string">'Dy=2*x,y'</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span>a<span class="token operator">*</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span> f1 <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token operator">*</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">fplot</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab_数值微积分</title>
      <link href="/2020/05/15/matlba-shu-zhi-wei-ji-fen/"/>
      <url>/2020/05/15/matlba-shu-zhi-wei-ji-fen/</url>
      
        <content type="html"><![CDATA[<h1 id="数值微积分与方程求解"><a href="#数值微积分与方程求解" class="headerlink" title="数值微积分与方程求解"></a>数值微积分与方程求解</h1><h2 id="一、数值微分与数值积分"><a href="#一、数值微分与数值积分" class="headerlink" title="一、数值微分与数值积分"></a>一、数值微分与数值积分</h2><h3 id="数值差分和差商"><a href="#数值差分和差商" class="headerlink" title="数值差分和差商"></a>数值差分和差商</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">diff</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">%计算向量x的一阶向前差分</span><span class="token function">diff</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment">%计算向量x的n阶向前差分</span><span class="token function">diff</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>n<span class="token punctuation">,</span>dim<span class="token punctuation">)</span><span class="token comment">%计算矩阵A的n阶差分，dim=1列，dim=2行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数值积分"><a href="#数值积分" class="headerlink" title="数值积分"></a>数值积分</h3><h4 id="一次定积分数值求解"><a href="#一次定积分数值求解" class="headerlink" title="一次定积分数值求解"></a>一次定积分数值求解</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>l<span class="token punctuation">,</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quad</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>tol<span class="token punctuation">,</span>trace<span class="token punctuation">)</span><span class="token comment">%辛普森方法</span><span class="token punctuation">[</span>l<span class="token punctuation">,</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quadl</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>tol<span class="token punctuation">,</span>trace<span class="token punctuation">)</span><span class="token comment">%高斯方法</span><span class="token comment">%a，b是上下限；tol控制积分精度；trace控制是否展现积分过程</span><span class="token comment">%l 定积分的值，n 被积函数调用次数</span>l<span class="token operator">=</span><span class="token function">integral</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment">%全局自适应。</span><span class="token comment">%特点：上下限可以是无穷大</span><span class="token punctuation">[</span>l<span class="token punctuation">,</span>err<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">quadgk</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment">%高斯-克朗罗德方法</span><span class="token comment">%可以是无穷大，也可以是复数</span><span class="token comment">%err返回近似误差范围</span>l <span class="token operator">=</span> <span class="token function">trapz</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment">%梯形积分法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多重定积分数值求解"><a href="#多重定积分数值求解" class="headerlink" title="多重定积分数值求解"></a>多重定积分数值求解</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">l <span class="token operator">=</span> <span class="token function">integral2</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token function">quad2d</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token function">dblquad</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>tol<span class="token punctuation">)</span><span class="token comment">%二重积分数值解</span>l <span class="token operator">=</span> <span class="token function">integral3</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token function">triplequad</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">,</span>tol<span class="token punctuation">)</span><span class="token comment">%三重积分数值解</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、线性方程组求解"><a href="#二、线性方程组求解" class="headerlink" title="二、线性方程组求解"></a>二、线性方程组求解</h2><h3 id="左除运算符"><a href="#左除运算符" class="headerlink" title="左除运算符"></a>左除运算符</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">Ax<span class="token operator">=</span>bx<span class="token operator">=</span>A<span class="token operator">\</span>b<span class="token comment">%A是矩阵，b是列向量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="矩阵分解"><a href="#矩阵分解" class="headerlink" title="矩阵分解"></a>矩阵分解</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%LU分解</span><span class="token comment">%原理分解成上三角矩阵和下三角矩阵</span><span class="token punctuation">[</span>L<span class="token punctuation">,</span>U<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">lu</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token comment">%产生上三角阵U和下三角阵L，满足A=LU。A必须是方阵</span><span class="token punctuation">[</span>L<span class="token punctuation">,</span>U<span class="token punctuation">,</span>P<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">lu</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token comment">%产生上三角阵U和下三角阵L和一个置换矩阵P。满足PA=LU。A必须是方阵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><h2 id="三、非线性方程组和函数极值"><a href="#三、非线性方程组和函数极值" class="headerlink" title="三、非线性方程组和函数极值"></a>三、非线性方程组和函数极值</h2><h3 id="非线性方程"><a href="#非线性方程" class="headerlink" title="非线性方程"></a>非线性方程</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token function">fzero</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>x0<span class="token punctuation">)</span><span class="token comment">%filename待求方程左端的函数表达式，x0的初始值</span><span class="token operator">></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token operator">-</span><span class="token number">1.</span><span class="token operator">/</span>x<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> x1 <span class="token operator">=</span> <span class="token function">fzero</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">%求x0=-5作为迭代初值的跟</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非线性方程组"><a href="#非线性方程组" class="headerlink" title="非线性方程组"></a>非线性方程组</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x <span class="token operator">=</span> <span class="token function">fsolve</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>option<span class="token punctuation">)</span><span class="token comment">%x是返回的近似解，filename是带求根方程左端的函数表达式，x0是初值（应该是矩阵）。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="函数极值"><a href="#函数极值" class="headerlink" title="函数极值"></a>函数极值</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%无约束</span><span class="token punctuation">[</span>xmin<span class="token punctuation">,</span>fmin<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fminbnd</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>option<span class="token punctuation">)</span><span class="token punctuation">[</span>xmin<span class="token punctuation">,</span>fmin<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fminsearch</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>option<span class="token punctuation">)</span><span class="token punctuation">[</span>xmin<span class="token punctuation">,</span>fmin<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fminunc</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>option<span class="token punctuation">)</span><span class="token comment">%有约束</span><span class="token punctuation">[</span>xmin<span class="token punctuation">,</span>fmin<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmincon</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>x0<span class="token punctuation">,</span>A<span class="token punctuation">,</span>b<span class="token punctuation">,</span>Aeq<span class="token punctuation">,</span>beq<span class="token punctuation">,</span>Lbnd<span class="token punctuation">,</span>Ubnd<span class="token punctuation">,</span>Nonf<span class="token punctuation">,</span>option<span class="token punctuation">)</span><span class="token comment">%A,b是线性不等式约束；Aeq，beq是线型等式约束；Lbnd，Ubnd是上下界；Nonf是定义非线性约束的函数。不存在则用空矩阵表示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、常微分方程数值求解"><a href="#四、常微分方程数值求解" class="headerlink" title="四、常微分方程数值求解"></a>四、常微分方程数值求解</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token punctuation">[</span>t<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">solver</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>tspan<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>option<span class="token punctuation">)</span><span class="token comment">%filename 定义ODE的函数文件名；tspan 求解范围；y0初始状态向量；option可选参数</span><span class="token comment">%t是时间向量，y是相应的数值解</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="常微分方程数值求解函数命名"><a href="#常微分方程数值求解函数命名" class="headerlink" title="常微分方程数值求解函数命名"></a>常微分方程数值求解函数命名</h3><p>ode代表ODE；nn是所用方法的阶数；xx用于标注方法特性</p><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p>比较微分方程求解和精确解的误差</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span>y<span class="token operator">^</span><span class="token number">2</span><span class="token operator">-</span>t<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">/</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">[</span>t<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ode23</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> y1<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span>t<span class="token punctuation">,</span>y1<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token operator">@</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">[</span>t<span class="token punctuation">,</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ode45</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">plot</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ode方程组例子："><a href="#ode方程组例子：" class="headerlink" title="ode方程组例子："></a>ode方程组例子：</h3><p>例子来源<code>ode45waterloo.pdf</code>，算是官方的一个例子，大概可以应用于基本所有情况的微分方程组求解。</p><p>$$y_{1}^{\prime}=2 y_{1}+y_{2}+5 y_{3}+e^{-2 t}$$</p><p>$$y_{2}^{\prime}=-3 y_{1}-2 y_{2}-8 y_{3}+2 e^{-2 t}-\cos (3 t)$$</p><p>$$y_{3}^{\prime}=3 y_{1}+3 y_{2}+2 y_{3}+\cos (3 t)$$</p><p>$$y_{1}(0)=1, y_{2}(0)=-1, y_{3}(0)=0 $$</p><p>$$t \quad in \quad [0, p i / 2]$$</p><p>odefun.m</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clc<span class="token punctuation">;</span>clear all<span class="token punctuation">;</span> close all<span class="token punctuation">;</span><span class="token punctuation">[</span>t1<span class="token punctuation">,</span> y1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ode23</span><span class="token punctuation">(</span><span class="token operator">@</span>df2<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span> t1<span class="token punctuation">,</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span> t1<span class="token punctuation">,</span><span class="token function">y1</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">)</span>holdgrid<span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">'-+- y_1'</span><span class="token punctuation">)</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'-x- y_2'</span><span class="token punctuation">)</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'-o- y_3'</span><span class="token punctuation">)</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span>hold off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>df2.m</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> Fv<span class="token operator">=</span><span class="token function">df2</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token comment">% Fv(1,1)=2*Y(1)+Y(2)+5*Y(3)+exp(-2*t); </span><span class="token comment">% Fv(2,1)=-3*Y(1)-2*Y(2)-8*Y(3)+2*exp(-2*t)-cos(3*t);</span><span class="token comment">% Fv(3,1)=3*Y(1)+3*Y(2)+2*Y(3)+cos(3*t);</span>Fv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>t<span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token number">3</span><span class="token operator">*</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">*</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>t<span class="token punctuation">)</span>    <span class="token number">3</span><span class="token operator">*</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图像如下：</p><p><img src="http://pict.lanyun1103.top/typora/20210508100737.png" alt="example"></p><p><a href="https://github1s.com/kiyochou/2019-iGEM-Fudan-TSI/blob/master/Dry%20lab%20code/Model/IPTG/IPTGfun.m">复旦TSIode组模型开源代码</a></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab_数值分析</title>
      <link href="/2020/05/15/matlab-shu-zhi-fen-xi/"/>
      <url>/2020/05/15/matlab-shu-zhi-fen-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Matlab——数据分析"><a href="#Matlab——数据分析" class="headerlink" title="Matlab——数据分析"></a>Matlab——数据分析</h1><h2 id="一、数据分析统计"><a href="#一、数据分析统计" class="headerlink" title="一、数据分析统计"></a>一、数据分析统计</h2><h3 id="矩阵最大最小"><a href="#矩阵最大最小" class="headerlink" title="矩阵最大最小"></a>矩阵最大最小</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">向量时y <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token comment">%返回最大值和最大元素位置</span>矩阵时<span class="token function">max</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">[</span>Y<span class="token punctuation">,</span>U<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token comment">%返回行向量和列向量</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dim<span class="token punctuation">)</span><span class="token comment">%dim=1时，和max(A)相同，返回一个行向量</span><span class="token comment">%dim=2时，返回一个列向量，第i个元素是A矩阵的第i行上的最大值</span><span class="token comment">%想要按行，则需要先把矩阵转置</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">%可以得到整个矩阵的最大值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>平均值和中值</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">mean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">%平均值 </span><span class="token function">median</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">%中值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="累加和和累乘积"><a href="#累加和和累乘积" class="headerlink" title="累加和和累乘积"></a>累加和和累乘积</h3><pre class="line-numbers language-none"><code class="language-none">sum()cumsum()prod()cumprod()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标准差和相关系数"><a href="#标准差和相关系数" class="headerlink" title="标准差和相关系数"></a>标准差和相关系数</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">std</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">%计算标准差函数</span><span class="token function">std</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token comment">%计算向量</span><span class="token function">std</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token comment">%计算矩阵各列</span><span class="token function">std</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>flag<span class="token punctuation">,</span>dim<span class="token punctuation">)</span><span class="token comment">%flag = 0,按照S1所列公式计算样本标准差，flag=1,按照S2所列公式计算总体标准差</span><span class="token function">corrcoef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">%相关系数函数</span><span class="token function">corrcoef</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token comment">%返回矩阵A所形成的一个相关系数矩阵</span><span class="token function">corrcoef</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">)</span><span class="token comment">%向量之间的相关系数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">%升序排列</span><span class="token function">sort</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token comment">%对矩阵各列排序</span><span class="token punctuation">[</span>Y<span class="token punctuation">,</span>I<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">sort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>dim<span class="token punctuation">,</span>mode<span class="token punctuation">)</span><span class="token comment">%dim对列/行；mode升序或者降序（ascent/descent）；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、多项式计算"><a href="#二、多项式计算" class="headerlink" title="二、多项式计算"></a>二、多项式计算</h2><h3 id="多项式相乘相除"><a href="#多项式相乘相除" class="headerlink" title="多项式相乘相除"></a>多项式相乘相除</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">conv</span><span class="token punctuation">(</span>P1<span class="token punctuation">,</span>P2<span class="token punctuation">)</span><span class="token comment">%多项式相乘</span><span class="token function">deconv</span><span class="token punctuation">(</span>P1<span class="token punctuation">,</span>P2<span class="token punctuation">)</span><span class="token comment">%多项式相除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多项式求导"><a href="#多项式求导" class="headerlink" title="多项式求导"></a>多项式求导</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">p <span class="token operator">=</span> <span class="token function">polyder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token comment">%多项式求导</span>p <span class="token operator">=</span> <span class="token function">polyder</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span>Q<span class="token punctuation">)</span><span class="token comment">%求P·Q的导函数</span><span class="token punctuation">[</span>p<span class="token punctuation">,</span>q<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">polyder</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span>Q<span class="token punctuation">)</span><span class="token comment">%求P/Q的导函数，分子存p，分母存q</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多项式求值"><a href="#多项式求值" class="headerlink" title="多项式求值"></a>多项式求值</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">polyval</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token comment">%对多项式求值，x为参数</span><span class="token function">polyvalm</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token comment">%对矩阵求值，要求x是方阵。</span><span class="token function">poly</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">%已知根，求多项式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、数据插值"><a href="#三、数据插值" class="headerlink" title="三、数据插值"></a>三、数据插值</h2><h3 id="一维插值"><a href="#一维插值" class="headerlink" title="一维插值"></a>一维插值</h3><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">interp1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x1<span class="token punctuation">,</span><span class="token string">'method'</span><span class="token punctuation">)</span><span class="token comment">%method:linear（线型插值）,nearest（最近插值）,pchip（分段三次，使曲线光滑，保形），spline（三次取样条形）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="二维插值"><a href="#二维插值" class="headerlink" title="二维插值"></a>二维插值</h3><pre class="line-numbers language-none"><code class="language-none">interp2(X,Y,Z,X1,Y1,&#39;method&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、曲线拟合"><a href="#四、曲线拟合" class="headerlink" title="四、曲线拟合"></a>四、曲线拟合</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">polyfit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">%多项式拟合函数</span>P<span class="token operator">=</span><span class="token function">polyfit</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token comment">%返回一个m次多项式P</span><span class="token punctuation">[</span>P<span class="token punctuation">,</span>S<span class="token punctuation">,</span>mu<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">polyfit</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token comment">%根据样本数据X,Y，产生一个 m 次多项式P和采样点误差数据S；mu是一个二元向量，mu(1)是mean(X)，mu(2)是std(X)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab_绘图</title>
      <link href="/2020/05/15/matlab-hui-tu/"/>
      <url>/2020/05/15/matlab-hui-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="Matlab——绘图"><a href="#Matlab——绘图" class="headerlink" title="Matlab——绘图"></a>Matlab——绘图</h1><h2 id="一、绘图："><a href="#一、绘图：" class="headerlink" title="一、绘图："></a>一、绘图：</h2><h3 id="1-函数："><a href="#1-函数：" class="headerlink" title="1.函数："></a>1.函数：</h3><h4 id="plot："><a href="#plot：" class="headerlink" title="plot："></a>plot：</h4><h5 id="基础："><a href="#基础：" class="headerlink" title="基础："></a>基础：</h5><p>创建数组：</p><p>x=0:0.005:0.2（创建0.005步长，0 - 0.2的点）</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>①：可以使用两个坐标数组②：可以使用单个坐标数组③：可以绘制复数向量图cx <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token operator">*</span><span class="token number">i</span> <span class="token operator">/</span> cx <span class="token operator">=</span> <span class="token function">complex</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span>④：同一个图中绘制多个曲线<span class="token operator">></span><span class="token operator">></span> <span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="plot选项："><a href="#plot选项：" class="headerlink" title="plot选项："></a>plot选项：</h5><p>线型：</p><ol><li> “-“实线</li><li> “:”虚线</li><li> “-.”点划线</li><li> “–”双划线</li></ol><p>颜色：</p><p>rgbwk</p><p>数据点标记：</p><ol><li> “*“</li><li> “o”</li><li> “s”</li><li> “p”</li><li> “^”</li></ol><h4 id="fplot："><a href="#fplot：" class="headerlink" title="fplot："></a>fplot：</h4><h5 id="作用、用法："><a href="#作用、用法：" class="headerlink" title="作用、用法："></a>作用、用法：</h5><p>一般用来绘制函数的图像</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">fplot</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>lims<span class="token punctuation">,</span>选项<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">fplot</span><span class="token punctuation">(</span><span class="token operator">@</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">1.</span><span class="token operator">/</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token function">fplot</span><span class="token punctuation">(</span>funx<span class="token punctuation">,</span>funy<span class="token punctuation">,</span>tlims<span class="token punctuation">,</span>选项<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">fplot</span><span class="token punctuation">(</span><span class="token operator">@</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> t<span class="token operator">.*</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">@</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> t<span class="token operator">.*</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>选项和plot相同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="绘图参数："><a href="#绘图参数：" class="headerlink" title="绘图参数："></a>绘图参数：</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">title</span><span class="token punctuation">(</span>图形标题<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">fplot</span><span class="token punctuation">(</span><span class="token operator">@</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> t<span class="token operator">.*</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">@</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> t<span class="token operator">.*</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>设置属性：ColorFontSize<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token function">xlabel</span><span class="token punctuation">(</span>x轴说明<span class="token punctuation">)</span><span class="token function">ylabel</span><span class="token punctuation">(</span>y轴说明<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token function">text</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>图形说明）和 <span class="token function">gtext</span><span class="token punctuation">(</span>说明<span class="token punctuation">)</span>text 在指定坐标上添加文本说明<span class="token function">gtext</span><span class="token punctuation">(</span><span class="token string">'\leftarrow sin(x)'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token function">legend</span><span class="token punctuation">(</span>图例<span class="token number">1</span>，图例<span class="token number">2</span><span class="token punctuation">)</span>说明多个函数曲线的名称<span class="token operator">></span><span class="token operator">></span> <span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">legend</span><span class="token punctuation">(</span><span class="token string">'sin(x)'</span><span class="token punctuation">,</span><span class="token string">'sin(2*x)'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>set函数的调用格式为：<span class="token function">set</span><span class="token punctuation">(</span>句柄，属性名<span class="token number">1</span>，属性值<span class="token number">1</span>，属性名<span class="token number">2</span>，属性值<span class="token number">2</span>，…<span class="token punctuation">)</span>例如<span class="token function">set</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'LineWidth'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">%set(h,&#123;'LineWidth'&#125;,&#123;2&#125;)==set(h,'LineWidth',2),将所有线宽设置为2</span><span class="token function">set</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'Color'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'r'</span><span class="token punctuation">;</span><span class="token string">'g'</span><span class="token punctuation">;</span><span class="token string">'b'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'LineStyle'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'--'</span><span class="token punctuation">;</span><span class="token string">':'</span><span class="token punctuation">;</span><span class="token string">'-.'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">%设置颜色和线宽</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="坐标控制"><a href="#坐标控制" class="headerlink" title="坐标控制"></a>坐标控制</h5><p>调整当前视图范围</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span>xmin<span class="token punctuation">,</span>xmax<span class="token punctuation">,</span>ymin<span class="token punctuation">,</span>ymax<span class="token punctuation">,</span>zmin<span class="token punctuation">,</span>zmax<span class="token punctuation">]</span><span class="token punctuation">)</span>axis equal  设置坐标轴等长刻度axis square 正方形坐标系axis auto   默认axis off    取消坐标轴axis on     显示坐标轴<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>网格和边框</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">grid ongrid offgrid box onbox offbox<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="图形保持"><a href="#图形保持" class="headerlink" title="图形保持"></a>图形保持</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">hold onhold off可以用来绘制同心圆<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="图形分割"><a href="#图形分割" class="headerlink" title="图形分割"></a>图形分割</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">subplot</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>p<span class="token punctuation">)</span>将图形窗口分成m行n列的图形<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-其他二维曲线："><a href="#2-其他二维曲线：" class="headerlink" title="2.其他二维曲线："></a>2.其他二维曲线：</h3><p>对数</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">semilogx</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>选项<span class="token number">1</span><span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>选项<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token function">semilogy</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>选项<span class="token number">1</span><span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>选项<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token function">loglog</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>选项<span class="token number">1</span><span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>选项<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>极坐标</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">polar</span><span class="token punctuation">(</span>theta<span class="token punctuation">,</span>rho<span class="token punctuation">,</span>选项<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>条形类图</p><p>（1）条形图</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">bar</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>style<span class="token punctuation">)</span> y是数据，style用于指定格式<span class="token punctuation">(</span>grouped<span class="token punctuation">,</span>stacked<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">bar</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'group'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">bar</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token string">'stacked'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'stack'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）直方图：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">hist</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token function">hist</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">hist</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token operator">:</span><span class="token number">0.2</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">></span> <span class="token function">hist</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-三维函数："><a href="#3-三维函数：" class="headerlink" title="3.三维函数："></a>3.三维函数：</h3><h4 id="plot3："><a href="#plot3：" class="headerlink" title="plot3："></a>plot3：</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">plot3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>选项<span class="token punctuation">)</span>输入多组数据<span class="token function">plot3</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>z1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>z2<span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">,</span>xn<span class="token punctuation">,</span>yn<span class="token punctuation">,</span>zn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="fplot：-1"><a href="#fplot：-1" class="headerlink" title="fplot："></a>fplot：</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">fplot3</span><span class="token punctuation">(</span>funx<span class="token punctuation">,</span>funy<span class="token punctuation">,</span>funz<span class="token punctuation">,</span>tlims<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>tlims是参数函数自变量的取值范围，用二元向量<span class="token punctuation">[</span>tmin<span class="token punctuation">,</span>tmax<span class="token punctuation">]</span>描述<span class="token operator">></span><span class="token operator">></span> <span class="token function">fplot3</span><span class="token punctuation">(</span>xt<span class="token punctuation">,</span>yt<span class="token punctuation">,</span>zt<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="平面网格图："><a href="#平面网格图：" class="headerlink" title="平面网格图："></a>平面网格图：</h4><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token number">1.</span>矩阵运算<span class="token operator">></span><span class="token operator">></span> X <span class="token operator">=</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token operator">></span><span class="token operator">></span> Y <span class="token operator">=</span> y<span class="token operator">*</span>ones<span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2.</span>使用meshgrid<span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">meshgrid</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h4><p>带等高线：meshc</p><p>带底座：meshz</p><p>带等高线的曲面函数：surfc</p><p>光照效果的曲线函数：surfl</p><h4 id="绘图参数：-1"><a href="#绘图参数：-1" class="headerlink" title="绘图参数："></a>绘图参数：</h4><h5 id="视点处理："><a href="#视点处理：" class="headerlink" title="视点处理："></a>视点处理：</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">view</span><span class="token punctuation">(</span>az<span class="token punctuation">,</span>el<span class="token punctuation">)</span>  az是方位角，el是仰角<span class="token function">view</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span>从某个点<span class="token function">view</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>从二维层面<span class="token function">view</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>从三维层面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="颜色处理："><a href="#颜色处理：" class="headerlink" title="颜色处理："></a>颜色处理：</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">指定当前图形使用的色图colormap cmapname<span class="token function">colormap</span><span class="token punctuation">(</span>cmap<span class="token punctuation">)</span>cmap可以自定义颜色矩阵<span class="token operator">></span><span class="token operator">></span> <span class="token function">surf</span><span class="token punctuation">(</span>peaks<span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">></span> colormap hot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>switch语句不加break/continue</title>
      <link href="/2020/05/06/switch-yu-ju-bu-jia-break-continue/"/>
      <url>/2020/05/06/switch-yu-ju-bu-jia-break-continue/</url>
      
        <content type="html"><![CDATA[<h1 id="一个奇怪的用法"><a href="#一个奇怪的用法" class="headerlink" title="一个奇怪的用法"></a>一个奇怪的用法</h1><p>switch判断语句里面不加break会怎么样</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c:"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span>k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d->"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'B'</span><span class="token operator">:</span>k<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d->"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token operator">:</span>k <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d->"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token operator">:</span>k <span class="token operator">%=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d->"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'E'</span><span class="token operator">:</span>k <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d->"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>k <span class="token operator">/=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token string">'G'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"k=%d"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果是11</p><p>很神奇，最开始做了两遍答案都是错的，还是用编译器之后才意识到犯了一个以前不知道的小细节的错误。</p><p><strong>switch里面不加break或者continue会一直向下执行，并且无视下方语句的条件，直到遇到break，continue或者end。</strong></p><p>简单地说，switch就像一个流水线：</p><p>执行到一个语句如果没有break，他就会一直往下流（并且会冲破下面所有的条件）。</p><p>所以应征了以后工作千万不能用switch的看法。这种东西，确实没if else看起来舒服，一个不小心就会产生大问题。</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL命令/数据库操作</title>
      <link href="/2020/05/06/sql-ming-ling-shu-ju-ku-cao-zuo/"/>
      <url>/2020/05/06/sql-ming-ling-shu-ju-ku-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><p>javaweb学着学着就学到jdbc了，不会编写JdbcUtils，过来看看数据库的基本操作</p><p>文章来自 <a href="https://blog.csdn.net/oschina_41544814/article/details/84592466"></a><a href="https://blog.csdn.net/oschina_41544814/article/details/84592466">https://blog.csdn.net/oschina_41544814/article/details/84592466</a> 。</p><p>整理后如下：</p><h2 id="零、修改用户密码："><a href="#零、修改用户密码：" class="headerlink" title="零、修改用户密码："></a>零、修改用户密码：</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set password for 用户名@localhost &#x3D; password &#39;新密码&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">忘记root密码情况下：      ①关闭正在运行的MySQL服务。      ②打开DOS窗口，转到mysql\bin目录。      ③输入mysqld --skip-grant-tables 回车。--skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。      ④再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），输入mysql回车，如果成功，将出现MySQL提示符 &gt;。      ⑤连接权限数据库： use mysql; 。      ⑥改密码：update user set password&#x3D;password(&quot;新密码&quot;) where user&#x3D;&quot;root&quot;;（别忘了最后加分号） 。      ⑦刷新权限（必须步骤）：flush privileges;　。      ⑧退出mysql  quit；。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一、创建数据库："><a href="#一、创建数据库：" class="headerlink" title="一、创建数据库："></a>一、创建数据库：</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">* A: 创建数据库格式: * create database 数据库名; * create database 数据库名 character set 字符集;       例如：       #创建数据库 数据库中数据的编码采用的是安装数据库时指定的默认编码 utf8       CREATE DATABASE day21_1;        #创建数据库 并指定数据库中数据的编码       CREATE DATABASE day21_2 CHARACTER SET utf8;* B: 查看数据库  查看数据库MySQL服务器中的所有的数据库:  show databases;  查看某个数据库的定义的信息:  show create database 数据库名;  例如：  show create database day21_1;* C: 删除数据库  drop database 数据库名称;  例如：  drop database day21_2;* D: 其他的数据库操作命令  切换数据库：  use 数据库名;  例如：  use day21_1;* E: 查看正在使用的数据库:  select database();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、创建数据表格式"><a href="#二、创建数据表格式" class="headerlink" title="二、创建数据表格式"></a>二、创建数据表格式</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">A:格式：    create table 表名(       字段名 类型(长度) 约束,       字段名 类型(长度) 约束    );    例如：    ###创建分类表    CREATE TABLE sort (      sid INT, #分类ID       sname VARCHAR(100) #分类名称    );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对数据表的约束</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">* A: 约束的作用:    create table 表名(           列名 类型(长度) 约束,           列名 类型(长度) 约束        );        限制每一列能写什么数据,不能写什么数据。* B: 哪些约束:        主键约束        非空约束        唯一约束        外键约束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、创建用户表："><a href="#三、创建用户表：" class="headerlink" title="三、创建用户表："></a>三、创建用户表：</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">* A: 创建用户表:    需求:创建用户表,用户编号,姓名,用户的地址    * B: SQL语句    CREAT TABLE users (        uid INT,        uname VARCHAR(20),        uaddress VARCHAR(200)    );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、常用对表操作："><a href="#四、常用对表操作：" class="headerlink" title="四、常用对表操作："></a>四、常用对表操作：</h2><h3 id="1、查看、删除"><a href="#1、查看、删除" class="headerlink" title="1、查看、删除"></a>1、查看、删除</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">* A: 查看数据库中的所有表：    格式：show tables;       查看表结构：    格式：desc 表名;    例如：desc sort;* B: 删除数据库中某个表    格式：drop table 表名;    例如：drop table sort;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、增删改查（修改表格式）"><a href="#2、增删改查（修改表格式）" class="headerlink" title="2、增删改查（修改表格式）"></a>2、增删改查（修改表格式）</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">* A: 修改表添加列    alter table 表名 add 列名 类型(长度) 约束;        例如：    #1，为分类表添加一个新的字段为 分类描述 varchar(20)    ALTER TABLE sort ADD sdesc VARCHAR(20);* B: 修改表修改列的类型长度及约束    alter table 表名 modify 列名 类型(长度) 约束;     例如：    #2, 为分类表的分类名称字段进行修改，类型varchar(50) 添加约束 not null    ALTER TABLE sort MODIFY sname VARCHAR(50) NOT NULL;* C: 修改表修改列名    alter table 表名 change 旧列名 新列名 类型(长度) 约束;     例如：    #3, 为分类表的分类名称字段进行更换 更换为 snamesname varchar(30)    ALTER TABLE sort CHANGE sname snamename VARCHAR(30);* D: 修改表删除列    alter table 表名 drop 列名;     例如：    #4, 删除分类表中snamename这列    ALTER TABLE sort DROP snamename;* E: 修改表名    rename table 表名 to 新表名;     例如：    #5, 为分类表sort 改名成 category    RENAME TABLE sort TO category;* F: 修改表的字符集    salter table 表名 character set 字符集;    例如：    #6, 为分类表 category 的编码表进行修改，修改成 gbk    ALTER TABLE category CHARACTER SET gbk;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、常用数据操作："><a href="#五、常用数据操作：" class="headerlink" title="五、常用数据操作："></a>五、常用数据操作：</h2><h3 id="1、插入（添加）"><a href="#1、插入（添加）" class="headerlink" title="1、插入（添加）"></a>1、插入（添加）</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">* A: 语法：    insert into 表 (列名1,列名2,列名3..) values  (值1,值2,值3..); -- 向表中插入某些列 * 举例:    INSERT INTO product (id,pname,price) VALUES (1,&#39;笔记本&#39;,5555.99);    INSERT INTO product (id,pname,price) VALUES (2,&#39;智能手机&#39;,9999); * 注意:    列表,表名问题    对应问题,个数,数据类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">* A: 添加数据格式,不考虑主键   insert into 表名 (列名) values (值)* 举例:   INSERT INTO product (pname,price) VALUE(&#39;洗衣机&#39;,800);* B: 添加数据格式,所有值全给出   格式   insert into 表名 values (值1,值2,值3..); --向表中插入所有列举例:   INSERT INTO product VALUES (4,&#39;微波炉&#39;,300.25)* C: 添加数据格式,批量写入   格式:   insert into 表名 (列名1,列名2,列名3) values (值1,值2,值3),(值1,值2,值3)举例:   INSERT INTO product (pname,price) VALUES   (&#39;智能机器人&#39;,25999.22),   (&#39;彩色电视&#39;,1250.36),   (&#39;沙发&#39;,58899.02);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、删除："><a href="#2、删除：" class="headerlink" title="2、删除："></a>2、删除：</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">* A: 语法：    delete from 表名 [where 条件];    或者    truncate table 表名; * B: 面试题：    删除表中所有记录使用delete from 表名; 还是用truncate table 表名;    删除方式：delete 一条一条删除，不清空auto_increment记录数。    truncate 直接将表删除，重新建表，auto_increment将置为零，从新开始。 * C: 例如：    DELETE FROM sort WHERE sname&#x3D;&#39;日用品&#39;;    #表数据清空    DELETE FROM sort;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、查询："><a href="#3、查询：" class="headerlink" title="3、查询："></a>3、查询：</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">* A: 查询指定字段信息        select 字段1,字段2,...from 表名;        例如：        select id,name from zhangwu;    * B: 查询表中所有字段        select * from 表名;         例如：        select * from zhangwu;         注意:使用&quot;*&quot;在练习、学习过程中可以使用，在实际开发中，不推荐使用。原因，要查询的字段信息不明确，若字段数量很多，会导致查询速度很慢。    * C: distinct用于去除重复记录        select distinct 字段 from 表名;                 例如：        select distinct money from zhangwu;    * D: 别名查询，使用的as关键字，as可以省略的.        别名可以给表中的字段，表设置别名。 当查询语句复杂时，使用别名可以极大的简便操作。        表别名格式:         select * from 表名 as 别名;        或        select * from 表名 别名;        列别名格式：        select 字段名 as 别名 from 表名;        或        select 字段名 别名 from 表名;        例如：        表别名：            select * from zhangwu as zw;        列别名：            select money as m from zhangwu;            或            select money m from zhangwu;        我们在sql语句的操作中，可以直接对列进行运算。        例如：将所有账务的金额+10000元进行显示.        select pname,price+10000 from product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-条件查询："><a href="#3-1-条件查询：" class="headerlink" title="3.1 条件查询："></a>3.1 条件查询：</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">* A:条件查询        where语句表条件过滤。满足条件操作，不满足不操作，多用于数据的查询与修改。 * B : 格式 :        select 字段  from 表名  where 条件;    * C: while条件的种类如下：    比较运算符           &gt;  &lt;  &lt;&#x3D;   &gt;&#x3D;   &#x3D;  &lt;&gt; ---------- 大于、小于、大于(小于)等于、不等于        BETWEEN  ...AND...      ----------- 显示在某一区间的值(含头含尾)        IN(set)                 -----------显示在in列表中的值，例：in(100,200)        LIKE 通配符                -----------模糊查询，Like语句中有两个通配符：                                            % 用来匹配多个字符；例first_name like ‘a%’;                                            _ 用来匹配一个字符。例first_name like ‘a_’;        IS NULL     判断是否为空                                ------------is null; 判断为空                                            is not null; 判断不为空 * D 逻辑运算符          and                     ------------ 多个条件同时成立        or                      ------------ 多个条件任一成立        not                     ------------ 不成立，例：where not(salary&gt;100); * E: 例如：    查询所有吃饭支出记录    SELECT * FROM zhangwu WHERE name &#x3D; &#39;吃饭支出&#39;;    查询出金额大于1000的信息    SELECT * FROM zhangwu WHERE money &gt;1000;    查询出金额在2000-5000之间的账务信息    SELECT * FROM zhangwu WHERE money &gt;&#x3D;2000 AND money &lt;&#x3D;5000;    或    SELECT * FROM zhangwu WHERE money BETWEEN 2000 AND 5000;    查询出金额是1000或5000或3500的商品信息    SELECT * FROM zhangwu WHERE money &#x3D;1000 OR money &#x3D;5000 OR money &#x3D;3500;    或    SELECT * FROM zhangwu WHERE money IN(1000,5000,3500);    *******************************    * A 模糊查询    查询出账务名称包含”支出”的账务信息。    SELECT * FROM zhangwu WHERE name LIKE &quot;%支出%&quot;; * B 查询出账务名称中是五个字的账务信息    SELECT * FROM gjp_ledger WHERE ldesc LIKE &quot;_____&quot;; -- 五个下划线_* C 查询出账务名称不为null账务信息    SELECT * FROM zhangwu WHERE name IS NOT NULL;    SELECT * FROM zhangwu WHERE NOT (name IS NULL);    ************************************    * A: 排序查询     使用格式        * 通过order by语句，可以将查询出的结果进行排序。放置在select语句的最后。        * SELECT * FROM 表名 ORDER BY 字段ASC;            * ASC 升序 (默认)            * DESC 降序    * B: 案例代码        &#x2F;*          查询,对结果集进行排序          升序,降序,对指定列排序          order by 列名 [desc][asc]          desc 降序          asc  升序排列,可以不写        *&#x2F;        -- 查询账务表,价格进行升序        SELECT * FROM zhangwu ORDER BY zmoney ASC        -- 查询账务表,价格进行降序        SELECT * FROM zhangwu ORDER BY zmoney DESC        -- 查询账务表,查询所有的支出,对金额降序排列        -- 先过滤条件 where 查询的结果再排序        SELECT * FROM zhangwu WHERE zname LIKE&#39;%支出%&#39; ORDER BY zmoney DESC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-聚合函数查询："><a href="#3-2-聚合函数查询：" class="headerlink" title="3.2 聚合函数查询："></a>3.2 聚合函数查询：</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">* A: 聚合函数    * B: 函数介绍        * 之前我们做的查询都是横向查询，它们都是根据条件一行一行的进行判断，而使用聚合函数查询是纵向查询，            它是对一列的值进行计算，然后返回一个单一的值；另外聚合函数会忽略空值。        * count：统计指定列不为NULL的记录行数；        * sum：计算指定列的数值和，如果指定列；        * max：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串类型不是数值类型，那么计算结果为0排0序运算；        * min：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；        * avg：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；    * C: 案例代码        &#x2F;*           使用聚合函数查询计算        *&#x2F;        -- count 求和,对表中的数据的个数求和  count(列名)        -- 查询统计账务表中,一共有多少条数据        SELECT COUNT(*)AS&#39;count&#39; FROM zhangwu        -- sum求和,对一列中数据进行求和计算 sum(列名)        -- 对账务表查询,对所有的金额求和计算        SELECT SUM(zmoney) FROM zhangwu        -- 求和,统计所有支出的总金额        SELECT SUM(zname) FROM zhangwu WHERE zname LIKE&#39;%收入%&#39;        INSERT INTO zhangwu (zname) VALUES (&#39;彩票收入&#39;)        -- max 函数,对某列数据,获取最大值        SELECT MAX(zmoney) FROM zhangwu        -- avg 函数,计算一个列所有数据的平均数        SELECT AVG(zmoney)FROM zhangwu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.3 分组查询：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">* A: 分组查询    * a: 使用格式        * 分组查询是指使用group by字句对查询信息进行分组,例如：我们要统计出zhanguw表中所有分类账务的总数量,这时就需要使用group by 来对zhangwu表中的账务信息根据parent进行分组操作。        * SELECT 字段1,字段2… FROM 表名 GROUP BY 字段 HAVING 条件;        * 分组操作中的having子语句，是用于在分组后对数据进行过滤的，作用类似于where条件。    * b: having与where的区别        * having是在分组后对数据进行过滤.        * where是在分组前对数据进行过滤        * having后面可以使用分组函数(统计函数)        * where后面不可以使用分组函数。 * B: 案例代码                  &#x2F;*                查询所有的数据                吃饭支出 共计多少                工资收入 共计多少                服装支出 共计多少                股票收入 共计多少                打麻将支出 共计多少钱                分组查询:  group by 被分组的列名                必须跟随聚合函数                select 查询的时候,被分组的列,要出现在select 选择列的后面            *&#x2F;              SELECT SUM(zmoney),zname FROM zhangwu GROUP BY zname            -- 对zname内容进行分组查询求和,但是只要支出            SELECT SUM(zmoney)AS &#39;getsum&#39;,zname FROM zhangwu WHERE zname LIKE&#39;%支出%&#39;            GROUP BY zname            ORDER BY getsum DESC            -- 对zname内容进行分组查询求和,但是只要支出, 显示金额大于5000            -- 结果集是分组查询后,再次进行筛选,不能使用where, 分组后再次过滤,关键字 having            SELECT SUM(zmoney)AS &#39;getsum&#39;,zname FROM zhangwu WHERE zname LIKE&#39;%支出%&#39;            GROUP BY zname HAVING getsum&gt;5000    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java_web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础+JSON简介</title>
      <link href="/2020/05/03/javascript-ji-chu-json-jian-jie/"/>
      <url>/2020/05/03/javascript-ji-chu-json-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><p>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名的，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。</p><h2 id="1、基础："><a href="#1、基础：" class="headerlink" title="1、基础："></a>1、基础：</h2><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p>在 HTML 中，JavaScript 代码必须位于 与 标签之间。</p><p>可以不使用 type=”text/javascript”</p><h3 id="在head部分"><a href="#在head部分" class="headerlink" title="在head部分"></a>在head部分</h3><p>建立函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"段落被更改。"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以在下面使用</p><h3 id="在body部分："><a href="#在body部分：" class="headerlink" title="在body部分："></a>在body部分：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"段落被更改。"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="在外部脚本："><a href="#在外部脚本：" class="headerlink" title="在外部脚本："></a>在外部脚本：</h3><h4 id="外部文件："><a href="#外部文件：" class="headerlink" title="外部文件："></a>外部文件：</h4><p>myScript.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"段落被更改。"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="使用：-1"><a href="#使用：-1" class="headerlink" title="使用："></a>使用：</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myScript.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以在 或 中放置外部脚本引用。</p><hr><h2 id="2、方法："><a href="#2、方法：" class="headerlink" title="2、方法："></a>2、方法：</h2><h3 id="修改html："><a href="#修改html：" class="headerlink" title="修改html："></a>修改html：</h3><p>getElementById();</p><ul><li>  修改内容</li><li>  修改属性</li><li>  修改样式</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"Hello JavaScript"</span><span class="token punctuation">;</span>把demo修改成innerHTML的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><ul><li>  使用 window.alert() 写入警告框</li><li>  使用 document.write() 写入 HTML 输出</li><li>  使用 innerHTML 写入 HTML 元素</li><li>  使用 console.log() 写入浏览器控制台 document.getElementById(id) 访问html元素</li></ul><p>一个简单的网页输出时间器：</p><p>算是一个比较典型的例子</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//開始运行</span>        <span class="token keyword">function</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>           <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清除定时器</span>           dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> h<span class="token operator">=</span>dt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取时</span>           <span class="token keyword">var</span> m<span class="token operator">=</span>dt<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取分</span>           <span class="token keyword">var</span> s<span class="token operator">=</span>dt<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取秒</span>           document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"showTime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>  <span class="token string">"如今的时间为："</span><span class="token operator">+</span>h<span class="token operator">+</span><span class="token string">"时"</span><span class="token operator">+</span>m<span class="token operator">+</span><span class="token string">"分"</span><span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">"秒"</span><span class="token punctuation">;</span>           t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设定定时器，循环运行     </span>        <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showTime<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> larger<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 300<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>timer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、数字："><a href="#3、数字：" class="headerlink" title="3、数字："></a>3、数字：</h2><p>js数字永远是<strong>64位浮点数</strong>： <strong>其中 0 到 51 存储数字（片段），52 到 62 存储指数，63 位存储符号：</strong></p><h3 id="难点："><a href="#难点：" class="headerlink" title="难点："></a>难点：</h3><p>+号的数字相加和字符串级联：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token string">"The result is: "</span> <span class="token operator">+</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>答案是<span class="token number">1020</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token string">"30"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>答案是<span class="token number">3030</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、事件："><a href="#4、事件：" class="headerlink" title="4、事件："></a>4、事件：</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> 点击发生的事件 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> 函数名() <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>onchange</p><p>HTML 元素已被改变</p><p>onclick</p><p>用户点击了 HTML 元素</p><p>onmouseover</p><p>用户把鼠标移动到 HTML 元素上</p><p>onmouseout</p><p>用户把鼠标移开 HTML 元素</p><p>onkeydown</p><p>用户按下键盘按键</p><p>onload</p><p>浏览器已经完成页面加载</p><h3 id="JavaScript-能够做什么？"><a href="#JavaScript-能够做什么？" class="headerlink" title="JavaScript 能够做什么？"></a>JavaScript 能够做什么？</h3><p>事件处理程序可用于处理、验证用户输入、用户动作和浏览器动作：</p><ul><li>  每当页面加载时应该做的事情</li><li>  当页面被关闭时应该做的事情</li><li>  当用户点击按钮时应该被执行的动作</li><li>  当用户输入数据时应该被验证的内容</li><li>  等等</li></ul><p>让 JavaScript 处理事件的不同方法有很多：</p><ul><li>  HTML 事件属性可执行 JavaScript 代码</li><li>  HTML 事件属性能够调用 JavaScript 函数</li><li>  您能够向 HTML 元素分配自己的事件处理函数</li><li>  您能够阻止事件被发送或被处理</li><li>  等等</li></ul><h2 id="5、字符串"><a href="#5、字符串" class="headerlink" title="5、字符串"></a>5、字符串</h2><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><ul><li>  length(); 返回字符串长度</li><li>  indexOf(); 返回字符串置顶文本首次出现的索引</li><li>  lastIndexOf(); 返回指定文本在字符串最后一次出现的索引</li><li>  search(); 搜索指定值的字符串</li><li>  slice(); 字符串切片（起始索引-末索引）</li><li>  substring(); 字符串切片（不接受负索引）</li><li>  substr(); 第二个参数规定提取部分的长度</li><li>  replace(); 字面意思（只替换首个匹配，大小写敏感）【可以使用正则表达式，正则表达式不带引号】</li><li>  toUpperCase(); 转换大写</li><li>  concat(); 链接字符串</li><li>  trim(); 删除字符串两端空白符</li><li>  split(); 字符串转换成数组</li></ul><h3 id="重点："><a href="#重点：" class="headerlink" title="重点："></a>重点：</h3><p>1、</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">===</span> 需要类型和值同时相等<span class="token operator">==</span> 可以比较相等字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、对象之间不能比较，无论怎么比较都是false</p><h2 id="6、数字"><a href="#6、数字" class="headerlink" title="6、数字"></a>6、数字</h2><h3 id="方法：-1"><a href="#方法：-1" class="headerlink" title="方法："></a>方法：</h3><p>toString(); 转换字符串</p><p>toExponential() 返回字符串值，它包含已被四舍五入并使用指数计数法的数字。</p><p>toFixed() 返回字符串值，它包含了指定位数小数的数字：</p><p>toPrecision() 返回字符串值，它包含了指定长度的数字：</p><p>valueOf() 以数值返回数值：</p><p>Number() 可用于把 JavaScript 变量转换为数值，也可以把日期转换成数字</p><p>parseInt() 解析一段字符串并返回数值</p><h4 id="数值属性"><a href="#数值属性" class="headerlink" title="数值属性"></a>数值属性</h4><p>属性</p><p>描述</p><p>MAX_VALUE</p><p>返回 JavaScript 中可能的最大数。</p><p>MIN_VALUE</p><p>返回 JavaScript 中可能的最小数。</p><p>NEGATIVE_INFINITY</p><p>表示负的无穷大（溢出返回）。</p><p>NaN</p><p>表示非数字值（”Not-a-Number”）。</p><p>POSITIVE_INFINITY</p><p>表示无穷大（溢出返回）。</p><h2 id="7、数组："><a href="#7、数组：" class="headerlink" title="7、数组："></a>7、数组：</h2><p>数组是一种特殊的变量，它能够一次存放一个以上的值。并不是只能储存数字</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> array<span class="token operator">-</span>name <span class="token operator">=</span> <span class="token punctuation">[</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以通过下标访问数组元素</p><p>也可以通过数组名访问整个数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> cars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Saab"</span><span class="token punctuation">,</span> <span class="token string">"Volvo"</span><span class="token punctuation">,</span> <span class="token string">"BMW"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> cars<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>数组是对象</strong></p><h3 id="方法：-2"><a href="#方法：-2" class="headerlink" title="方法："></a>方法：</h3><p>基本同上</p><p>toString()</p><p>join() 多个数组元素结合成一个字符串</p><p>pop()</p><p>push()</p><p>shift() 删除第一个元素，后面一个一个往前推</p><p>unshift() 添加……，返回新数组长度</p><p>slice()</p><p>concat()</p><p>sort()</p><p>reverse()</p><h4 id="数组和对象的区别"><a href="#数组和对象的区别" class="headerlink" title="数组和对象的区别"></a>数组和对象的区别</h4><p>在 JavaScript 中，_数组_使用_数字索引_。</p><p>在 JavaScript 中，_对象_使用_命名索引_。</p><p>数组是特殊类型的对象，具有数字索引。</p><h2 id="8、日期："><a href="#8、日期：" class="headerlink" title="8、日期："></a>8、日期：</h2><pre class="line-numbers language-none"><code class="language-none">var d &#x3D; new Date();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>  new Date()</li><li>  new Date(year, month, day, hours, minutes, seconds, milliseconds)</li><li>  new Date(milliseconds) 创建一个零时加毫秒的新日期对象（从1970年1月1日）</li><li>  new Date(date string) 从日期字符串创建新的日期对象</li></ul><h3 id="日期格式："><a href="#日期格式：" class="headerlink" title="日期格式："></a>日期格式：</h3><h4 id="ISO日期"><a href="#ISO日期" class="headerlink" title="ISO日期"></a>ISO日期</h4><p>ISO 8601 语法 (YYYY-MM-DD) 也是首选的 JavaScript 日期格式：</p><p>写日期也可以添加时、分和秒 (YYYY-MM-DDTHH:MM:SS)：</p><h4 id="JavaScript-短日期"><a href="#JavaScript-短日期" class="headerlink" title="JavaScript 短日期"></a>JavaScript 短日期</h4><p>短日期通常使用 “MM/DD/YYYY” 这样的语法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"02/19/2018"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在某些浏览器中，不带前导零的月或其会产生错误：</p><h4 id="JavaScript-长日期"><a href="#JavaScript-长日期" class="headerlink" title="JavaScript 长日期"></a>JavaScript 长日期</h4><p>长日期通常以 “MMM DD YYYY” 这样的语法来写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"Feb 19 2018"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="JavaScript-完整日期"><a href="#JavaScript-完整日期" class="headerlink" title="JavaScript 完整日期"></a>JavaScript 完整日期</h4><p>JavaScript 接受“完整 JavaScript 格式”的日期字符串：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"Mon Feb 19 2018 06:55:23 GMT+0100 (W. Europe Standard Time)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="时区："><a href="#时区：" class="headerlink" title="时区："></a>时区：</h3><p>自动使用浏览器时区</p><h3 id="日期获取方法："><a href="#日期获取方法：" class="headerlink" title="日期获取方法："></a>日期获取方法：</h3><p>方法</p><p>描述</p><p>getDate()</p><p>以数值返回天（1-31）</p><p>getDay()</p><p>以数值获取周名（0-6）</p><p>getFullYear()</p><p>获取四位的年（yyyy）</p><p>getHours()</p><p>获取小时（0-23）</p><p>getMilliseconds()</p><p>获取毫秒（0-999）</p><p>getMinutes()</p><p>获取分（0-59）</p><p>getMonth()</p><p>获取月（0-11）</p><p>getSeconds()</p><p>获取秒（0-59）</p><p>getTime()</p><p>获取时间（从 1970 年 1 月 1 日至今）</p><h3 id="日期设置方法："><a href="#日期设置方法：" class="headerlink" title="日期设置方法："></a>日期设置方法：</h3><p>方法</p><p>描述</p><p>setDate()</p><p>以数值（1-31）设置日</p><p>setFullYear()</p><p>设置年（可选月和日）</p><p>setHours()</p><p>设置小时（0-23）</p><p>setMilliseconds()</p><p>设置毫秒（0-999）</p><p>setMinutes()</p><p>设置分（0-59）</p><p>setMonth()</p><p>设置月（0-11）</p><p>setSeconds()</p><p>设置秒（0-59）</p><p>setTime()</p><p>设置时间（从 1970 年 1 月 1 日至今的毫秒数）</p><h2 id="9、数学方法："><a href="#9、数学方法：" class="headerlink" title="9、数学方法："></a>9、数学方法：</h2><ul><li>  Math.round(x) 的返回值是 x 四舍五入为最接近的整数</li><li>  Math.pow(x, y) 的返回值是 x 的 y 次幂：</li><li>  Math.sqrt(x) 返回 x 的平方根：</li><li>  Math.abs(x) 返回 x 的绝对（正）值：</li><li>  Math.ceil(x) 的返回值是 x _上舍入_最接近的整数：</li><li>  Math.floor(x) 的返回值是 x _下舍入_最接近的整数：</li><li>  三角函数()</li><li>  Math.min() 和 Math.max() 可用于查找参数列表中的最低或最高值：</li><li>  Math.random() 返回介于 0（包括） 与 1（不包括） 之间的随机数：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token constant">E</span>          <span class="token comment">// 返回欧拉指数（Euler's number）</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span>         <span class="token comment">// 返回圆周率（PI）</span>Math<span class="token punctuation">.</span><span class="token constant">SQRT2</span>      <span class="token comment">// 返回 2 的平方根</span>Math<span class="token punctuation">.</span><span class="token constant">SQRT1_2</span>    <span class="token comment">// 返回 1/2 的平方根</span>Math<span class="token punctuation">.</span><span class="token constant">LN2</span>        <span class="token comment">// 返回 2 的自然对数</span>Math<span class="token punctuation">.</span><span class="token constant">LN10</span>       <span class="token comment">// 返回 10 的自然对数</span>Math<span class="token punctuation">.</span><span class="token constant">LOG2E</span>      <span class="token comment">// 返回以 2 为底的 e 的对数（约等于 1.414）</span>Math<span class="token punctuation">.</span><span class="token constant">LOG10E</span>     <span class="token comment">// 返回以 10 为底的 e 的对数（约等于0.434）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="随机："><a href="#随机：" class="headerlink" title="随机："></a>随机：</h3><p>Math.random() 与 Math.floor() 一起使用用于返回随机整数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 返回 0 至 9 之间的数</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 返回 0 至 10 之间的数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个 JavaScript 函数始终返回介于 min（包括）和 max（不包括）之间的随机数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getRndInteger</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个 JavaScript 函数始终返回介于 min 和 max（都包括）之间的随机数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getRndInteger</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="10、分支"><a href="#10、分支" class="headerlink" title="10、分支"></a>10、分支</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">case</span> n<span class="token operator">:</span>        代码块        <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token keyword">case</span> n<span class="token operator">:</span>        代码块        <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token keyword">default</span><span class="token operator">:</span>        默认代码块<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11、循环"><a href="#11、循环" class="headerlink" title="11、循环"></a>11、循环</h2><p>和java一样，不讲</p><h2 id="12、强制类型转换"><a href="#12、强制类型转换" class="headerlink" title="12、强制类型转换"></a>12、强制类型转换</h2><p><strong>Number() 转换数值，String() 转换字符串，Boolean() 转换布尔值。</strong></p><p><strong>可以使用 typeof 运算符来确定 JavaScript 变量的数据类型。</strong></p><h2 id="13、位运算符"><a href="#13、位运算符" class="headerlink" title="13、位运算符"></a>13、位运算符</h2><p>运算符</p><p>名称</p><p>描述</p><p>&amp;</p><p>AND</p><p>如果两位都是 1 则设置每位为 1</p><p>OR</p><p>如果两位之一为 1 则设置每位为 1</p><p>^</p><p>XOR</p><p>如果两位只有一位为 1 则设置每位为 1</p><p>~</p><p>NOT</p><p>反转所有位</p><p>&lt;&lt;</p><p>零填充左位移</p><p>通过从右推入零向左位移，并使最左边的位脱落。</p><p>&gt;&gt;</p><p>有符号右位移</p><p>通过从左推入最左位的拷贝来向右位移，并使最右边的位脱落。</p><p>&gt;&gt;&gt;</p><p>零填充右位移</p><p>通过从左推入零来向右位移，并使最右边的位脱落。</p><h2 id="14、正则表达式"><a href="#14、正则表达式" class="headerlink" title="14、正则表达式"></a>14、正则表达式</h2><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">/</span>pattern<span class="token operator">/</span>modifiers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="正则表达式修饰符"><a href="#正则表达式修饰符" class="headerlink" title="正则表达式修饰符"></a>正则表达式修饰符</h4><p>_修饰符_可用于大小写不敏感的更全局的搜素：</p><p>修饰符</p><p>描述</p><p>i</p><p>执行对大小写不敏感的匹配。</p><p>g</p><p>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</p><p>m</p><p>执行多行匹配。</p><h4 id="正则表达式模式"><a href="#正则表达式模式" class="headerlink" title="正则表达式模式"></a>正则表达式模式</h4><p>_括号_用于查找一定范围的字符串：</p><p>表达式</p><p>描述</p><p>[abc]</p><p>查找方括号之间的任何字符。</p><p>[0-9]</p><p>查找任何从 0 至 9 的数字。</p><p>(xy)</p><p>查找由 分隔的任何选项。</p><p>_元字符（Metacharacter）_是拥有特殊含义的字符：</p><p>元字符</p><p>描述</p><p>\d</p><p>查找数字。</p><p>\s</p><p>查找空白字符。</p><p>\b</p><p>匹配单词边界。</p><p>\uxxxx</p><p>查找以十六进制数 xxxx 规定的 Unicode 字符。</p><p><em>Quantifiers</em> 定义量词：</p><p>量词</p><p>描述</p><p>n+</p><p>匹配任何包含至少一个 n 的字符串。</p><p>n*</p><p>匹配任何包含零个或多个 n 的字符串。</p><p>n?</p><p>匹配任何包含零个或一个 n 的字符串。</p><h2 id="15、异常："><a href="#15、异常：" class="headerlink" title="15、异常："></a>15、异常：</h2><h3 id="JavaScript-try-和-catch"><a href="#JavaScript-try-和-catch" class="headerlink" title="JavaScript try 和 catch"></a>JavaScript try 和 catch</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>     供测试的代码块<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     处理错误的代码块<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JavaScript-抛出错误"><a href="#JavaScript-抛出错误" class="headerlink" title="JavaScript 抛出错误"></a>JavaScript 抛出错误</h3><p>当发生错误时，JavaScript 通常会停止并产生错误消息。</p><p>技术术语是这样描述的：_JavaScript 将抛出异常（抛出错误）_。</p><p>JavaScript 实际上会创建带有两个属性的 _Error 对象_：name 和 message。</p><h2 id="16、作用域"><a href="#16、作用域" class="headerlink" title="16、作用域"></a>16、作用域</h2><p>简单，不说</p><h3 id="重点：-1"><a href="#重点：-1" class="headerlink" title="重点："></a>重点：</h3><p>严格模式</p><h2 id="17、提升"><a href="#17、提升" class="headerlink" title="17、提升"></a>17、提升</h2><p><strong>Javascipt中默认把声明提到开头</strong></p><h3 id="let-和-const-关键字"><a href="#let-和-const-关键字" class="headerlink" title="let 和 const 关键字"></a>let 和 const 关键字</h3><p>用 let 或 const 声明的变量和常量不会被提升！</p><h3 id="JavaScript-初始化不会被提升"><a href="#JavaScript-初始化不会被提升" class="headerlink" title="JavaScript 初始化不会被提升"></a>JavaScript 初始化不会被提升</h3><p>JavaScript 只提升声明，而非初始化。</p><h2 id="18、严格模式"><a href="#18、严格模式" class="headerlink" title="18、严格模式"></a>18、严格模式</h2><p>“use strict”; 的作用是指示 JavaScript 代码应该以“严格模式”执行。</p><p><strong>只能在开头使用</strong></p><h3 id="严格模式作用？"><a href="#严格模式作用？" class="headerlink" title="严格模式作用？"></a>严格模式作用？</h3><p>严格模式使我们更容易编写“安全的” JavaScript。</p><p>严格模式把之前可接受的“坏语法”转变为真实的错误。</p><p>举例来说，在普通的 JavaScript 中，错打变量名会创建新的全局变量。在严格模式中，此举将抛出错误，这样就不可能意外创建全局变量。</p><p>在普通 JavaScript 中，如果向不可写属性赋值，开发者不会得到任何错误反馈。</p><p>在严格模式中，向不可写的、只能读取的、不存在的属性赋值，或者向不存在的变量或对象赋值，将抛出错误。</p><h2 id="19、this"><a href="#19、this" class="headerlink" title="19、this"></a>19、this</h2><h3 id="this-是什么？"><a href="#this-是什么？" class="headerlink" title="this 是什么？"></a>this 是什么？</h3><p>JavaScript this 关键词指的是它所属的对象。</p><p>它拥有不同的值，具体取决于它的使用位置：</p><ul><li>  在方法中，this 指的是所有者对象。</li><li>  单独的情况下，this 指的是全局对象。</li><li>  在函数中，this 指的是全局对象。</li><li>  在函数中，严格模式下，this 是 undefined。</li><li>  在事件中，this 指的是接收事件的元素。</li></ul><p>像 call() 和 apply() 这样的方法可以将 this 引用到任何对象。</p><h2 id="20、let："><a href="#20、let：" class="headerlink" title="20、let："></a>20、let：</h2><p>和var几乎相同的用法，区别是let可以短暂的令一个全局变量在函数内编程另一个值</p><p>通过 var 关键词定义的全局变量属于 window 对象：</p><p>通过 let 关键词定义的全局变量不属于 window 对象：</p><p>在相同的作用域，或在相同的块中，通过 let 重新声明一个 var 变量是不允许的：</p><h2 id="21、const："><a href="#21、const：" class="headerlink" title="21、const："></a>21、const：</h2><p>与let基本相同，但是不能改变const变量的值</p><h2 id="22、调试"><a href="#22、调试" class="headerlink" title="22、调试"></a>22、调试</h2><p>可以使用 console.log() 在调试窗口中显示 JavaScript 的值：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>My First Web Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JS函数："><a href="#JS函数：" class="headerlink" title="JS函数："></a>JS函数：</h1><p>this 当前对象。</p><p>call(); 方法拥有者.方法.call() 可以调用 方法拥有者 所拥有的方法。</p><h1 id="Javascript-JSON"><a href="#Javascript-JSON" class="headerlink" title="Javascript JSON"></a>Javascript JSON</h1><ul><li>  JSON 指的是 <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation</li><li>  JSON 是轻量级的数据交换格式</li><li>  JSON 独立于语言 *****</li><li>  JSON 是“自描述的”且易于理解</li></ul><h3 id="JSON-对象"><a href="#JSON-对象" class="headerlink" title="JSON 对象"></a>JSON 对象</h3><p>JSON 对象是在花括号内书写的。</p><p>类似 JavaScript，对象能够包含多个名称/值对：</p><pre class="line-numbers language-none"><code class="language-none">&#123;&quot;firstName&quot;:&quot;Bill&quot;, &quot;lastName&quot;:&quot;Gates&quot;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JSON-数组"><a href="#JSON-数组" class="headerlink" title="JSON 数组"></a>JSON 数组</h3><p>JSON 数组在方括号中书写。</p><p>类似 JavaScript，数组能够包含对象：</p><pre class="line-numbers language-none"><code class="language-none">&quot;employees&quot;:[    &#123;&quot;firstName&quot;:&quot;Bill&quot;, &quot;lastName&quot;:&quot;Gates&quot;&#125;,     &#123;&quot;firstName&quot;:&quot;Steve&quot;, &quot;lastName&quot;:&quot;Jobs&quot;&#125;,     &#123;&quot;firstName&quot;:&quot;Alan&quot;, &quot;lastName&quot;:&quot;Turing&quot;&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON-文本转换-JavaScript-对象"><a href="#JSON-文本转换-JavaScript-对象" class="headerlink" title="JSON 文本转换 JavaScript 对象"></a>JSON 文本转换 JavaScript 对象</h3><p>首先，创建包含 JSON 语法的 JavaScript 字符串：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">var text = '<span class="token punctuation">&#123;</span> <span class="token property">"employees"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>' +'<span class="token punctuation">&#123;</span> <span class="token property">"firstName"</span><span class="token operator">:</span><span class="token string">"Bill"</span> <span class="token punctuation">,</span> <span class="token property">"lastName"</span><span class="token operator">:</span><span class="token string">"Gates"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>' +'<span class="token punctuation">&#123;</span> <span class="token property">"firstName"</span><span class="token operator">:</span><span class="token string">"Steve"</span> <span class="token punctuation">,</span> <span class="token property">"lastName"</span><span class="token operator">:</span><span class="token string">"Jobs"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>' +'<span class="token punctuation">&#123;</span> <span class="token property">"firstName"</span><span class="token operator">:</span><span class="token string">"Alan"</span> <span class="token punctuation">,</span> <span class="token property">"lastName"</span><span class="token operator">:</span><span class="token string">"Turing"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">&#125;</span>';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后，使用 JavaScript 的内建函数 JSON.parse() 来把这个字符串转换为 JavaScript 对象：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Java_web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5G时代 阅毕印象</title>
      <link href="/2020/04/15/5g-shi-dai-yue-bi-yin-xiang/"/>
      <url>/2020/04/15/5g-shi-dai-yue-bi-yin-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="总体印象："><a href="#总体印象：" class="headerlink" title="总体印象："></a>总体印象：</h2><h3 id="5G现实："><a href="#5G现实：" class="headerlink" title="5G现实："></a>5G现实：</h3><h4 id="5G安全问题。"><a href="#5G安全问题。" class="headerlink" title="5G安全问题。"></a>5G安全问题。</h4><p>未来网络安全行业可能会暴热，5G的安全问题将会成为未来最受瞩目的重中之重。没有5G的完全安全，所谓的完全无人驾驶可能不会真正的实现。</p><p>所谓的家庭智能互联，可能被破译的网络端口在暗网被大肆贩卖。</p><p>网络安全工程师一定是以后每个公司的刚需。</p><p>网络攻击每时每刻都在发生，在以后的大数据时代，匿名于海量数据中的黑客可能更难以被绳之以法。这是5G最令人担忧之处。</p><h4 id="5G特点：低时延，高速度"><a href="#5G特点：低时延，高速度" class="headerlink" title="5G特点：低时延，高速度"></a>5G特点：低时延，高速度</h4><p>4G的时延控制在20-30ms。</p><p>5G的时延目标是1ms。</p><p>4G的速度峰值100mbps</p><p>5G的速度峰值1gbps</p><p>流量费用需要受考量，以及每个人的智能设备不能按照流量计算费用（即使智能设备使用流量极少，但是应需要按照占用网络资源来计算应该的费用。）</p><h4 id="中国和国外对5G建设的方案不同：SA和NSA"><a href="#中国和国外对5G建设的方案不同：SA和NSA" class="headerlink" title="中国和国外对5G建设的方案不同：SA和NSA"></a>中国和国外对5G建设的方案不同：SA和NSA</h4><p>SA是以4G为基础，以大城市为试验点，由内而外5G基站向外扩张，从而实现5G全覆盖。中国的全基站数量达到650万个，印度4G基站刚刚达到中国4G基站的十分之一，美国基站大部分也并未健全，只在大部分大城市实现了基本覆盖。</p><p>美国的NSA仍然将会在很长一段时间内使用4G网络，只在人口多的地方建立部分5G基站，即使如此网络速度也比不过</p><p>这也是为什么中国的移动支付可以达到一个全球都模仿不来的地步，其他国家根本做不到中国这样的网络覆盖率。</p><h4 id="中国对5G的重视，对5G规则的制定。"><a href="#中国对5G的重视，对5G规则的制定。" class="headerlink" title="中国对5G的重视，对5G规则的制定。"></a>中国对5G的重视，对5G规则的制定。</h4><p>中国移动作为对TDD技术在全球范围了解最为深入的一家公司（原因是十几年前对中国政府对中国移动的要求），现在作为全球对5G技术规则制定的牵头人，是中国的机会，5G在中国将在掀起狂潮，这是全球的趋势。</p><p>中国的政体优势加上华为等优秀国产私企，必将在5G方面将美国以及其他任何国家压下一筹。</p><h3 id="国外："><a href="#国外：" class="headerlink" title="国外："></a>国外：</h3><p>中国移动10个，美国总共9个</p><p>结合最近实事：欧美对5G的误解，迷信造成的欧美5G的传播速度大幅下降</p><h3 id="未来："><a href="#未来：" class="headerlink" title="未来："></a>未来：</h3><p>5G对未来的改变是巨大的。</p><p>2020年第四次工业革命元年。</p><p>5G是智能互联网的基础。</p>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 5G </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript初学笔记</title>
      <link href="/2020/04/15/javascript-chu-xue-bi-ji/"/>
      <url>/2020/04/15/javascript-chu-xue-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><h2 id="1、基础："><a href="#1、基础：" class="headerlink" title="1、基础："></a>1、基础：</h2><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p>在 HTML 中，JavaScript 代码必须位于 与 标签之间。</p><p>可以不使用 type=”text/javascript”</p><h3 id="在head部分"><a href="#在head部分" class="headerlink" title="在head部分"></a>在head部分</h3><p>建立函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"段落被更改。"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以在下面使用</p><h3 id="在body部分："><a href="#在body部分：" class="headerlink" title="在body部分："></a>在body部分：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"段落被更改。"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="在外部脚本："><a href="#在外部脚本：" class="headerlink" title="在外部脚本："></a>在外部脚本：</h3><h4 id="外部文件："><a href="#外部文件：" class="headerlink" title="外部文件："></a>外部文件：</h4><p>myScript.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"段落被更改。"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="使用：-1"><a href="#使用：-1" class="headerlink" title="使用："></a>使用：</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myScript.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以在 或 中放置外部脚本引用。</p><hr><h2 id="2、方法："><a href="#2、方法：" class="headerlink" title="2、方法："></a>2、方法：</h2><h3 id="修改html："><a href="#修改html：" class="headerlink" title="修改html："></a>修改html：</h3><p>getElementById();</p><ul><li>  修改内容</li><li>  修改属性</li><li>  修改样式</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"Hello JavaScript"</span><span class="token punctuation">;</span>把demo修改成innerHTML的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><ul><li>  使用 window.alert() 写入警告框</li><li>  使用 document.write() 写入 HTML 输出</li><li>  使用 innerHTML 写入 HTML 元素</li><li>  使用 console.log() 写入浏览器控制台 document.getElementById(id) 访问html元素</li></ul><p>一个简单的网页输出时间器：</p><p>算是一个比较典型的例子</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//開始运行</span>        <span class="token keyword">function</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>           <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清除定时器</span>           dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> h<span class="token operator">=</span>dt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取时</span>           <span class="token keyword">var</span> m<span class="token operator">=</span>dt<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取分</span>           <span class="token keyword">var</span> s<span class="token operator">=</span>dt<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取秒</span>           document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"showTime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span>  <span class="token string">"如今的时间为："</span><span class="token operator">+</span>h<span class="token operator">+</span><span class="token string">"时"</span><span class="token operator">+</span>m<span class="token operator">+</span><span class="token string">"分"</span><span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">"秒"</span><span class="token punctuation">;</span>           t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设定定时器，循环运行     </span>        <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showTime<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> larger<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span> 300<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>timer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、数字："><a href="#3、数字：" class="headerlink" title="3、数字："></a>3、数字：</h2><p>js数字永远是<strong>64位浮点数</strong>： <strong>其中 0 到 51 存储数字（片段），52 到 62 存储指数，63 位存储符号：</strong></p><h3 id="难点："><a href="#难点：" class="headerlink" title="难点："></a>难点：</h3><p>+号的数字相加和字符串级联：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token string">"The result is: "</span> <span class="token operator">+</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>答案是<span class="token number">1020</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token string">"30"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>答案是<span class="token number">3030</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>未完待续。。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础结构</title>
      <link href="/2020/04/10/css-ji-chu-jie-gou/"/>
      <url>/2020/04/10/css-ji-chu-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h1><p>速查手册：</p><p><a href="https://www.w3school.com.cn/cssref/index.asp"></a><a href="https://www.w3school.com.cn/cssref/index.asp">https://www.w3school.com.cn/cssref/index.asp</a></p><h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><h3 id="基础语法："><a href="#基础语法：" class="headerlink" title="基础语法："></a>基础语法：</h3><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">selector &#123;declaration1; declaration2; ... declarationN &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>属性（property）是您希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">selector &#123;property: value&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="高级语法："><a href="#高级语法：" class="headerlink" title="高级语法："></a>高级语法：</h3><p>选择器分组</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">h1,h2,h3,h4,h5,h6 &#123;  color: green;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="选择器："><a href="#选择器：" class="headerlink" title="选择器："></a>选择器：</h2><h3 id="派生选择器："><a href="#派生选择器：" class="headerlink" title="派生选择器："></a>派生选择器：</h3><p>可以选择li 的 strong “添加”样式（添加是叠加样式，不覆盖之前的）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">li strong &#123;    font-style: italic;    font-weight: normal;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="id-选择器："><a href="#id-选择器：" class="headerlink" title="id 选择器："></a>id 选择器：</h3><p>id 选择器（#）可以为标有特定 id 的 HTML 元素指定特定的样式。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">#red &#123;color:red;&#125;#green &#123;color:green;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>id 属性只能在html中出现一次</strong></p><h4 id="id选择器-派生选择器："><a href="#id选择器-派生选择器：" class="headerlink" title="id选择器+派生选择器："></a>id选择器+派生选择器：</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">#sidebar p &#123;    font-style: italic;    text-align: right;    margin-top: 0.5em;    &#125;<span class="token comment">&lt;!-- 设置id为sidebar的段落的元素格式 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>被标注 sidebar 的属性只能在html出现一次，但是作为派生选择器，可以使用多次，为不同的 id 为 sidebar的标签添加属性。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">#sidebar p &#123;    font-style: italic;    text-align: right;    margin-top: 0.5em;    &#125;#sidebar h2 &#123;    font-size: 1em;    font-weight: normal;    font-style: italic;    margin: 0;    line-height: 1.5;    text-align: right;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps. id 选择器可以单独使用（不单独为一个标签添加属性，全局），但是对于老版本可能不兼容。</p><h3 id="类选择器："><a href="#类选择器：" class="headerlink" title="类选择器："></a>类选择器：</h3><p>.后面加类</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">.center &#123;text-align: center&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以作为派生选择器</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">.fancy td &#123;    color: #f60;    background: #666;    &#125;td.fancy &#123;    color: #f60;    background: #666;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性选择器："><a href="#属性选择器：" class="headerlink" title="属性选择器："></a>属性选择器：</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">[title=  ]&#123;color:red;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>适用于由空格分隔的属性值：</p><pre class="line-numbers language-none"><code class="language-none">[title~&#x3D;hello] &#123; color:red; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>适用于由连字符分隔的属性值：</p><pre class="line-numbers language-none"><code class="language-none">[lang&#x3D;en] &#123; color:red; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="CSS-框模型概述"><a href="#CSS-框模型概述" class="headerlink" title="CSS 框模型概述"></a>CSS 框模型概述</h2><p><img src="http://lanyun1103.top/wp-content/uploads/2020/04/ct_boxmodel.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习方法总结</title>
      <link href="/2020/03/30/xue-xi-fang-fa-zong-jie/"/>
      <url>/2020/03/30/xue-xi-fang-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<p><img src="http://lanyun1103.top/wp-content/uploads/2020/03/%E5%AD%A6%E4%B9%A0.png"></p>]]></content>
      
      
      <categories>
          
          <category> 每日学习总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性表</title>
      <link href="/2020/03/29/xian-xing-biao/"/>
      <url>/2020/03/29/xian-xing-biao/</url>
      
        <content type="html"><![CDATA[<p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8l42g9zk7j31am0kmq3b.jpg" alt="avatar"></p><p>也可以用 length 记录线性表的长度</p><span id="more"></span><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><p>在内存上顺序储存，</p><p>可以随机访问顺序表上的数据</p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p>在使用前必须提前确定数组最大容量（浪费空间）</p><p>插入删除不方便，平均复杂度为2/Maxsize</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">    <span class="token comment">//线性表顺序储存的作用，产生一段在内存中连续储存的表</span>    <span class="token comment">//优点，相对于数组，可以进行插入删除打印操作；作为数组可以通过下标直接访问数组某个元素的值</span>    <span class="token comment">//缺点，相对于线性表链式结构（链表），必须提前声明数组大小，可能会浪费内存</span>    <span class="token comment">//这两点可以概括到线性表的所有数据结构类型中，也是数组和链表这两个基础储存方式的存在意义#include"stdio.h"</span>    <span class="token comment">/*将数据储存在数组中，一个线性表是一个结构体，每个结构体中包含last，作为当前最后一个元素的坐标，last+1是长度，或者在结构体中定义length*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"stdio.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"stdlib.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Maxsize</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">xianxingbiao</span>       <span class="token punctuation">&#123;</span>    <span class="token comment">/* data */</span>    <span class="token keyword">int</span> Data<span class="token punctuation">[</span>Maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> last<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span>List<span class="token punctuation">;</span>List <span class="token function">init_S</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>       <span class="token comment">//初始化过程</span><span class="token punctuation">&#123;</span>    List PL<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    PL<span class="token operator">=</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PL<span class="token operator">-></span>last<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>PL<span class="token operator">-></span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>PL<span class="token operator">-></span>last<span class="token operator">&lt;</span>Maxsize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>PL<span class="token operator">-></span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>PL<span class="token operator">-></span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  PL<span class="token operator">-></span>last<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> PL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>List <span class="token function">insert_S</span><span class="token punctuation">(</span>List PL<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment">//插入（参数分别为  插入顺序表 插入值 插入位置）</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>PL<span class="token operator">-></span>last<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>Maxsize<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>PL<span class="token operator">-></span>last<span class="token punctuation">;</span>j<span class="token operator">></span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            PL<span class="token operator">-></span>Data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>PL<span class="token operator">-></span>Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        PL<span class="token operator">-></span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"顺序表已满\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> PL<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> PL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>List <span class="token function">Delete</span><span class="token punctuation">(</span>List PL<span class="token punctuation">)</span> <span class="token comment">//删除操作</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除开始\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>PL<span class="token operator">-></span>last<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前为空顺序表\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> PL<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>PL<span class="token operator">-></span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>num<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>PL<span class="token operator">-></span>last<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            PL<span class="token operator">-></span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>PL<span class="token operator">-></span>Data<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        PL<span class="token operator">-></span>last<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> PL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Output</span><span class="token punctuation">(</span>List PL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>PL<span class="token operator">-></span>last<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>PL<span class="token operator">-></span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    List PL<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>x<span class="token punctuation">;</span>    PL <span class="token operator">=</span> <span class="token function">init_S</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//初始化</span>    <span class="token function">Output</span><span class="token punctuation">(</span>PL<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//输出已经初始化的顺序表</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>              PL <span class="token operator">=</span> <span class="token function">Delete</span><span class="token punctuation">(</span>PL<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除第i个元素</span>    <span class="token function">Output</span><span class="token punctuation">(</span>PL<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//输出删除后的元素</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2020/03/29/jdbc/"/>
      <url>/2020/03/29/jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC-Java-DataBase-Connectivity"><a href="#JDBC-Java-DataBase-Connectivity" class="headerlink" title="JDBC:Java DataBase Connectivity"></a>JDBC:Java DataBase Connectivity</h1><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><p>可以为多重关系型数据库DBMS提供统一访问方式。（通过JAVA控制数据库）</p><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><p>通过JDBC-&gt;操作数据库驱动程序-&gt;操作数据库</p><h2 id="1-JDBC-API-提供操作访问接口"><a href="#1-JDBC-API-提供操作访问接口" class="headerlink" title="1.JDBC API:提供操作访问接口:"></a>1.JDBC API:提供操作访问接口:</h2><p><strong>从上往下，一个一个产生：</strong></p><p>DriverManager：管理</p><p>Connection：链接</p><p>Statement(Prepared Statement)：增删改查</p><p>CallableStatement：调用数据库中存储过程/存储函数</p><p>Result：返回结果集合</p><ol><li> 导入驱动，加载具体驱动</li><li> 链接</li><li> 发送sql，执行</li><li> 处理结果集</li></ol><h2 id="2-数据库驱动"><a href="#2-数据库驱动" class="headerlink" title="2.数据库驱动:"></a>2.数据库驱动:</h2><p>驱动jar</p><p>连接字符串</p><p>Oracle</p><p>ojdbc-x.jar</p><p>jdbc:oracle:thin:@localhost:1521:ORCL</p><p>MySQL</p><p>mysql-connector-java-x.jar</p><p>jdbc:mysql://localhost:3306/数据库名</p><p>SqlServer</p><p>sqljdbc-x.jar</p><p>jdbc:microsoft:sqlserver:localhost:1433:database=数据库名</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> URL <span class="token operator">=</span> <span class="token string">"jdbc:oracle:thin:@localhost:1521:ORCL"</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> USER <span class="token operator">=</span> <span class="token string">"admin"</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> URL <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token comment">//导入</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"oracle.jdbc.OracleDriver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//建立连接</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>URL<span class="token punctuation">,</span>USER<span class="token punctuation">,</span>PWD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送sql请求（增删改）</span><span class="token class-name">Statement</span> stmt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into student values(1,"</span>zs<span class="token string">")"</span><span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">excuteUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得返回值（增删改查几条数据）</span><span class="token comment">//输出操作结果</span><span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Expection</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>    stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">SQLExpection</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//还有各种异常处理，不写了太累了</span><span class="token comment">//查询</span>rs<span class="token operator">=</span>stms<span class="token punctuation">.</span><span class="token function">excuteQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭链接：先开的后关，后开的先关。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="操作数据库的对象："><a href="#操作数据库的对象：" class="headerlink" title="操作数据库的对象："></a>操作数据库的对象：</h3><p>Connection产生Statement对象：createStatement()</p><p>Connection产生PreparedStatement对象：prepareStatement()</p><p>Connection产生CallableStatement对象：prepareCall()</p><h5 id="Statement操作数据库："><a href="#Statement操作数据库：" class="headerlink" title="Statement操作数据库："></a>Statement操作数据库：</h5><h6 id="增删改："><a href="#增删改：" class="headerlink" title="增删改："></a>增删改：</h6><p>executeUpdate();</p><h6 id="查"><a href="#查" class="headerlink" title="查:"></a>查:</h6><p>executeQuery();</p><p>保存结果集：ResultSet：</p><p>next(); 光标上移</p><p>previous();光标下移</p><h5 id="PreparedStatement操作数据库（比Statement强大）："><a href="#PreparedStatement操作数据库（比Statement强大）：" class="headerlink" title="PreparedStatement操作数据库（比Statement强大）："></a>PreparedStatement操作数据库（比Statement强大）：</h5><h6 id="增删改：-1"><a href="#增删改：-1" class="headerlink" title="增删改："></a>增删改：</h6><p>executeUpdate();</p><h6 id="查-1"><a href="#查-1" class="headerlink" title="查:"></a>查:</h6><p>executeQuery();</p><h6 id="赋值操作："><a href="#赋值操作：" class="headerlink" title="赋值操作："></a>赋值操作：</h6><p>各种set***()方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into student values(?,?)"</span><span class="token class-name">Statement</span> pstmt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"hey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="CallableStatement-调用储存过程、储存函数"><a href="#CallableStatement-调用储存过程、储存函数" class="headerlink" title="CallableStatement:调用储存过程、储存函数"></a>CallableStatement:调用储存过程、储存函数</h5><h6 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h6><p>connection.prepareCall(参数：储存过程、储存函数)</p><p>存储过程：mysql（或者其他数据库）内创建的函数</p><p>存储过程（无返回值无return，返回out）</p><p>存储函数（有返回值，有return）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">cstmt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareCall</span><span class="token punctuation">(</span><span class="token string">"call addTwoNum(?,?,?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cstmt<span class="token punctuation">.</span><span class="token function">registerOutParameter</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token class-name">Types</span><span class="token punctuation">.</span>INTEGER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//execute之前处理输出参数，之后处理输出参数</span>cstmt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置输出参数的类型</span><span class="token keyword">int</span> result <span class="token operator">=</span> cstmt<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDBC操作模板："><a href="#JDBC操作模板：" class="headerlink" title="*JDBC操作模板："></a>*JDBC操作模板：</h3><p>以下全部在try catch中：</p><ol><li> 导入驱动包，加载驱动类 Class.forName(“具体驱动”);</li><li> 与数据库建立连接 connection = DriverManager.getConnection(…)；</li><li> 通过connection获取操作数据库对象（操作在上面）</li><li> 处理结果集 rs = pstmt.executeQuery();</li></ol><h2 id="处理CLOB-BLOB数据"><a href="#处理CLOB-BLOB数据" class="headerlink" title="处理CLOB/BLOB数据"></a>处理CLOB/BLOB数据</h2><h3 id="存储-存储路径："><a href="#存储-存储路径：" class="headerlink" title="存储 存储路径："></a>存储 存储路径：</h3><p>通过JDBC把文件路径按照字符串形式存入数据库，之后调用时 1.获取路径 2.调用IO</p><p>CLOB：大文本数据（小说-&gt;数据）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into mynovel values(?,?)"</span><span class="token punctuation">;</span>pstmt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pstmt<span class="token punctuation">.</span><span class="token function">setCharacterStream</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rs<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用Writer输出reader1</span><span class="token class-name">Reader</span> reader1 <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">getCharacterStream</span><span class="token punctuation">(</span><span class="token string">"NOVEL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BLOG：可以存放二进制文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into mynovel values(?,?)"</span><span class="token punctuation">;</span>pstmt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pstmt<span class="token punctuation">.</span><span class="token function">setCharacterStream</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSP控制数据库："><a href="#JSP控制数据库：" class="headerlink" title="JSP控制数据库："></a>JSP控制数据库：</h2><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><p>直接把java代码插入html中</p><p>在page中导包</p><p>导包操作：java：jar复制到工程中，intellij在libraries中添加jar包；ecplise右键，build path-&gt;</p>]]></content>
      
      
      <categories>
          
          <category> Java_web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java WEB_2_常用类的作用和用法</title>
      <link href="/2020/03/29/java-web-2-chang-yong-lei-de-zuo-yong-he-yong-fa/"/>
      <url>/2020/03/29/java-web-2-chang-yong-lei-de-zuo-yong-he-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="常用对象"><a href="#常用对象" class="headerlink" title="常用对象"></a>常用对象</h1><ul><li>  out：输出内容</li><li>  pageContext：JSP页面容器</li><li>  request：请求，存储“客户端向服务端发送的请求”（包含状态，动作）</li><li>  response：响应</li><li>  session：会话</li><li>  application：全局对象</li><li>  config：配置对象（服务器配置信息）</li><li>  page：当前JSP页面对象</li><li>  exception：异常对象</li></ul><h3 id="1-request："><a href="#1-request：" class="headerlink" title="1.request："></a>1.request：</h3><h4 id="方法概述"><a href="#方法概述" class="headerlink" title="方法概述"></a>方法概述</h4><p>request.getParameter(String name):获取参数</p><p>request.getParameterValues(String name):获取多个参数</p><p>request.setCharacterEncoding(编码方式):改变POST的编码方式</p><p>request.getRequestDispatcher(b.jsp).forward(request,response):请求转发，保留request的数据，但是不在地址栏显示改变的位置——（check请求转发给success，success返回数据给客户端</p><p>ServletContext getServerContect()：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">html提交表单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>check.jsp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 默认是get方式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>upwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">check.jsp&lt;%        String name &#x3D; request.getParameter(&quot;uname&quot;);        String key &#x3D; request.getParameter(&quot;ukey&quot;);        if (name.equals(&quot;lanyun&quot;)&amp;&amp;key.equals(&quot;happy&quot;))&#123;            request.getRequestDispatcher(&quot;success.jsp&quot;).forward(request,response);&lt;!-- 请求转发 --&gt;&lt;!--  request.getRediect(&quot;success.jsp&quot;)重定向 --&gt;        &#125;else &#123;            out.print(&quot;密码错误&quot;);        &#125;    %&gt;success.jsp&lt;%        out.print(&quot;登陆成功&quot;+request.getParameter(&quot;uname&quot;));%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="POST-GET："><a href="#POST-GET：" class="headerlink" title="POST/GET："></a>POST/GET：</h4><p>get：地址栏请求数据、method：“get”、超链接</p><p>post：method:”post”</p><p>get：在地址栏显示、短小（4-5KB，因此不用来传输文件）</p><p>post：不在地址栏显示（可以用于传输文件）</p><h3 id="2-response："><a href="#2-response：" class="headerlink" title="2.response："></a>2.response：</h3><h4 id="方法概述："><a href="#方法概述：" class="headerlink" title="方法概述："></a>方法概述：</h4><p>response.addCookie(Cookie cookie)：服务端向客户端增加cookie</p><p>response.sendRedirect(“a.jsp”) throws IOExpection:重定向，不保留数据，在地址栏显示改变位置（一般不使用）——（check.jsp返回数据给客户端，客户端再访问success.jsp）</p><p>response.setContentType(String type):设置服务器响应编码</p><h3 id="3-session"><a href="#3-session" class="headerlink" title="3.session"></a>3.session</h3><h4 id="Cookie（不属于session）："><a href="#Cookie（不属于session）：" class="headerlink" title="Cookie（不属于session）："></a>Cookie（不属于session）：</h4><p>由服务端产生，发送给客户端保存，可用于本地缓存。可以包含密码，数据。——提高访问效率，但是安全性比较差。</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">Cookie:name&#x3D;valuejavax.servlet.http.Cookiepublic Ciikie(String name,String value)String getName();String getValue();void setMaxAge(int expiry); &#x2F;*设置有效期*&#x2F;&#x2F;*服务端准备Cookie*&#x2F;response.addCookie(Cookie cookie)&#x2F;*客户端获取Cookie*&#x2F;request.getCookie();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端一次性拿到所有的cookie</p><p>代码：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">send_cookie.jsp&lt;%String name &#x3D; request.getParameter(&quot;uname&quot;);        String key &#x3D; request.getParameter(&quot;ukey&quot;);        if (name.equals(&quot;lanyun&quot;)&amp;&amp;key.equals(&quot;123456&quot;))&#123;            Cookie cookie1 &#x3D; new Cookie(&quot;name&quot;,name);            Cookie cookie2 &#x3D; new Cookie(&quot;upwd&quot;,key);            response.addCookie(cookie1);            response.addCookie(cookie2);            request.getRequestDispatcher(&quot;success.jsp&quot;).forward(request,response);        &#125;else&#123;            out.print(&quot;密码错误&quot;);        &#125;%&gt;show_cookie.jsp&lt;%        Cookie[] cookies &#x3D; request.getCookies();        for (Cookie cookie:cookies)&#123;            out.print(cookie.getName()+&quot;：&quot;+cookie.getValue());        &#125;%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>像这样的cookie：</p><p>name–lanyunupwd–123456JSESSIONID–AA33796ECC3298A51624DE545B96F035_ga–GA1.1.229021588.1581662059</p><p>session:会话——开始-&gt;结束</p><h4 id="运行机制："><a href="#运行机制：" class="headerlink" title="运行机制："></a>运行机制：</h4><p>每个浏览器第一次访问服务端时产生一个sessionID，赋给JSESSIONID（Cookie）。每一个都是独一无二。</p><p>产生的cookie的name=JSESSIONID,value=sessionID的值</p><p>session储存在服务端，同一个用户请求时（同一个对话中）共享资源，</p><h4 id="方法概述：-1"><a href="#方法概述：-1" class="headerlink" title="方法概述："></a>方法概述：</h4><p>String getId():获取</p><p>boolean isNew():判断是否是新用户</p><p>void invalidate():使session失效（注销）</p><p>setAttribute(); 添加session属性</p><p>getAttribute(); 获得session属性</p><p>void removeAttribute(): 移除session属性</p><p>void setMaxInactiveInterval()：设置最大有效非活动时间。</p><p>Int getMaxInactiveInterval():获取最大有效非活动时间。</p><p>Cookie和session的区别：</p><p>session</p><p>cookie</p><p>保存位置</p><p>服务端</p><p>客户端</p><p>安全性</p><p>比较安全</p><p>不安全</p><p>保存内容</p><p>Object</p><p>String</p><h2 id="四个范围对象："><a href="#四个范围对象：" class="headerlink" title="四个范围对象："></a>四个范围对象：</h2><h4 id="范围："><a href="#范围：" class="headerlink" title="范围："></a>范围：</h4><p>pageContext：当前页面有效</p><p>request：一次请求有效</p><p>session：一次对话有效</p><p>appliation：全局有效（整个项目）</p><h4 id="共有方法："><a href="#共有方法：" class="headerlink" title="共有方法："></a>共有方法：</h4><p>Object getAttribute(String name):根据属性名获得属性值</p><p>void setAttribute(String name,Object obj)：设置属性值（新增修改）</p><p>void removeAttribute(String name)：删除属性</p>]]></content>
      
      
      <categories>
          
          <category> Java_web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令</title>
      <link href="/2020/03/29/linux-ming-ling/"/>
      <url>/2020/03/29/linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="目录处理："><a href="#目录处理：" class="headerlink" title="目录处理："></a>目录处理：</h4><h5 id="1-目录创建：mkdir"><a href="#1-目录创建：mkdir" class="headerlink" title="1.目录创建：mkdir"></a>1.目录创建：mkdir</h5><p>mkdir（在/temp下创建，建议不在主目录创建；可以同事创建多个目录）</p><p>-p递归创建</p><h5 id="2-目录切换：cd"><a href="#2-目录切换：cd" class="headerlink" title="2.目录切换：cd"></a>2.目录切换：cd</h5><p>cd</p><p>cd … 回到上一级目录</p><p>cd / 回到主目录</p><h5 id="3-显示当前目录："><a href="#3-显示当前目录：" class="headerlink" title="3.显示当前目录："></a>3.显示当前目录：</h5><p>pwd</p><h5 id="4-删除当前目录：rmdir"><a href="#4-删除当前目录：rmdir" class="headerlink" title="4.删除当前目录：rmdir"></a>4.删除当前目录：rmdir</h5><p>rmdir</p><h5 id="5-复制文件或目录：cp"><a href="#5-复制文件或目录：cp" class="headerlink" title="5.复制文件或目录：cp"></a>5.复制文件或目录：cp</h5><p>cp</p><p>cp -rp [原文件或者目录] [目标目录]</p><p>-r 复制目录</p><p>-p 保留文件属性（preserve）复制过去后不用修改文件名称</p><h5 id="6-剪切文件-改名：mv"><a href="#6-剪切文件-改名：mv" class="headerlink" title="6.剪切文件/改名：mv"></a>6.剪切文件/改名：mv</h5><p>mv</p><h5 id="7-文件删除：rm"><a href="#7-文件删除：rm" class="headerlink" title="7.文件删除：rm"></a>7.文件删除：rm</h5><p>rm -rf [文件或者目录]</p><p>-r 删除目录</p><p>-f 强制执行（危险行为；可以备份、少使用root账户）</p><h4 id="文件处理："><a href="#文件处理：" class="headerlink" title="文件处理："></a>文件处理：</h4><h5 id="1-空文件创建：touch"><a href="#1-空文件创建：touch" class="headerlink" title="1.空文件创建：touch"></a>1.空文件创建：touch</h5><p>空格隔开可以创建多个文件</p><p>可以用双引号，可以创建包括空格的文件名的文件</p><h5 id="2-查询文件：cat"><a href="#2-查询文件：cat" class="headerlink" title="2.查询文件：cat"></a>2.查询文件：cat</h5><p>cat</p><p>-n 显示行号</p><p>（tac可以反向显示）</p><h5 id="3-分页显示文件：more-less-可以上翻"><a href="#3-分页显示文件：more-less-可以上翻" class="headerlink" title="3.分页显示文件：more/less(可以上翻)"></a>3.分页显示文件：more/less(可以上翻)</h5><p>more</p><p>空格或f翻页，enter行查找</p><p>q退出</p><p>less</p><p>输入 / + 搜索内容 可以搜索文件内容（ n 查找下一个）</p><h5 id="4-指定显示文件几行内容：head-tail"><a href="#4-指定显示文件几行内容：head-tail" class="headerlink" title="4.指定显示文件几行内容：head/tail"></a>4.指定显示文件几行内容：head/tail</h5><p>head</p><p>-n 显示前几行内容（指定几行）</p><p>tail</p><p>-n 指定行数</p><p>-f 动态显示文件变化</p><h4 id="文件处理：-1"><a href="#文件处理：-1" class="headerlink" title="文件处理："></a>文件处理：</h4><h5 id="1-生成链接文件：ln"><a href="#1-生成链接文件：ln" class="headerlink" title="1.生成链接文件：ln"></a>1.生成链接文件：ln</h5><p>ln -s [源文件] [目标文件]</p><p>-s 创建软链接（类似于Windows的快捷方式）对于任何的用户都可用</p><p><strong>软链接：相当于一个快捷方式；</strong></p><p><strong>文件大小：符号链接</strong></p><hr><p><strong>硬链接：权限内容和原文件相同；</strong></p><p><strong>和cp区别是可以同步更新，相当于两个文件连接起来；</strong></p><p><strong>删除一个文件，另一个文件仍然存在，但是修改会同步</strong></p><p><strong>硬链接之间通过i结点链接（通过ls -i可以查看文件i结点），两个硬链接的i结点相同；</strong></p><p><strong>不能针对目录使用；</strong></p><p><strong>不能跨分区</strong></p><h3 id="权限管理："><a href="#权限管理：" class="headerlink" title="权限管理："></a>权限管理：</h3><h4 id="权限管理：-1"><a href="#权限管理：-1" class="headerlink" title="权限管理："></a>权限管理：</h4><h5 id="1-管理命令：chmod"><a href="#1-管理命令：chmod" class="headerlink" title="1.管理命令：chmod"></a>1.管理命令：chmod</h5><p>chmod（changemod）</p><p>chmod [{ugoa}{+-=}{rwx}[文件或目录]] 给某个用户对某个文件或目录添加，删除，等于某个权限</p><p>（u所有者；g所属组；o其他人）</p><p>[mode=421] [文件或目录]</p><p>（r —- 4 w —- 2 x —-1）</p><p>-R 递归修改</p><p>u所有者；g所属组；o其他人</p><h5 id="对于文件和目录的权限不同处"><a href="#对于文件和目录的权限不同处" class="headerlink" title="对于文件和目录的权限不同处"></a>对于文件和目录的权限不同处</h5><p>文件</p><p><strong>r 可读</strong></p><p><strong>w 可编辑</strong></p><p><strong>x 可执行</strong></p><p>目录</p><p><strong>r 可以查看目录内容</strong></p><p><strong>r 可以列出目录中的内容</strong></p><p><strong>w 可以在目录中创建和删除文件</strong></p><p><strong>x 可以进入目录</strong>，对于目录来说，rx应该同时存在</p><h5 id="2-改变所有者：chown"><a href="#2-改变所有者：chown" class="headerlink" title="2.改变所有者：chown"></a>2.改变所有者：chown</h5><p>chown</p><p>chown [用户] [文件或目录]</p><p>只有root可以使用</p><h5 id="3-改变所属组：chgrp"><a href="#3-改变所属组：chgrp" class="headerlink" title="3.改变所属组：chgrp"></a>3.改变所属组：chgrp</h5><p>chgrp</p><p>chgrp [用户] [文件或目录]</p><h5 id="4-设置文件缺省（默认）权限：umask"><a href="#4-设置文件缺省（默认）权限：umask" class="headerlink" title="4.设置文件缺省（默认）权限：umask"></a>4.设置文件缺省（默认）权限：umask</h5><p>umask [-S]</p><p>-S 以rwx形式显示新建文件缺省权限</p><p>linux默认新建文件不具有可执行权限</p><h3 id="文件搜索："><a href="#文件搜索：" class="headerlink" title="文件搜索："></a>文件搜索：</h3><h5 id="1-文件搜索命令：find"><a href="#1-文件搜索命令：find" class="headerlink" title="1.文件搜索命令：find"></a>1.文件搜索命令：find</h5><p>find [搜索范围] [匹配条件]</p><p>正则表达式搜索</p><h5 id="2-资料库查找文件：locate"><a href="#2-资料库查找文件：locate" class="headerlink" title="2.资料库查找文件：locate"></a>2.资料库查找文件：locate</h5><p>locate 文件名 （快）</p><h5 id="3-搜索命令位置：which-whereis"><a href="#3-搜索命令位置：which-whereis" class="headerlink" title="3.搜索命令位置：which/whereis"></a>3.搜索命令位置：which/whereis</h5><p>which [命令名]</p><p>除了可以查找到位置，还可以查找到命令当前的别名</p><p>例如rm = rm -i</p><p>例如useradd = useradd</p><p>whereis [命令名]</p><p>搜索命令所在目录和帮助文档路径</p><h5 id="4-搜索文件内容：grep"><a href="#4-搜索文件内容：grep" class="headerlink" title="4.搜索文件内容：grep"></a>4.搜索文件内容：grep</h5><p>grep -iv [指定字串] [文件]</p><p>输出指定字串所在行并输出</p><p>-i 不区分大小写</p><p>-v 排除指定字串</p><h3 id="帮助命令："><a href="#帮助命令：" class="headerlink" title="帮助命令："></a>帮助命令：</h3><h4 id="帮助："><a href="#帮助：" class="headerlink" title="帮助："></a>帮助：</h4><h5 id="1-查看帮助信息：man"><a href="#1-查看帮助信息：man" class="headerlink" title="1.查看帮助信息：man"></a>1.查看帮助信息：man</h5><p>man [命令名]</p><h5 id="2-查看命令如何使用：whatis"><a href="#2-查看命令如何使用：whatis" class="headerlink" title="2.查看命令如何使用：whatis"></a>2.查看命令如何使用：whatis</h5><h5 id="3-apropos"><a href="#3-apropos" class="headerlink" title="3.apropos"></a>3.apropos</h5><p>apropos [配置文件]</p><h5 id="4-–help"><a href="#4-–help" class="headerlink" title="4. –help"></a>4. –help</h5><h3 id="用户管理："><a href="#用户管理：" class="headerlink" title="用户管理："></a>用户管理：</h3><h5 id="1-添加用户：useradd"><a href="#1-添加用户：useradd" class="headerlink" title="1.添加用户：useradd"></a>1.添加用户：useradd</h5><p>root用户可使用（应规范化使用）</p><h5 id="2-更改用户密码：passwd"><a href="#2-更改用户密码：passwd" class="headerlink" title="2.更改用户密码：passwd"></a>2.更改用户密码：passwd</h5><p>root用户可更改所有人密码，每个用户仅可更改自己密码</p><h5 id="3-查看用户登录信息：who"><a href="#3-查看用户登录信息：who" class="headerlink" title="3.查看用户登录信息：who"></a>3.查看用户登录信息：who</h5><p>tty 本地终端</p><p>pts 远程终端</p><h5 id="4-查看登录用户详细信息：w"><a href="#4-查看登录用户详细信息：w" class="headerlink" title="4.查看登录用户详细信息：w"></a>4.查看登录用户详细信息：w</h5><p>uptime可查看登陆时间</p><h3 id="压缩命令："><a href="#压缩命令：" class="headerlink" title="压缩命令："></a>压缩命令：</h3><p>windows支持所有linux压缩包</p><p>linux不支持部分windows压缩包</p><h5 id="1-压缩命令：gzip"><a href="#1-压缩命令：gzip" class="headerlink" title="1.压缩命令：gzip"></a>1.压缩命令：gzip</h5><p>压缩为gz文件</p><p>压缩比比较大，和windous相比较大</p><p>压缩后没有原文件</p><h5 id="2-解压缩命令：gunzip"><a href="#2-解压缩命令：gunzip" class="headerlink" title="2.解压缩命令：gunzip"></a>2.解压缩命令：gunzip</h5><h5 id="3-打包目录：tar"><a href="#3-打包目录：tar" class="headerlink" title="3.打包目录：tar"></a>3.打包目录：tar</h5><p>tar [-cvfz] [压缩后文件名] [目录]</p><p>把一个目录打包成一个文件，同时进行压缩</p><p>-c 打包</p><p>-v 显示详细信息</p><p>-f 指定文件名</p><p>-z 打包同时压缩</p><p>顺序为-zcvf f必须在最后面</p><p>-x 解包</p><p>打包成tar文件后可gzip压缩为tar.gz文件（原文件最常用的文件格式）</p><p>（该命令保留原文件</p><h5 id="4-压缩文件或目录（跨windows-linux）：zip"><a href="#4-压缩文件或目录（跨windows-linux）：zip" class="headerlink" title="4.压缩文件或目录（跨windows/linux）：zip"></a>4.压缩文件或目录（跨windows/linux）：zip</h5><p>zip -r [文件或目录]</p><p>-r 压缩目录</p><h5 id="4-解压文件或目录（跨windows-linux）：unzip"><a href="#4-解压文件或目录（跨windows-linux）：unzip" class="headerlink" title="4.解压文件或目录（跨windows/linux）：unzip"></a>4.解压文件或目录（跨windows/linux）：unzip</h5><h5 id="5-压缩大文件：bzip2"><a href="#5-压缩大文件：bzip2" class="headerlink" title="5.压缩大文件：bzip2"></a>5.压缩大文件：bzip2</h5><p>压缩比很大，产生bz2文件</p><p>bzip2 -k [文件]</p><p>-k 保留原文件</p><h3 id="网络命令："><a href="#网络命令：" class="headerlink" title="网络命令："></a>网络命令：</h3><h4 id="交流信息："><a href="#交流信息：" class="headerlink" title="交流信息："></a>交流信息：</h4><h5 id="1-发送信息：write"><a href="#1-发送信息：write" class="headerlink" title="1.发送信息：write"></a>1.发送信息：write</h5><p>write [用户名]</p><p>直到Ctrl + D 保存发送信息</p><h5 id="2-给所有在线用户发信息：wall"><a href="#2-给所有在线用户发信息：wall" class="headerlink" title="2.给所有在线用户发信息：wall"></a>2.给所有在线用户发信息：wall</h5><p>wall [信息内容]</p><h5 id="3-测试网络连通：ping"><a href="#3-测试网络连通：ping" class="headerlink" title="3.测试网络连通：ping"></a>3.测试网络连通：ping</h5><h5 id="4-查看网卡信息：ifconfig"><a href="#4-查看网卡信息：ifconfig" class="headerlink" title="4.查看网卡信息：ifconfig"></a>4.查看网卡信息：ifconfig</h5><p>eth33 当前网卡</p><p>inet 当前ip地址</p><p>HWaddr物理地址，无法修改</p><p>lo 不重要</p><h5 id="5-查看发送电子邮件：mail"><a href="#5-查看发送电子邮件：mail" class="headerlink" title="5.查看发送电子邮件：mail"></a>5.查看发送电子邮件：mail</h5><p>mail [用户名]</p><p>h查看</p><p>d + 数字 删除第几个</p><h5 id="6-列出所有用户登录信息：last"><a href="#6-列出所有用户登录信息：last" class="headerlink" title="6.列出所有用户登录信息：last"></a>6.列出所有用户登录信息：last</h5><h5 id="7-查看某特定用户登陆时间：lastlog"><a href="#7-查看某特定用户登陆时间：lastlog" class="headerlink" title="7.查看某特定用户登陆时间：lastlog"></a>7.查看某特定用户登陆时间：lastlog</h5><p>last -u [用户id]</p><h5 id="8-数据包到主机的路径：traceroute"><a href="#8-数据包到主机的路径：traceroute" class="headerlink" title="8.数据包到主机的路径：traceroute"></a>8.数据包到主机的路径：traceroute</h5><h5 id="9-显示网络信息：netstat"><a href="#9-显示网络信息：netstat" class="headerlink" title="9.显示网络信息：netstat"></a>9.显示网络信息：netstat</h5><p>-t TCP协议</p><p>-u UDP协议</p><p>-l 监听</p><p>-r 路由</p><p>-n 显示IP地址和端口号</p><h5 id="10-配置网络：setup"><a href="#10-配置网络：setup" class="headerlink" title="10.配置网络：setup"></a>10.配置网络：setup</h5><h5 id="11-挂载命令：mount"><a href="#11-挂载命令：mount" class="headerlink" title="11.挂载命令：mount"></a>11.挂载命令：mount</h5><p>mount [-t 文件系统] 设备文件名 挂载点</p><p>sr0，cdrom等软件接口可以作为挂载点</p><h5 id="12-卸载命令：umount"><a href="#12-卸载命令：umount" class="headerlink" title="12.卸载命令：umount"></a>12.卸载命令：umount</h5><h3 id="关机命令："><a href="#关机命令：" class="headerlink" title="关机命令："></a>关机命令：</h3><h5 id="1-关机：shutdown"><a href="#1-关机：shutdown" class="headerlink" title="1.关机：shutdown"></a>1.关机：shutdown</h5><p>shutdown [选项] 时间</p><p>-c 取消</p><p>-h 关机</p><p>-r 重启</p><p>halt</p><p>poweroff</p><p>init()</p><p>都可以进行关机命令</p><h5 id="2-重启：reboot"><a href="#2-重启：reboot" class="headerlink" title="2.重启：reboot"></a>2.重启：reboot</h5><p>init 6</p><h3 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h3><h4 id="模式："><a href="#模式：" class="headerlink" title="模式："></a>模式：</h4><h5 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h5><p>i 光标所在字符前插入</p><p>I 光标所在行前插入</p><p>a 在光标所在字符后插入</p><p>A 在光标所在行尾插入</p><p>o 在光标下插入新行</p><p>O 在光标上插入新行</p><p>行变换：</p><p>:SET NU</p><p>设置行号</p><p>:set nonu</p><p>取消行号</p><p>gg</p><p>到第一行</p><p>G</p><p>到最后一行</p><p>nG</p><p>到第n行</p><p>:n</p><p>到第n行</p><p>删除：</p><p>X</p><p>删除光标所在处字符</p><p>nx</p><p>删除光标所在n个字符</p><p>dd</p><p>删除光标所在行（ndd n行）</p><p>dG</p><p>删除光标所在直到文件末尾</p><p>D</p><p>删除光标所在到行位</p><p>:n1,n2d</p><p>删除指定范围的行</p><p>复制和剪切：</p><p>YY</p><p>复制当前行</p><p>nyy</p><p>复制n行</p><p>dd</p><p>剪切当前行</p><p>ndd</p><p>剪切n行</p><p>p、P</p><p>粘贴到当前光标所在行下或行上</p><p>替换和取消：</p><p>R</p><p>替换光标所在处字符</p><p>R</p><p>从光标开始出替换字符，Esc结束</p><p>u</p><p>取消上一步</p><p>搜索：</p><p>/STRING</p><p>搜索“STRING”字符串（:SET IC忽略大小写)</p><p>n</p><p>下一个</p><p>:%s/old/new/g</p><p>全文替换指定字符串</p><p>:n1,n2s/old/new/g</p><p>一定范围内替换指定字符</p><p>保存：</p><p>:W</p><p>保存修改</p><p>:w new_filename</p><p>另存为</p><p>:wq</p><p>保存修改并退出</p><p>ZZ</p><p>快捷键</p><p>:q!</p><p>不保存修改退出</p><p>:wq!</p><p>保存修改和退出（文件所有人和root）</p><p>导入、设置、批量插入命令：</p><p>R !COMMAND</p><p>从光标处导入命令结果</p><p>r filename</p><p>从光标处导入文件内容</p><p>map 快捷键 触发命令</p><p>设置快捷键（如果设置ctrl+p 应ctrl+v+p）（当前文档有效）</p><p>:ab mail **@qq.com</p><p>把mail替换成**@qq.com</p><p>:n1,n2s/^/#/g</p><p>在n1到n2的行首添加#</p><p>:n1,n2s/^/\/\//g</p><p>在n1到n2 的行首添加//</p><p>.vimrc默认vim配置</p><p>/home/username/.vimrc</p><p>/root/.vimrc</p><h5 id="编辑模式："><a href="#编辑模式：" class="headerlink" title="编辑模式："></a>编辑模式：</h5><h5 id="插入模式："><a href="#插入模式：" class="headerlink" title="插入模式："></a>插入模式：</h5><h3 id="软件包管理："><a href="#软件包管理：" class="headerlink" title="软件包管理："></a>软件包管理：</h3><h4 id="RPM："><a href="#RPM：" class="headerlink" title="RPM："></a>RPM：</h4><h5 id="命名和依赖性："><a href="#命名和依赖性：" class="headerlink" title="命名和依赖性："></a>命名和依赖性：</h5><p>命名规则：httpd-2.2.15-15.el6.centos.1.i686.rpm（包全名）</p><p>包名：已经安装的用包名</p><p>包全名：未安装的包名</p><p>软件包名+软件版本+发布次数+适合linux平台+硬件平台</p><p>noarch全平台可用</p><p>依赖性查找网站：<a href="www.rpmfind.net">www.rpmfind.net</a></p><h5 id="命令："><a href="#命令：" class="headerlink" title="命令："></a>命令：</h5><p>rpm -ivh 包全名</p><p>i 安装</p><p>v 详细信息</p><p>h 进度</p><p>升级：</p><p>rpm -Uvh 包全名</p><p>卸载：-e</p><h5 id="校验："><a href="#校验：" class="headerlink" title="校验："></a>校验：</h5><p>rpm -V 校验指定RPM包中的文件（verify）</p><p>检验和初始安装的包是否有差别</p><h4 id="YUM："><a href="#YUM：" class="headerlink" title="YUM："></a>YUM：</h4><p>yum在线安装，相对于rpm无需考虑文件依赖</p><p>/etc/yum.repos.d yum源文件</p><h5 id="命令：-1"><a href="#命令：-1" class="headerlink" title="命令："></a>命令：</h5><p>1.yum list 查看当前yum在线可用软件包</p><p>2.yum search 关键字 查看和关键字有关的包</p><p>3.yum -y install 包名 安装</p><p>4.yum -y update 包名 升级</p><p>5.yum -y remove 包名 卸载</p><p>6.yum grouplist 查询可用软件包组</p><h5 id="yum源搭建："><a href="#yum源搭建：" class="headerlink" title="yum源搭建："></a>yum源搭建：</h5><p>1）.挂载光盘</p><p>2）.修改网络yum源无效</p><p>3）.修改光盘yum源</p><h3 id="用户和用户组管理："><a href="#用户和用户组管理：" class="headerlink" title="用户和用户组管理："></a>用户和用户组管理：</h3><h5 id="用户信息：-etc-passwd"><a href="#用户信息：-etc-passwd" class="headerlink" title="用户信息：/etc/passwd"></a>用户信息：/etc/passwd</h5><p>第一字段：用户名称</p><p>第二字段：密码标志</p><p>第三字段：UID</p><p>第四字段：GID（用户组字段）（初始组–默认，附加组）</p><p>第五字段：用户说明</p><p>第六字段：家目录</p><p>第七字段：登陆之后的shell</p><p>0：超级用户</p><p>1-499：系统用户</p><p>500-65533：其他用户</p><h5 id="真正密码：-etc-shadow"><a href="#真正密码：-etc-shadow" class="headerlink" title="真正密码：/etc/shadow"></a>真正密码：/etc/shadow</h5><p>只有root可看可编辑</p><p>第一字段：用户名</p><p>第二字段：加密密码（SHA512散列加密，如果是!!或者*则没有密码不可登陆）</p><p>第三字段：密码最后一次修改时间（1970年1月1日为标准时间，过一天+1）</p><p>第四字段：修改密码时间间隔</p><p>第五字段：密码有效期</p><p>第六字段：密码到期警告时间</p><p>第七字段：密码到期宽限时间</p><p>第八字段：账号失效时间</p><p>第九字段：保留</p><h5 id="时间戳换算："><a href="#时间戳换算：" class="headerlink" title="时间戳换算："></a>时间戳换算：</h5><p>时间戳换算为日期：</p><p>date -d 1970-01-01 16066 days</p><p>日期换算为时间戳：</p><p>echo $(($(date –date=2014/01/06 +%s)/86400+1))</p><h5 id="组信息文件：-etc-group"><a href="#组信息文件：-etc-group" class="headerlink" title="组信息文件：/etc/group"></a>组信息文件：/etc/group</h5><p>第一字段：组名</p><p>第二字段：组密码标志</p><p>第三字段：GID</p><p>第四字段：组中附加用户</p><h3 id="Bash功能"><a href="#Bash功能" class="headerlink" title="Bash功能"></a>Bash功能</h3>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA web_1_基础知识</title>
      <link href="/2020/03/29/java-web-1-ji-chu-zhi-shi/"/>
      <url>/2020/03/29/java-web-1-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-WEB"><a href="#JAVA-WEB" class="headerlink" title="JAVA WEB"></a>JAVA WEB</h1><p>一般用于动态页面</p><p>JSP（服务端脚本语言）</p><h2 id="服务器架构"><a href="#服务器架构" class="headerlink" title="服务器架构"></a>服务器架构</h2><h5 id="CS：Client-Server"><a href="#CS：Client-Server" class="headerlink" title="CS：Client Server"></a>CS：Client Server</h5><p>客户端</p><h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><ol><li> 需要更新则必须全部更新</li><li> 任何一个坏了都要维护</li><li> 每一个客户端 都要安装客户端软件</li></ol><h5 id="BS：Broswer-Server"><a href="#BS：Broswer-Server" class="headerlink" title="BS：Broswer Server"></a>BS：Broswer Server</h5><p>通过浏览器直接访问服务器（tomcat）</p><p>JSP基于BS</p><h2 id="tomcat："><a href="#tomcat：" class="headerlink" title="tomcat："></a>tomcat：</h2><h6 id="重要的几个目录："><a href="#重要的几个目录：" class="headerlink" title="重要的几个目录："></a>重要的几个目录：</h6><ul><li>  lib：tomcat的jar包目录</li><li>  webapps：执行项目目录</li><li>  work：由jsp翻译成的java和class目录</li><li>  temp：临时文件</li><li>  conf：配置文件 ​ server.xml（可设置各种参数，例如端口）</li></ul><p>默认访问webapps里面的root文件夹，可以修改 访问的主页默认为文件夹里面的index.html，可在WEB-INF的xml文件中修改</p><h6 id="网站文件结构："><a href="#网站文件结构：" class="headerlink" title="网站文件结构："></a>网站文件结构：</h6><p>WEB-INF：web.xml 也可以加入项目专有的lib/classes</p><h6 id="虚拟路径："><a href="#虚拟路径：" class="headerlink" title="虚拟路径："></a>虚拟路径：</h6><p>方式一：</p><p>在server.xml中设置。</p><p>将web项目配置到webapps以外的目录</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">docBase</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>D:\***<span class="token punctuation">"</span></span> <span class="token attr-name">path</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>/JspProject<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>#相当于访问path的路径时，默认访问docBasepath虚拟路径，docBase实际路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>绝对路径</p><p>相对路径（相对于webapps的路径）</p><p>需要重新启动</p><p>方法二：在conf的Catalina localhost文件夹中创建xml文件添加以上代码</p><p>不需要重新启动</p><p><strong>Catalina localhost中的xml文件名为ROOT，则在网站打开时不需要添加ROOT作为路径</strong></p><hr><p><strong>JSP：在html中嵌套的java代码</strong></p><h6 id="虚拟主机："><a href="#虚拟主机：" class="headerlink" title="虚拟主机："></a>虚拟主机：</h6><p>使服务器访问一个域名时不通过解析IP地址，而是通过本地的hosts文件映射直接返回服务器IP地址</p><p>1.在server.xml中添加</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Engine</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>Catalina<span class="token punctuation">"</span></span> <span class="token attr-name">defaultHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.test.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Host</span> <span class="token attr-name">appBase</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>D:***<span class="token punctuation">"</span></span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>www.test.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;Context docBase = "D:***" path = "/"                                                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Host</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Engine</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.本机hosts文件添加映射</p><h3 id="JSP运行流程："><a href="#JSP运行流程：" class="headerlink" title="JSP运行流程："></a>JSP运行流程：</h3><p>IE请求tomcat服务器，服务器返回响应（处理下面第一次访问的步骤后，打印显示文字）</p><p>第一次访问：jsp-&gt;java（servlet文件）-&gt;class</p><p>第二次访问：不需要编译，直接访问class（如果没有改变的话）（改变的话会重新编译</p><hr><h5 id="小插曲：Intellij创建java-web项目步骤"><a href="#小插曲：Intellij创建java-web项目步骤" class="headerlink" title="小插曲：Intellij创建java web项目步骤"></a>小插曲：Intellij创建java web项目步骤</h5><ol><li> 创建JAVA EE中的Web Application</li><li> 创建完成add configuration添加本地tomcat，</li><li> 添加atricated，</li><li> 修改context</li></ol><h3 id="IDE中实战："><a href="#IDE中实战：" class="headerlink" title="IDE中实战："></a>IDE中实战：</h3><p>WEB-INF中的文件无法直接通过url访问，需要请求转发使用</p><p>如果想要项目可以同时使用servlet和jsp，需要添加tomcat/lib/servlet-api.jar（对于intellij来说应该是废话）</p><p>需要统一编码，推荐使用UTF-8</p><h2 id="JSP基础："><a href="#JSP基础：" class="headerlink" title="JSP基础："></a>JSP基础：</h2><h5 id="JSP的页面元素："><a href="#JSP的页面元素：" class="headerlink" title="JSP的页面元素："></a>JSP的页面元素：</h5><h6 id="脚本Scriptlet："><a href="#脚本Scriptlet：" class="headerlink" title="脚本Scriptlet："></a>脚本Scriptlet：</h6><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%    %&gt;部分变量、java语句&lt;%!    %&gt;全局变量、定义方法&lt;%&#x3D;输出表达式%&gt;&lt;%&#x3D;&quot;hello&quot;+name%&gt;输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="指令："><a href="#指令：" class="headerlink" title="指令："></a>指令：</h6><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page ....%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>page：指定的属性</p><p>language：jsp使用的脚本语言</p><p>import：导入类</p><p>pageEncoding：jsp文件本身编码 jsp-&gt;java</p><p>contentType：浏览器解析jsp代码（一般用UTF-8统一）</p><h6 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h6><p>html 可以被看到源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">java <span class="token comment">/*...*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>jsp &lt;%– –%&gt;</p><h5 id="JSP内置对象（九个）："><a href="#JSP内置对象（九个）：" class="headerlink" title="JSP内置对象（九个）："></a>JSP内置对象（九个）：</h5><ul><li>  out：输出内容</li><li>  pageContext</li><li>request：请求，存储“客户端向服务端发送的请求”（包含状态，动作）<ul><li>  String getParameter(String name)：根据key返回value</li><li>  String[] getParameter(String name)：根据key返回多个value</li><li>  void setCharacterEncoding(“编码格式”)：设置请求编码</li><li>  getRequestDispatcher(b.jsp).forward(request,response)：请求转发的方式跳转页面</li><li>  getServerContext()：获取项目的ServletContext对象</li></ul></li><li>  response</li><li>  session</li><li>  application</li><li>  config</li><li>  page</li><li>  exception</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java_web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>html总结</title>
      <link href="/2020/03/29/html-zong-jie/"/>
      <url>/2020/03/29/html-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><span id="more"></span><h4 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h4><h5 id="html基本结构"><a href="#html基本结构" class="headerlink" title="html基本结构"></a>html基本结构</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>html标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>html标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> 标题标签1-6之间字体大小逐渐减小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> 段落标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> 加粗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> 加粗优化搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> 斜体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>类名,style中设置属性<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> 块级元素（新行）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> 内联元素（不新行）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 图片标签&lt;a href="" target="_self(在原有网页上打开)/_blank(打开空白页)" title=”鼠标移动链接上显示的内容” name/id = "label（相当于标签）"> 链接标签 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>指向name（锚）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>产生文本区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxxx.gif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>插入背景引用：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">></span></span> 引号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">></span></span> 长引用（常缩进）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>abbr</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>World Health Organization<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>WHO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>abbr</span><span class="token punctuation">></span></span> 表明简称，鼠标移动上时显示全称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">></span></span> 地址（一般斜体）计算机代码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kbd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kbd</span><span class="token punctuation">></span></span>, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>samp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>samp</span><span class="token punctuation">></span></span>,  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span> 支持固定的长度Bootstrap:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>   <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 使用现成的框架<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span> 有序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span> 无序列表 消除列表圆点list-style:none;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span> 自定义列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”列数”</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”行数”</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>th和td的区别:th自动加粗自身表格里的内容表单产生下拉列表:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>文 本 框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">maxlength"可输入的最大长度"</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>提交按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>普通按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>普通按钮<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>密 码 框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>重置按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>单选按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>文件上传按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>多选按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>name下拉框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>&lt;optgroup=””><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>多行文本域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span>  <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>行<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>列<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>隐藏域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>图片按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片加载失败提示内容<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="易错知识点"><a href="#易错知识点" class="headerlink" title="易错知识点"></a>易错知识点</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>不属于HTML标签，它用于指定文档的类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>标签用于预定义格式处理，文本在浏览器中显示时遵循HTML文档规范在HTML表格里面如果我们的表格很复杂，那么表格要完全加载下来再显示，它的加载时间太长影响用户体验，所以我们可以使用表格结构划分标签，让它加载一部分就显示一部分。HTML里面导入CSS样式时，使用link与@inport的区别：link除了可以加载CSS样式外还可以做很多事情，比如设置rel(文档与样式的关系)等等，link加载CSS时与页面同时加载，而@import加载时会先把页面下载下来，再加载HTML链接<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>HTML图像与超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>F:\360MoveData\Users\acer\Desktop\捕获.PNG<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>微信截图<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--绝对路径--></span>    <span class="token comment">&lt;!--alt的作用是当网络不好，或者src里面属性错误，        或者浏览器禁用图片等不能显示图片的情况下显示的文字--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>捕获.PNG<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>微信截图<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--相对路径--></span>    <span class="token comment">&lt;!--当图片的位置发生改变的时候，绝对路径将不能显示，但是相对路径可以--></span>    <span class="token comment">&lt;!--设置属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>捕获.PNG<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50px<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token comment">&lt;!--px代表像素--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>捕获.PNG<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20%<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30%<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  <span class="token comment">&lt;!--也可以使用%来定义，%表示占容器大小的百分之几--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="HTML列表"><a href="#HTML列表" class="headerlink" title="HTML列表"></a>HTML列表</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token comment">&lt;!--这是以小写罗马字符表示,border代表方框的粗细--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>白日依山尽<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>黄河入海流<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>黄河入海流<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--这是小写字母表示--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>I<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--这是以大写罗马字母bioassay--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>html是超文本标记语言<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>A<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--这是以大写罗马字母bioassay--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>html是超文本标记语言<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>列表项标题信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--这三个标签必须一起使用--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>列表项描述信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>列表项描述信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>列表项标题信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>##### HTML自定义链表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="HTML自定义链表"><a href="#HTML自定义链表" class="headerlink" title="HTML自定义链表"></a>HTML自定义链表</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>一个定义列表：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>计算机<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>用来计算的仪器 ... ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>显示器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>以视觉方式显示信息的装置 ... ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="HTML表格"><a href="#HTML表格" class="headerlink" title="HTML表格"></a>HTML表格</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>HTML表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--下面创建一行两列的表格--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--设置边框,不设置的话默认没有--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">></span></span>定义列表标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>加粗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>定义列表块<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>加粗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>定义列表块<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>加粗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>定义列表块<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><!DOCTYPE html><p>HTML表格  </p><p>定义列表标题</p><p>加粗</p><p>定义列表块</p><p>加粗</p><p>定义列表块</p><p>加粗</p><p>定义列表块</p><p>框架：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frameset</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25%,75%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>frame_a.htm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>frame_b.htm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frameset</span><span class="token punctuation">></span></span>   设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS引用"><a href="#CSS引用" class="headerlink" title="CSS引用:"></a>CSS引用:</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">外部样式表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mystyle.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>内部样式表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">&#125;</span>        <span class="token selector">p</span> <span class="token punctuation">&#123;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="script引用："><a href="#script引用：" class="headerlink" title="script引用："></a>script引用：</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span>Your browser does not support JavaScript!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="html速查手册"><a href="#html速查手册" class="headerlink" title="html速查手册"></a>html速查手册</h3><p><a href="https://www.w3school.com.cn/html/html_quick.asp"></a><a href="https://www.w3school.com.cn/html/html_quick.asp">https://www.w3school.com.cn/html/html_quick.asp</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>埃氏筛法——Java</title>
      <link href="/2020/03/29/ai-shi-shai-fa-java/"/>
      <url>/2020/03/29/ai-shi-shai-fa-java/</url>
      
        <content type="html"><![CDATA[<h1 id="埃氏筛法"><a href="#埃氏筛法" class="headerlink" title="埃氏筛法"></a>埃氏筛法</h1><p>埃氏筛法： 用“埃氏筛法”求2～100以内的素数。2～100以内的数，先去掉2的倍数，再去掉3的倍数，再去掉5的倍数，……依此类推（一直到根号100），最后剩下的就是素数。</p><p>网上的算法大多都是修改数组，但是看了同学的原地用数组输出我觉得也挺好，但是可能就不符合埃氏筛法的定义。个人认为筛法应该用于修改数组，而不是用来专门输出，下面附上我自己和同学的代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Homework</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//创建数组</span>           num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//筛选小于根号100的素数</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//删除2-100小于100的素数的的倍数</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//这里注意一定不能漏掉等于自己的情况，不然会无法输出一些数字</span>                       num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                   <span class="token comment">//置为1，输出时输出不是1的数</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">:</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> n<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">long</span> startTime <span class="token operator">=</span>  <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">long</span> endTime <span class="token operator">=</span>  <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">long</span> usedTime <span class="token operator">=</span> <span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用时间"</span> <span class="token operator">+</span> usedTime <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token comment">//尝试过原地修改数组，但是如果素数很多的话反而复杂度会更高，不知道没有其他办法了</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">99</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        outer<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span> outer<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多态</title>
      <link href="/2020/03/29/java-duo-tai/"/>
      <url>/2020/03/29/java-duo-tai/</url>
      
        <content type="html"><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>这里只说两种场合加深印象</p><h2 id="使用的第一种场景："><a href="#使用的第一种场景：" class="headerlink" title="使用的第一种场景："></a>使用的第一种场景：</h2><p><img src="http://pict.lanyun1103.top/typora/20210220222920.png" alt="QQ图片20210220222907"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Outputer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Say</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DuotaiDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> teacher1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Outputer</span> outputer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">outputer<span class="token punctuation">.</span></span>Say</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">outputer<span class="token punctuation">.</span></span>Say</span><span class="token punctuation">(</span>teacher1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二种场景"><a href="#第二种场景" class="headerlink" title="第二种场景"></a>第二种场景</h2><p>多态我想用自己的语言描述一下。</p><p>查了很多网站还是没有理解多态的原理：父类的指针指向子类，用嘴通俗的语言来说，就是把一个子类当成自己的父类。</p><p>引用一个博客里面的例子：<strong>朋友家的婚礼，发了邀请函让父亲去，但是父亲去不了，于是父亲让你去参加婚礼，你当然可以去，因为你代表了你的父亲。</strong></p><p>我自己的解释是：如果用多态创建了一个类，那么这个类在调用时，只能调用自己的父类拥有的内容。</p><p>就是说：</p><ol><li> 不能访问子类特有的成员</li><li> 同名成员变量，使用的是父类的成员变量</li><li> 非静态同名成员函数，使用的是子类的成员函数</li><li> 静态同名成员函数，使用的是父类的成员函数</li></ol><p>具体例子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Personn</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is the origin class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Studentt</span> <span class="token keyword">extends</span> <span class="token class-name">Personn</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is the method of studentt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Teacherr</span> <span class="token keyword">extends</span> <span class="token class-name">Personn</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Personn</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Studentt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Personn</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacherr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">person1<span class="token punctuation">.</span></span>Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">person2<span class="token punctuation">.</span></span>Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>output<span class="token operator">:</span><span class="token operator">--</span><span class="token keyword">this</span> is the method of studentt<span class="token operator">--</span><span class="token keyword">this</span> is the origin <span class="token keyword">class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MyShape</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">MyShape</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> r<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token operator">=</span>r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"圆形的面积"</span><span class="token operator">+</span>PI<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"圆的周长"</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>PI<span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Rect</span> <span class="token keyword">extends</span> <span class="token class-name">MyShape</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> width<span class="token punctuation">;</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span><span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token operator">=</span>width<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token operator">=</span>height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"矩形的面积是"</span><span class="token operator">+</span>width<span class="token operator">*</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"矩形的周长是"</span><span class="token operator">+</span><span class="token punctuation">(</span>width<span class="token operator">+</span>height<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo5</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Circle</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">MyShape</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//MyShape s=new Circle(4.0);</span>        s<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//引用https://blog.csdn.net/weixin_45192252/article/details/95042561的代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名字："</span><span class="token operator">+</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",年龄："</span><span class="token operator">+</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token class-name">String</span> color<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花色："</span><span class="token operator">+</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用父类类型的引用指向父类自己的对象，没有多态</span>        <span class="token class-name">Pet</span> p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//无论是否重写show（）方法，都调用Pet类中的show方法</span>        p1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用子类类型的引用指向父类自己的对象，没有多态</span>        <span class="token comment">//当子类重写show（）方法后，则调用子类中重写以后的方法</span>        <span class="token class-name">Cat</span> c1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"小花"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"白色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用Pet类中的show（）方法</span>        c1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//父类类型的引用指向了子类的对象，形成了多态</span>        <span class="token class-name">Pet</span> pc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"喵咪"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"咖啡色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用Pet类的show方法</span>        <span class="token comment">//当子类重写show（）方法后，在运行阶段最终调用了子</span>        类重写以后        的版本        <span class="token comment">//在编译阶段还是调用父类的方法，运行阶段调子类</span>        pc<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java IO（char的字节流 以及 缓冲流 的详解）</title>
      <link href="/2020/03/29/java-io-char-de-zi-jie-liu-yi-ji-huan-chong-liu-de-xiang-jie/"/>
      <url>/2020/03/29/java-io-char-de-zi-jie-liu-yi-ji-huan-chong-liu-de-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="输出中文字符"><a href="#输出中文字符" class="headerlink" title="输出中文字符"></a>输出中文字符</h3><p>InputStreamReader类 可以读取文件中的中文字符。（虽然说这个是字节流，但是他读取不是用bytes而是用char）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStreamReader</span> gbk1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> gbk1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputStream</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file2<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OutputStreamWriter</span> gbk2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>f2<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gbk2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>gbk2<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gbk2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//******************</span><span class="token comment">//简化</span><span class="token class-name">InputStreamReader</span> gbk1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> gbk1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OutputStreamWriter</span> gbk2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file2<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gbk2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>gbk2<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gbk2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="缓冲流："><a href="#缓冲流：" class="headerlink" title="缓冲流："></a>缓冲流：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//省略了File类的创建              </span><span class="token comment">//创建字符输出流对象，获取字符输入流</span><span class="token class-name">InputStreamReader</span> inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再套一层就有点不好看了，创建缓冲流对象</span><span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//一次读取一行，所以读出的东西不会凌乱</span><span class="token comment">//下面是用缓冲流写入文件内容</span><span class="token class-name">OutputStreamWriter</span> gbk2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedWriter</span> bw1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>gbk2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bf1<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    bw1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    bw1<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一个小坑，不newLine的话格式就会改变</span><span class="token punctuation">&#125;</span>bw1<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//必须flush不然文件不会刷新看不见文件内容的改变</span>bw1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java net</title>
      <link href="/2020/03/29/java-net/"/>
      <url>/2020/03/29/java-net/</url>
      
        <content type="html"><![CDATA[<h3 id="客户端对象（Client）-使用Socket类"><a href="#客户端对象（Client）-使用Socket类" class="headerlink" title="客户端对象（Client） 使用Socket类"></a>客户端对象（Client） 使用Socket类</h3><p>[![3NQolQ.md.png]<img src="https://s2.ax1x.com/2020/02/26/3NQolQ.png" alt="3NQolQ.png"></p><p><img src="https://s2.ax1x.com/2020/02/26/3NQRTP.png" alt="3NQRTP.png"></p><p>重点：套接字（包含IP地址和端口的网络单位） 实现创建客户端对象代码：</p><p><img src="https://s2.ax1x.com/2020/02/26/3NQhY8.png" alt="3NQhY8.png"></p><h3 id="服务器对象（Server）-使用ServerSocket"><a href="#服务器对象（Server）-使用ServerSocket" class="headerlink" title="服务器对象（Server） 使用ServerSocket"></a>服务器对象（Server） 使用ServerSocket</h3><p><img src="https://s2.ax1x.com/2020/02/26/3NQolQ.png" alt="3NQolQ.png"> <img src="https://s2.ax1x.com/2020/02/26/3NQfFf.png" alt="3NQfFf.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java properties</title>
      <link href="/2020/03/29/java-properties/"/>
      <url>/2020/03/29/java-properties/</url>
      
        <content type="html"><![CDATA[<p><em>properties可以用来在硬盘上储存需要多次使用的键值对</em> properties是唯一一个和IO相结合的可以持久使用的属性集。properties可以长时间的保存在流中</p><p><img src="https://s2.ax1x.com/2020/02/26/3NG4MD.png" alt="3NG4MD.png"> <img src="https://s2.ax1x.com/2020/02/26/3NG5se.png" alt="3NG5se.png"></p><h4 id="store方法："><a href="#store方法：" class="headerlink" title="store方法："></a>store方法：</h4><p><img src="https://s2.ax1x.com/2020/02/26/3NGfxO.png" alt="3NGfxO.png"> <img src="https://s2.ax1x.com/2020/02/26/3NGWRK.png" alt="3NGWRK.png"> <img src="https://s2.ax1x.com/2020/02/26/3NG2Px.png" alt="3NG2Px.png"></p><h4 id="load方法："><a href="#load方法：" class="headerlink" title="load方法："></a>load方法：</h4><p><img src="https://s2.ax1x.com/2020/02/26/3NGcI1.png" alt="3NGcI1.png"></p><p><strong>注意事项：</strong> <strong>无论是store还是load，字节输入流/输出流都无法输入/输出中文</strong> <strong>但是字符输入流/输出流可以输入/输出中文。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java File</title>
      <link href="/2020/03/29/java-file/"/>
      <url>/2020/03/29/java-file/</url>
      
        <content type="html"><![CDATA[<h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><h3 id="遍历目录功能"><a href="#遍历目录功能" class="headerlink" title="遍历目录功能"></a>遍历目录功能</h3><p><img src="https://s2.ax1x.com/2020/02/26/3NNVQf.png" alt="3NNVQf.png"></p><p>代码：</p><p><img src="https://s2.ax1x.com/2020/02/26/3NNiFA.png" alt="3NNiFA.png"></p><h3 id="创建新文件夹-文件"><a href="#创建新文件夹-文件" class="headerlink" title="创建新文件夹/文件"></a>创建新文件夹/文件</h3><p><img src="https://s2.ax1x.com/2020/02/26/3NN9dH.png" alt="3NN9dH.png"></p><h3 id="判断功能"><a href="#判断功能" class="headerlink" title="判断功能"></a>判断功能</h3><p><img src="https://s2.ax1x.com/2020/02/26/3NNCod.png" alt="3NNCod.png"></p><h3 id="获取功能"><a href="#获取功能" class="headerlink" title="获取功能"></a>获取功能</h3><p><img src="https://s2.ax1x.com/2020/02/26/3NNESP.png" alt="3NNESP.png"></p><h3 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h3><p><img src="https://s2.ax1x.com/2020/02/26/3NNkWt.png" alt="3NNkWt.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>异常处理</title>
      <link href="/2020/03/29/yi-chang-chu-li/"/>
      <url>/2020/03/29/yi-chang-chu-li/</url>
      
        <content type="html"><![CDATA[<h4 id="1-throws（关键字）"><a href="#1-throws（关键字）" class="headerlink" title="1.throws（关键字）"></a>1.throws（关键字）</h4><p>相较于try…catch，Throws把异常交给JVM处理， 但是处理异常后JVM会终止进程，异常代码之后的代码无法执行。</p><h5 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h5><p>1.需要在抛出类的后面加上 throws ***Expection（或者是Expection的父类，最终父类都是Expection）</p><p><img src="http://lanyun1103.top/wp-content/uploads/2020/05/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%AD%A5%E9%AA%A4.jpg"></p><h4 id="2-try…catch"><a href="#2-try…catch" class="headerlink" title="2.try…catch"></a>2.try…catch</h4><p><img src="https://s2.ax1x.com/2020/02/26/3NNsl6.png" alt="3NNsl6.png"></p><p>优点相较于Throws，try…catch可以自定义捕获到异常后应该怎么处理 并且异常之后的代码可以继续执行</p><p>格式为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e <span class="token comment">/*异常变量*/</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">//自定义处理方式</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>finally：必须和try一起使用（无论是否出现异常都会执行的代码块用finally修饰） 一般用于资源释放，无论是否出现异常，都要把资源释放。（IO）</p><p><img src="https://s2.ax1x.com/2020/02/26/3NNy6K.png" alt="3NNy6K.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/2020/03/29/java-duo-xian-cheng/"/>
      <url>/2020/03/29/java-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="实现多线程的两种方法："><a href="#实现多线程的两种方法：" class="headerlink" title="实现多线程的两种方法："></a>实现多线程的两种方法：</h3><h5 id="1-thread（类）"><a href="#1-thread（类）" class="headerlink" title="1.thread（类）"></a>1.thread（类）</h5><p><img src="https://s2.ax1x.com/2020/02/26/3NNq0g.png" alt="3NNq0g.png"> <img src="https://s2.ax1x.com/2020/02/26/3NN7X8.png" alt="3NN7X8.png"> <img src="https://s2.ax1x.com/2020/02/26/3NNXkj.png" alt="3NNXkj.png"></p><p>getName() (获取当前进程名称） setName() (设置当前进程名称） currentThread() （获取当前进程信息，currentThread().getName也可以获得当前名称）</p><h5 id="2-runnable（接口）（推荐使用）"><a href="#2-runnable（接口）（推荐使用）" class="headerlink" title="2.runnable（接口）（推荐使用）"></a>2.runnable（接口）（推荐使用）</h5><p>Runable是由打算通过某一进程执行实例的类来实现的。类必须定义run方法</p><p><img src="https://s2.ax1x.com/2020/02/26/3NNL7Q.png" alt="3NNL7Q.png"></p><p>步骤：</p><p><img src="https://s2.ax1x.com/2020/02/26/3NNIpt.png" alt="3NNIpt.png"></p><p>继承Runnable实现类</p><p><img src="https://s2.ax1x.com/2020/02/26/3NNjts.png" alt="3NNjts.png"></p><p>主函数测试</p><p><img src="https://s2.ax1x.com/2020/02/26/3NNvhn.png" alt="3NNvhn.png"></p><p>（文字来源网络）</p><h3 id="多进程的安全问题"><a href="#多进程的安全问题" class="headerlink" title="多进程的安全问题"></a>多进程的安全问题</h3><p>1.</p><p><img src="https://s2.ax1x.com/2020/02/26/3NUpcV.png" alt="3NUpcV.png"></p><p>大致原理为：在进程中添加锁。 当一个进程正在使用时，如果这个进程包含锁（synchronized），那么其他同时间正在进行的进程访问时，除了正在进行中的那个进程，其他进程e抢到cpu执行权时，会进入阻塞状态，直到正在进行中的进程结束，解开锁（把对象还给同步代码块）。</p><p><img src="https://s2.ax1x.com/2020/02/26/3NUPnU.png" alt="3NUPnU.png"></p><p>2.使用lock</p><p><img src="https://leanote.com/api/file/getImage?fileId=5df3143cab64417d89001af7" alt="title"> <img src="https://s2.ax1x.com/2020/02/26/3NUF74.png" alt="3NUF74.png"></p><p>代码：</p><p><img src="https://s2.ax1x.com/2020/02/26/3NUAAJ.png" alt="3NUAAJ.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java_SE </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
